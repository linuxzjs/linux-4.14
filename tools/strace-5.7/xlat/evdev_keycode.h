/* Generated by ./xlat/gen.sh from ./xlat/evdev_keycode.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(KEY_RESERVED) || (defined(HAVE_DECL_KEY_RESERVED) && HAVE_DECL_KEY_RESERVED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RESERVED) == (0), "KEY_RESERVED != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RESERVED 0
#endif
#if defined(KEY_ESC) || (defined(HAVE_DECL_KEY_ESC) && HAVE_DECL_KEY_ESC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ESC) == (1), "KEY_ESC != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ESC 1
#endif
#if defined(KEY_1) || (defined(HAVE_DECL_KEY_1) && HAVE_DECL_KEY_1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_1) == (2), "KEY_1 != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_1 2
#endif
#if defined(KEY_2) || (defined(HAVE_DECL_KEY_2) && HAVE_DECL_KEY_2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_2) == (3), "KEY_2 != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_2 3
#endif
#if defined(KEY_3) || (defined(HAVE_DECL_KEY_3) && HAVE_DECL_KEY_3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_3) == (4), "KEY_3 != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_3 4
#endif
#if defined(KEY_4) || (defined(HAVE_DECL_KEY_4) && HAVE_DECL_KEY_4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_4) == (5), "KEY_4 != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_4 5
#endif
#if defined(KEY_5) || (defined(HAVE_DECL_KEY_5) && HAVE_DECL_KEY_5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_5) == (6), "KEY_5 != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_5 6
#endif
#if defined(KEY_6) || (defined(HAVE_DECL_KEY_6) && HAVE_DECL_KEY_6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_6) == (7), "KEY_6 != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_6 7
#endif
#if defined(KEY_7) || (defined(HAVE_DECL_KEY_7) && HAVE_DECL_KEY_7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_7) == (8), "KEY_7 != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_7 8
#endif
#if defined(KEY_8) || (defined(HAVE_DECL_KEY_8) && HAVE_DECL_KEY_8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_8) == (9), "KEY_8 != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_8 9
#endif
#if defined(KEY_9) || (defined(HAVE_DECL_KEY_9) && HAVE_DECL_KEY_9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_9) == (10), "KEY_9 != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_9 10
#endif
#if defined(KEY_0) || (defined(HAVE_DECL_KEY_0) && HAVE_DECL_KEY_0)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_0) == (11), "KEY_0 != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_0 11
#endif
#if defined(KEY_MINUS) || (defined(HAVE_DECL_KEY_MINUS) && HAVE_DECL_KEY_MINUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MINUS) == (12), "KEY_MINUS != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MINUS 12
#endif
#if defined(KEY_EQUAL) || (defined(HAVE_DECL_KEY_EQUAL) && HAVE_DECL_KEY_EQUAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_EQUAL) == (13), "KEY_EQUAL != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_EQUAL 13
#endif
#if defined(KEY_BACKSPACE) || (defined(HAVE_DECL_KEY_BACKSPACE) && HAVE_DECL_KEY_BACKSPACE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BACKSPACE) == (14), "KEY_BACKSPACE != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BACKSPACE 14
#endif
#if defined(KEY_TAB) || (defined(HAVE_DECL_KEY_TAB) && HAVE_DECL_KEY_TAB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TAB) == (15), "KEY_TAB != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TAB 15
#endif
#if defined(KEY_Q) || (defined(HAVE_DECL_KEY_Q) && HAVE_DECL_KEY_Q)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_Q) == (16), "KEY_Q != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_Q 16
#endif
#if defined(KEY_W) || (defined(HAVE_DECL_KEY_W) && HAVE_DECL_KEY_W)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_W) == (17), "KEY_W != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_W 17
#endif
#if defined(KEY_E) || (defined(HAVE_DECL_KEY_E) && HAVE_DECL_KEY_E)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_E) == (18), "KEY_E != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_E 18
#endif
#if defined(KEY_R) || (defined(HAVE_DECL_KEY_R) && HAVE_DECL_KEY_R)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_R) == (19), "KEY_R != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_R 19
#endif
#if defined(KEY_T) || (defined(HAVE_DECL_KEY_T) && HAVE_DECL_KEY_T)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_T) == (20), "KEY_T != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_T 20
#endif
#if defined(KEY_Y) || (defined(HAVE_DECL_KEY_Y) && HAVE_DECL_KEY_Y)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_Y) == (21), "KEY_Y != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_Y 21
#endif
#if defined(KEY_U) || (defined(HAVE_DECL_KEY_U) && HAVE_DECL_KEY_U)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_U) == (22), "KEY_U != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_U 22
#endif
#if defined(KEY_I) || (defined(HAVE_DECL_KEY_I) && HAVE_DECL_KEY_I)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_I) == (23), "KEY_I != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_I 23
#endif
#if defined(KEY_O) || (defined(HAVE_DECL_KEY_O) && HAVE_DECL_KEY_O)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_O) == (24), "KEY_O != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_O 24
#endif
#if defined(KEY_P) || (defined(HAVE_DECL_KEY_P) && HAVE_DECL_KEY_P)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_P) == (25), "KEY_P != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_P 25
#endif
#if defined(KEY_LEFTBRACE) || (defined(HAVE_DECL_KEY_LEFTBRACE) && HAVE_DECL_KEY_LEFTBRACE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LEFTBRACE) == (26), "KEY_LEFTBRACE != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LEFTBRACE 26
#endif
#if defined(KEY_RIGHTBRACE) || (defined(HAVE_DECL_KEY_RIGHTBRACE) && HAVE_DECL_KEY_RIGHTBRACE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RIGHTBRACE) == (27), "KEY_RIGHTBRACE != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RIGHTBRACE 27
#endif
#if defined(KEY_ENTER) || (defined(HAVE_DECL_KEY_ENTER) && HAVE_DECL_KEY_ENTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ENTER) == (28), "KEY_ENTER != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ENTER 28
#endif
#if defined(KEY_LEFTCTRL) || (defined(HAVE_DECL_KEY_LEFTCTRL) && HAVE_DECL_KEY_LEFTCTRL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LEFTCTRL) == (29), "KEY_LEFTCTRL != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LEFTCTRL 29
#endif
#if defined(KEY_A) || (defined(HAVE_DECL_KEY_A) && HAVE_DECL_KEY_A)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_A) == (30), "KEY_A != 30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_A 30
#endif
#if defined(KEY_S) || (defined(HAVE_DECL_KEY_S) && HAVE_DECL_KEY_S)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_S) == (31), "KEY_S != 31");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_S 31
#endif
#if defined(KEY_D) || (defined(HAVE_DECL_KEY_D) && HAVE_DECL_KEY_D)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_D) == (32), "KEY_D != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_D 32
#endif
#if defined(KEY_F) || (defined(HAVE_DECL_KEY_F) && HAVE_DECL_KEY_F)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F) == (33), "KEY_F != 33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F 33
#endif
#if defined(KEY_G) || (defined(HAVE_DECL_KEY_G) && HAVE_DECL_KEY_G)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_G) == (34), "KEY_G != 34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_G 34
#endif
#if defined(KEY_H) || (defined(HAVE_DECL_KEY_H) && HAVE_DECL_KEY_H)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_H) == (35), "KEY_H != 35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_H 35
#endif
#if defined(KEY_J) || (defined(HAVE_DECL_KEY_J) && HAVE_DECL_KEY_J)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_J) == (36), "KEY_J != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_J 36
#endif
#if defined(KEY_K) || (defined(HAVE_DECL_KEY_K) && HAVE_DECL_KEY_K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_K) == (37), "KEY_K != 37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_K 37
#endif
#if defined(KEY_L) || (defined(HAVE_DECL_KEY_L) && HAVE_DECL_KEY_L)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_L) == (38), "KEY_L != 38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_L 38
#endif
#if defined(KEY_SEMICOLON) || (defined(HAVE_DECL_KEY_SEMICOLON) && HAVE_DECL_KEY_SEMICOLON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SEMICOLON) == (39), "KEY_SEMICOLON != 39");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SEMICOLON 39
#endif
#if defined(KEY_APOSTROPHE) || (defined(HAVE_DECL_KEY_APOSTROPHE) && HAVE_DECL_KEY_APOSTROPHE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_APOSTROPHE) == (40), "KEY_APOSTROPHE != 40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_APOSTROPHE 40
#endif
#if defined(KEY_GRAVE) || (defined(HAVE_DECL_KEY_GRAVE) && HAVE_DECL_KEY_GRAVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_GRAVE) == (41), "KEY_GRAVE != 41");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_GRAVE 41
#endif
#if defined(KEY_LEFTSHIFT) || (defined(HAVE_DECL_KEY_LEFTSHIFT) && HAVE_DECL_KEY_LEFTSHIFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LEFTSHIFT) == (42), "KEY_LEFTSHIFT != 42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LEFTSHIFT 42
#endif
#if defined(KEY_BACKSLASH) || (defined(HAVE_DECL_KEY_BACKSLASH) && HAVE_DECL_KEY_BACKSLASH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BACKSLASH) == (43), "KEY_BACKSLASH != 43");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BACKSLASH 43
#endif
#if defined(KEY_Z) || (defined(HAVE_DECL_KEY_Z) && HAVE_DECL_KEY_Z)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_Z) == (44), "KEY_Z != 44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_Z 44
#endif
#if defined(KEY_X) || (defined(HAVE_DECL_KEY_X) && HAVE_DECL_KEY_X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_X) == (45), "KEY_X != 45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_X 45
#endif
#if defined(KEY_C) || (defined(HAVE_DECL_KEY_C) && HAVE_DECL_KEY_C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_C) == (46), "KEY_C != 46");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_C 46
#endif
#if defined(KEY_V) || (defined(HAVE_DECL_KEY_V) && HAVE_DECL_KEY_V)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_V) == (47), "KEY_V != 47");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_V 47
#endif
#if defined(KEY_B) || (defined(HAVE_DECL_KEY_B) && HAVE_DECL_KEY_B)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_B) == (48), "KEY_B != 48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_B 48
#endif
#if defined(KEY_N) || (defined(HAVE_DECL_KEY_N) && HAVE_DECL_KEY_N)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_N) == (49), "KEY_N != 49");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_N 49
#endif
#if defined(KEY_M) || (defined(HAVE_DECL_KEY_M) && HAVE_DECL_KEY_M)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_M) == (50), "KEY_M != 50");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_M 50
#endif
#if defined(KEY_COMMA) || (defined(HAVE_DECL_KEY_COMMA) && HAVE_DECL_KEY_COMMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_COMMA) == (51), "KEY_COMMA != 51");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_COMMA 51
#endif
#if defined(KEY_DOT) || (defined(HAVE_DECL_KEY_DOT) && HAVE_DECL_KEY_DOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DOT) == (52), "KEY_DOT != 52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DOT 52
#endif
#if defined(KEY_SLASH) || (defined(HAVE_DECL_KEY_SLASH) && HAVE_DECL_KEY_SLASH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SLASH) == (53), "KEY_SLASH != 53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SLASH 53
#endif
#if defined(KEY_RIGHTSHIFT) || (defined(HAVE_DECL_KEY_RIGHTSHIFT) && HAVE_DECL_KEY_RIGHTSHIFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RIGHTSHIFT) == (54), "KEY_RIGHTSHIFT != 54");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RIGHTSHIFT 54
#endif
#if defined(KEY_KPASTERISK) || (defined(HAVE_DECL_KEY_KPASTERISK) && HAVE_DECL_KEY_KPASTERISK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPASTERISK) == (55), "KEY_KPASTERISK != 55");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPASTERISK 55
#endif
#if defined(KEY_LEFTALT) || (defined(HAVE_DECL_KEY_LEFTALT) && HAVE_DECL_KEY_LEFTALT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LEFTALT) == (56), "KEY_LEFTALT != 56");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LEFTALT 56
#endif
#if defined(KEY_SPACE) || (defined(HAVE_DECL_KEY_SPACE) && HAVE_DECL_KEY_SPACE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SPACE) == (57), "KEY_SPACE != 57");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SPACE 57
#endif
#if defined(KEY_CAPSLOCK) || (defined(HAVE_DECL_KEY_CAPSLOCK) && HAVE_DECL_KEY_CAPSLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CAPSLOCK) == (58), "KEY_CAPSLOCK != 58");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CAPSLOCK 58
#endif
#if defined(KEY_F1) || (defined(HAVE_DECL_KEY_F1) && HAVE_DECL_KEY_F1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F1) == (59), "KEY_F1 != 59");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F1 59
#endif
#if defined(KEY_F2) || (defined(HAVE_DECL_KEY_F2) && HAVE_DECL_KEY_F2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F2) == (60), "KEY_F2 != 60");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F2 60
#endif
#if defined(KEY_F3) || (defined(HAVE_DECL_KEY_F3) && HAVE_DECL_KEY_F3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F3) == (61), "KEY_F3 != 61");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F3 61
#endif
#if defined(KEY_F4) || (defined(HAVE_DECL_KEY_F4) && HAVE_DECL_KEY_F4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F4) == (62), "KEY_F4 != 62");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F4 62
#endif
#if defined(KEY_F5) || (defined(HAVE_DECL_KEY_F5) && HAVE_DECL_KEY_F5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F5) == (63), "KEY_F5 != 63");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F5 63
#endif
#if defined(KEY_F6) || (defined(HAVE_DECL_KEY_F6) && HAVE_DECL_KEY_F6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F6) == (64), "KEY_F6 != 64");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F6 64
#endif
#if defined(KEY_F7) || (defined(HAVE_DECL_KEY_F7) && HAVE_DECL_KEY_F7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F7) == (65), "KEY_F7 != 65");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F7 65
#endif
#if defined(KEY_F8) || (defined(HAVE_DECL_KEY_F8) && HAVE_DECL_KEY_F8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F8) == (66), "KEY_F8 != 66");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F8 66
#endif
#if defined(KEY_F9) || (defined(HAVE_DECL_KEY_F9) && HAVE_DECL_KEY_F9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F9) == (67), "KEY_F9 != 67");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F9 67
#endif
#if defined(KEY_F10) || (defined(HAVE_DECL_KEY_F10) && HAVE_DECL_KEY_F10)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F10) == (68), "KEY_F10 != 68");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F10 68
#endif
#if defined(KEY_NUMLOCK) || (defined(HAVE_DECL_KEY_NUMLOCK) && HAVE_DECL_KEY_NUMLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMLOCK) == (69), "KEY_NUMLOCK != 69");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMLOCK 69
#endif
#if defined(KEY_SCROLLLOCK) || (defined(HAVE_DECL_KEY_SCROLLLOCK) && HAVE_DECL_KEY_SCROLLLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SCROLLLOCK) == (70), "KEY_SCROLLLOCK != 70");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SCROLLLOCK 70
#endif
#if defined(KEY_KP7) || (defined(HAVE_DECL_KEY_KP7) && HAVE_DECL_KEY_KP7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KP7) == (71), "KEY_KP7 != 71");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KP7 71
#endif
#if defined(KEY_KP8) || (defined(HAVE_DECL_KEY_KP8) && HAVE_DECL_KEY_KP8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KP8) == (72), "KEY_KP8 != 72");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KP8 72
#endif
#if defined(KEY_KP9) || (defined(HAVE_DECL_KEY_KP9) && HAVE_DECL_KEY_KP9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KP9) == (73), "KEY_KP9 != 73");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KP9 73
#endif
#if defined(KEY_KPMINUS) || (defined(HAVE_DECL_KEY_KPMINUS) && HAVE_DECL_KEY_KPMINUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPMINUS) == (74), "KEY_KPMINUS != 74");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPMINUS 74
#endif
#if defined(KEY_KP4) || (defined(HAVE_DECL_KEY_KP4) && HAVE_DECL_KEY_KP4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KP4) == (75), "KEY_KP4 != 75");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KP4 75
#endif
#if defined(KEY_KP5) || (defined(HAVE_DECL_KEY_KP5) && HAVE_DECL_KEY_KP5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KP5) == (76), "KEY_KP5 != 76");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KP5 76
#endif
#if defined(KEY_KP6) || (defined(HAVE_DECL_KEY_KP6) && HAVE_DECL_KEY_KP6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KP6) == (77), "KEY_KP6 != 77");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KP6 77
#endif
#if defined(KEY_KPPLUS) || (defined(HAVE_DECL_KEY_KPPLUS) && HAVE_DECL_KEY_KPPLUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPPLUS) == (78), "KEY_KPPLUS != 78");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPPLUS 78
#endif
#if defined(KEY_KP1) || (defined(HAVE_DECL_KEY_KP1) && HAVE_DECL_KEY_KP1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KP1) == (79), "KEY_KP1 != 79");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KP1 79
#endif
#if defined(KEY_KP2) || (defined(HAVE_DECL_KEY_KP2) && HAVE_DECL_KEY_KP2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KP2) == (80), "KEY_KP2 != 80");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KP2 80
#endif
#if defined(KEY_KP3) || (defined(HAVE_DECL_KEY_KP3) && HAVE_DECL_KEY_KP3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KP3) == (81), "KEY_KP3 != 81");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KP3 81
#endif
#if defined(KEY_KP0) || (defined(HAVE_DECL_KEY_KP0) && HAVE_DECL_KEY_KP0)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KP0) == (82), "KEY_KP0 != 82");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KP0 82
#endif
#if defined(KEY_KPDOT) || (defined(HAVE_DECL_KEY_KPDOT) && HAVE_DECL_KEY_KPDOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPDOT) == (83), "KEY_KPDOT != 83");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPDOT 83
#endif
#if defined(KEY_ZENKAKUHANKAKU) || (defined(HAVE_DECL_KEY_ZENKAKUHANKAKU) && HAVE_DECL_KEY_ZENKAKUHANKAKU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ZENKAKUHANKAKU) == (85), "KEY_ZENKAKUHANKAKU != 85");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ZENKAKUHANKAKU 85
#endif
#if defined(KEY_102ND) || (defined(HAVE_DECL_KEY_102ND) && HAVE_DECL_KEY_102ND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_102ND) == (86), "KEY_102ND != 86");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_102ND 86
#endif
#if defined(KEY_F11) || (defined(HAVE_DECL_KEY_F11) && HAVE_DECL_KEY_F11)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F11) == (87), "KEY_F11 != 87");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F11 87
#endif
#if defined(KEY_F12) || (defined(HAVE_DECL_KEY_F12) && HAVE_DECL_KEY_F12)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F12) == (88), "KEY_F12 != 88");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F12 88
#endif
#if defined(KEY_RO) || (defined(HAVE_DECL_KEY_RO) && HAVE_DECL_KEY_RO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RO) == (89), "KEY_RO != 89");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RO 89
#endif
#if defined(KEY_KATAKANA) || (defined(HAVE_DECL_KEY_KATAKANA) && HAVE_DECL_KEY_KATAKANA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KATAKANA) == (90), "KEY_KATAKANA != 90");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KATAKANA 90
#endif
#if defined(KEY_HIRAGANA) || (defined(HAVE_DECL_KEY_HIRAGANA) && HAVE_DECL_KEY_HIRAGANA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_HIRAGANA) == (91), "KEY_HIRAGANA != 91");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_HIRAGANA 91
#endif
#if defined(KEY_HENKAN) || (defined(HAVE_DECL_KEY_HENKAN) && HAVE_DECL_KEY_HENKAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_HENKAN) == (92), "KEY_HENKAN != 92");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_HENKAN 92
#endif
#if defined(KEY_KATAKANAHIRAGANA) || (defined(HAVE_DECL_KEY_KATAKANAHIRAGANA) && HAVE_DECL_KEY_KATAKANAHIRAGANA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KATAKANAHIRAGANA) == (93), "KEY_KATAKANAHIRAGANA != 93");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KATAKANAHIRAGANA 93
#endif
#if defined(KEY_MUHENKAN) || (defined(HAVE_DECL_KEY_MUHENKAN) && HAVE_DECL_KEY_MUHENKAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MUHENKAN) == (94), "KEY_MUHENKAN != 94");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MUHENKAN 94
#endif
#if defined(KEY_KPJPCOMMA) || (defined(HAVE_DECL_KEY_KPJPCOMMA) && HAVE_DECL_KEY_KPJPCOMMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPJPCOMMA) == (95), "KEY_KPJPCOMMA != 95");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPJPCOMMA 95
#endif
#if defined(KEY_KPENTER) || (defined(HAVE_DECL_KEY_KPENTER) && HAVE_DECL_KEY_KPENTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPENTER) == (96), "KEY_KPENTER != 96");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPENTER 96
#endif
#if defined(KEY_RIGHTCTRL) || (defined(HAVE_DECL_KEY_RIGHTCTRL) && HAVE_DECL_KEY_RIGHTCTRL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RIGHTCTRL) == (97), "KEY_RIGHTCTRL != 97");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RIGHTCTRL 97
#endif
#if defined(KEY_KPSLASH) || (defined(HAVE_DECL_KEY_KPSLASH) && HAVE_DECL_KEY_KPSLASH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPSLASH) == (98), "KEY_KPSLASH != 98");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPSLASH 98
#endif
#if defined(KEY_SYSRQ) || (defined(HAVE_DECL_KEY_SYSRQ) && HAVE_DECL_KEY_SYSRQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SYSRQ) == (99), "KEY_SYSRQ != 99");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SYSRQ 99
#endif
#if defined(KEY_RIGHTALT) || (defined(HAVE_DECL_KEY_RIGHTALT) && HAVE_DECL_KEY_RIGHTALT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RIGHTALT) == (100), "KEY_RIGHTALT != 100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RIGHTALT 100
#endif
#if defined(KEY_LINEFEED) || (defined(HAVE_DECL_KEY_LINEFEED) && HAVE_DECL_KEY_LINEFEED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LINEFEED) == (101), "KEY_LINEFEED != 101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LINEFEED 101
#endif
#if defined(KEY_HOME) || (defined(HAVE_DECL_KEY_HOME) && HAVE_DECL_KEY_HOME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_HOME) == (102), "KEY_HOME != 102");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_HOME 102
#endif
#if defined(KEY_UP) || (defined(HAVE_DECL_KEY_UP) && HAVE_DECL_KEY_UP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_UP) == (103), "KEY_UP != 103");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_UP 103
#endif
#if defined(KEY_PAGEUP) || (defined(HAVE_DECL_KEY_PAGEUP) && HAVE_DECL_KEY_PAGEUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PAGEUP) == (104), "KEY_PAGEUP != 104");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PAGEUP 104
#endif
#if defined(KEY_LEFT) || (defined(HAVE_DECL_KEY_LEFT) && HAVE_DECL_KEY_LEFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LEFT) == (105), "KEY_LEFT != 105");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LEFT 105
#endif
#if defined(KEY_RIGHT) || (defined(HAVE_DECL_KEY_RIGHT) && HAVE_DECL_KEY_RIGHT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RIGHT) == (106), "KEY_RIGHT != 106");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RIGHT 106
#endif
#if defined(KEY_END) || (defined(HAVE_DECL_KEY_END) && HAVE_DECL_KEY_END)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_END) == (107), "KEY_END != 107");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_END 107
#endif
#if defined(KEY_DOWN) || (defined(HAVE_DECL_KEY_DOWN) && HAVE_DECL_KEY_DOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DOWN) == (108), "KEY_DOWN != 108");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DOWN 108
#endif
#if defined(KEY_PAGEDOWN) || (defined(HAVE_DECL_KEY_PAGEDOWN) && HAVE_DECL_KEY_PAGEDOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PAGEDOWN) == (109), "KEY_PAGEDOWN != 109");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PAGEDOWN 109
#endif
#if defined(KEY_INSERT) || (defined(HAVE_DECL_KEY_INSERT) && HAVE_DECL_KEY_INSERT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_INSERT) == (110), "KEY_INSERT != 110");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_INSERT 110
#endif
#if defined(KEY_DELETE) || (defined(HAVE_DECL_KEY_DELETE) && HAVE_DECL_KEY_DELETE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DELETE) == (111), "KEY_DELETE != 111");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DELETE 111
#endif
#if defined(KEY_MACRO) || (defined(HAVE_DECL_KEY_MACRO) && HAVE_DECL_KEY_MACRO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO) == (112), "KEY_MACRO != 112");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO 112
#endif
#if defined(KEY_MUTE) || (defined(HAVE_DECL_KEY_MUTE) && HAVE_DECL_KEY_MUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MUTE) == (113), "KEY_MUTE != 113");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MUTE 113
#endif
#if defined(KEY_VOLUMEDOWN) || (defined(HAVE_DECL_KEY_VOLUMEDOWN) && HAVE_DECL_KEY_VOLUMEDOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VOLUMEDOWN) == (114), "KEY_VOLUMEDOWN != 114");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VOLUMEDOWN 114
#endif
#if defined(KEY_VOLUMEUP) || (defined(HAVE_DECL_KEY_VOLUMEUP) && HAVE_DECL_KEY_VOLUMEUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VOLUMEUP) == (115), "KEY_VOLUMEUP != 115");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VOLUMEUP 115
#endif
#if defined(KEY_POWER) || (defined(HAVE_DECL_KEY_POWER) && HAVE_DECL_KEY_POWER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_POWER) == (116), "KEY_POWER != 116");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_POWER 116
#endif
#if defined(KEY_KPEQUAL) || (defined(HAVE_DECL_KEY_KPEQUAL) && HAVE_DECL_KEY_KPEQUAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPEQUAL) == (117), "KEY_KPEQUAL != 117");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPEQUAL 117
#endif
#if defined(KEY_KPPLUSMINUS) || (defined(HAVE_DECL_KEY_KPPLUSMINUS) && HAVE_DECL_KEY_KPPLUSMINUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPPLUSMINUS) == (118), "KEY_KPPLUSMINUS != 118");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPPLUSMINUS 118
#endif
#if defined(KEY_PAUSE) || (defined(HAVE_DECL_KEY_PAUSE) && HAVE_DECL_KEY_PAUSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PAUSE) == (119), "KEY_PAUSE != 119");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PAUSE 119
#endif
#if defined(KEY_SCALE) || (defined(HAVE_DECL_KEY_SCALE) && HAVE_DECL_KEY_SCALE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SCALE) == (120), "KEY_SCALE != 120");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SCALE 120
#endif
#if defined(KEY_KPCOMMA) || (defined(HAVE_DECL_KEY_KPCOMMA) && HAVE_DECL_KEY_KPCOMMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPCOMMA) == (121), "KEY_KPCOMMA != 121");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPCOMMA 121
#endif
#if defined(KEY_HANGEUL) || (defined(HAVE_DECL_KEY_HANGEUL) && HAVE_DECL_KEY_HANGEUL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_HANGEUL) == (122), "KEY_HANGEUL != 122");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_HANGEUL 122
#endif
#if defined(KEY_HANJA) || (defined(HAVE_DECL_KEY_HANJA) && HAVE_DECL_KEY_HANJA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_HANJA) == (123), "KEY_HANJA != 123");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_HANJA 123
#endif
#if defined(KEY_YEN) || (defined(HAVE_DECL_KEY_YEN) && HAVE_DECL_KEY_YEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_YEN) == (124), "KEY_YEN != 124");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_YEN 124
#endif
#if defined(KEY_LEFTMETA) || (defined(HAVE_DECL_KEY_LEFTMETA) && HAVE_DECL_KEY_LEFTMETA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LEFTMETA) == (125), "KEY_LEFTMETA != 125");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LEFTMETA 125
#endif
#if defined(KEY_RIGHTMETA) || (defined(HAVE_DECL_KEY_RIGHTMETA) && HAVE_DECL_KEY_RIGHTMETA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RIGHTMETA) == (126), "KEY_RIGHTMETA != 126");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RIGHTMETA 126
#endif
#if defined(KEY_COMPOSE) || (defined(HAVE_DECL_KEY_COMPOSE) && HAVE_DECL_KEY_COMPOSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_COMPOSE) == (127), "KEY_COMPOSE != 127");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_COMPOSE 127
#endif
#if defined(KEY_STOP) || (defined(HAVE_DECL_KEY_STOP) && HAVE_DECL_KEY_STOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_STOP) == (128), "KEY_STOP != 128");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_STOP 128
#endif
#if defined(KEY_AGAIN) || (defined(HAVE_DECL_KEY_AGAIN) && HAVE_DECL_KEY_AGAIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_AGAIN) == (129), "KEY_AGAIN != 129");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_AGAIN 129
#endif
#if defined(KEY_PROPS) || (defined(HAVE_DECL_KEY_PROPS) && HAVE_DECL_KEY_PROPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PROPS) == (130), "KEY_PROPS != 130");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PROPS 130
#endif
#if defined(KEY_UNDO) || (defined(HAVE_DECL_KEY_UNDO) && HAVE_DECL_KEY_UNDO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_UNDO) == (131), "KEY_UNDO != 131");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_UNDO 131
#endif
#if defined(KEY_FRONT) || (defined(HAVE_DECL_KEY_FRONT) && HAVE_DECL_KEY_FRONT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FRONT) == (132), "KEY_FRONT != 132");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FRONT 132
#endif
#if defined(KEY_COPY) || (defined(HAVE_DECL_KEY_COPY) && HAVE_DECL_KEY_COPY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_COPY) == (133), "KEY_COPY != 133");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_COPY 133
#endif
#if defined(KEY_OPEN) || (defined(HAVE_DECL_KEY_OPEN) && HAVE_DECL_KEY_OPEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_OPEN) == (134), "KEY_OPEN != 134");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_OPEN 134
#endif
#if defined(KEY_PASTE) || (defined(HAVE_DECL_KEY_PASTE) && HAVE_DECL_KEY_PASTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PASTE) == (135), "KEY_PASTE != 135");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PASTE 135
#endif
#if defined(KEY_FIND) || (defined(HAVE_DECL_KEY_FIND) && HAVE_DECL_KEY_FIND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FIND) == (136), "KEY_FIND != 136");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FIND 136
#endif
#if defined(KEY_CUT) || (defined(HAVE_DECL_KEY_CUT) && HAVE_DECL_KEY_CUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CUT) == (137), "KEY_CUT != 137");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CUT 137
#endif
#if defined(KEY_HELP) || (defined(HAVE_DECL_KEY_HELP) && HAVE_DECL_KEY_HELP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_HELP) == (138), "KEY_HELP != 138");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_HELP 138
#endif
#if defined(KEY_MENU) || (defined(HAVE_DECL_KEY_MENU) && HAVE_DECL_KEY_MENU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MENU) == (139), "KEY_MENU != 139");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MENU 139
#endif
#if defined(KEY_CALC) || (defined(HAVE_DECL_KEY_CALC) && HAVE_DECL_KEY_CALC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CALC) == (140), "KEY_CALC != 140");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CALC 140
#endif
#if defined(KEY_SETUP) || (defined(HAVE_DECL_KEY_SETUP) && HAVE_DECL_KEY_SETUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SETUP) == (141), "KEY_SETUP != 141");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SETUP 141
#endif
#if defined(KEY_SLEEP) || (defined(HAVE_DECL_KEY_SLEEP) && HAVE_DECL_KEY_SLEEP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SLEEP) == (142), "KEY_SLEEP != 142");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SLEEP 142
#endif
#if defined(KEY_WAKEUP) || (defined(HAVE_DECL_KEY_WAKEUP) && HAVE_DECL_KEY_WAKEUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_WAKEUP) == (143), "KEY_WAKEUP != 143");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_WAKEUP 143
#endif
#if defined(KEY_FILE) || (defined(HAVE_DECL_KEY_FILE) && HAVE_DECL_KEY_FILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FILE) == (144), "KEY_FILE != 144");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FILE 144
#endif
#if defined(KEY_SENDFILE) || (defined(HAVE_DECL_KEY_SENDFILE) && HAVE_DECL_KEY_SENDFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SENDFILE) == (145), "KEY_SENDFILE != 145");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SENDFILE 145
#endif
#if defined(KEY_DELETEFILE) || (defined(HAVE_DECL_KEY_DELETEFILE) && HAVE_DECL_KEY_DELETEFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DELETEFILE) == (146), "KEY_DELETEFILE != 146");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DELETEFILE 146
#endif
#if defined(KEY_XFER) || (defined(HAVE_DECL_KEY_XFER) && HAVE_DECL_KEY_XFER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_XFER) == (147), "KEY_XFER != 147");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_XFER 147
#endif
#if defined(KEY_PROG1) || (defined(HAVE_DECL_KEY_PROG1) && HAVE_DECL_KEY_PROG1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PROG1) == (148), "KEY_PROG1 != 148");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PROG1 148
#endif
#if defined(KEY_PROG2) || (defined(HAVE_DECL_KEY_PROG2) && HAVE_DECL_KEY_PROG2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PROG2) == (149), "KEY_PROG2 != 149");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PROG2 149
#endif
#if defined(KEY_WWW) || (defined(HAVE_DECL_KEY_WWW) && HAVE_DECL_KEY_WWW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_WWW) == (150), "KEY_WWW != 150");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_WWW 150
#endif
#if defined(KEY_MSDOS) || (defined(HAVE_DECL_KEY_MSDOS) && HAVE_DECL_KEY_MSDOS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MSDOS) == (151), "KEY_MSDOS != 151");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MSDOS 151
#endif
#if defined(KEY_COFFEE) || (defined(HAVE_DECL_KEY_COFFEE) && HAVE_DECL_KEY_COFFEE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_COFFEE) == (152), "KEY_COFFEE != 152");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_COFFEE 152
#endif
#if defined(KEY_ROTATE_DISPLAY) || (defined(HAVE_DECL_KEY_ROTATE_DISPLAY) && HAVE_DECL_KEY_ROTATE_DISPLAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ROTATE_DISPLAY) == (153), "KEY_ROTATE_DISPLAY != 153");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ROTATE_DISPLAY 153
#endif
#if defined(KEY_CYCLEWINDOWS) || (defined(HAVE_DECL_KEY_CYCLEWINDOWS) && HAVE_DECL_KEY_CYCLEWINDOWS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CYCLEWINDOWS) == (154), "KEY_CYCLEWINDOWS != 154");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CYCLEWINDOWS 154
#endif
#if defined(KEY_MAIL) || (defined(HAVE_DECL_KEY_MAIL) && HAVE_DECL_KEY_MAIL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MAIL) == (155), "KEY_MAIL != 155");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MAIL 155
#endif
#if defined(KEY_BOOKMARKS) || (defined(HAVE_DECL_KEY_BOOKMARKS) && HAVE_DECL_KEY_BOOKMARKS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BOOKMARKS) == (156), "KEY_BOOKMARKS != 156");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BOOKMARKS 156
#endif
#if defined(KEY_COMPUTER) || (defined(HAVE_DECL_KEY_COMPUTER) && HAVE_DECL_KEY_COMPUTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_COMPUTER) == (157), "KEY_COMPUTER != 157");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_COMPUTER 157
#endif
#if defined(KEY_BACK) || (defined(HAVE_DECL_KEY_BACK) && HAVE_DECL_KEY_BACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BACK) == (158), "KEY_BACK != 158");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BACK 158
#endif
#if defined(KEY_FORWARD) || (defined(HAVE_DECL_KEY_FORWARD) && HAVE_DECL_KEY_FORWARD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FORWARD) == (159), "KEY_FORWARD != 159");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FORWARD 159
#endif
#if defined(KEY_CLOSECD) || (defined(HAVE_DECL_KEY_CLOSECD) && HAVE_DECL_KEY_CLOSECD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CLOSECD) == (160), "KEY_CLOSECD != 160");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CLOSECD 160
#endif
#if defined(KEY_EJECTCD) || (defined(HAVE_DECL_KEY_EJECTCD) && HAVE_DECL_KEY_EJECTCD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_EJECTCD) == (161), "KEY_EJECTCD != 161");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_EJECTCD 161
#endif
#if defined(KEY_EJECTCLOSECD) || (defined(HAVE_DECL_KEY_EJECTCLOSECD) && HAVE_DECL_KEY_EJECTCLOSECD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_EJECTCLOSECD) == (162), "KEY_EJECTCLOSECD != 162");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_EJECTCLOSECD 162
#endif
#if defined(KEY_NEXTSONG) || (defined(HAVE_DECL_KEY_NEXTSONG) && HAVE_DECL_KEY_NEXTSONG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NEXTSONG) == (163), "KEY_NEXTSONG != 163");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NEXTSONG 163
#endif
#if defined(KEY_PLAYPAUSE) || (defined(HAVE_DECL_KEY_PLAYPAUSE) && HAVE_DECL_KEY_PLAYPAUSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PLAYPAUSE) == (164), "KEY_PLAYPAUSE != 164");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PLAYPAUSE 164
#endif
#if defined(KEY_PREVIOUSSONG) || (defined(HAVE_DECL_KEY_PREVIOUSSONG) && HAVE_DECL_KEY_PREVIOUSSONG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PREVIOUSSONG) == (165), "KEY_PREVIOUSSONG != 165");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PREVIOUSSONG 165
#endif
#if defined(KEY_STOPCD) || (defined(HAVE_DECL_KEY_STOPCD) && HAVE_DECL_KEY_STOPCD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_STOPCD) == (166), "KEY_STOPCD != 166");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_STOPCD 166
#endif
#if defined(KEY_RECORD) || (defined(HAVE_DECL_KEY_RECORD) && HAVE_DECL_KEY_RECORD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RECORD) == (167), "KEY_RECORD != 167");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RECORD 167
#endif
#if defined(KEY_REWIND) || (defined(HAVE_DECL_KEY_REWIND) && HAVE_DECL_KEY_REWIND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_REWIND) == (168), "KEY_REWIND != 168");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_REWIND 168
#endif
#if defined(KEY_PHONE) || (defined(HAVE_DECL_KEY_PHONE) && HAVE_DECL_KEY_PHONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PHONE) == (169), "KEY_PHONE != 169");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PHONE 169
#endif
#if defined(KEY_ISO) || (defined(HAVE_DECL_KEY_ISO) && HAVE_DECL_KEY_ISO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ISO) == (170), "KEY_ISO != 170");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ISO 170
#endif
#if defined(KEY_CONFIG) || (defined(HAVE_DECL_KEY_CONFIG) && HAVE_DECL_KEY_CONFIG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CONFIG) == (171), "KEY_CONFIG != 171");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CONFIG 171
#endif
#if defined(KEY_HOMEPAGE) || (defined(HAVE_DECL_KEY_HOMEPAGE) && HAVE_DECL_KEY_HOMEPAGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_HOMEPAGE) == (172), "KEY_HOMEPAGE != 172");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_HOMEPAGE 172
#endif
#if defined(KEY_REFRESH) || (defined(HAVE_DECL_KEY_REFRESH) && HAVE_DECL_KEY_REFRESH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_REFRESH) == (173), "KEY_REFRESH != 173");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_REFRESH 173
#endif
#if defined(KEY_EXIT) || (defined(HAVE_DECL_KEY_EXIT) && HAVE_DECL_KEY_EXIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_EXIT) == (174), "KEY_EXIT != 174");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_EXIT 174
#endif
#if defined(KEY_MOVE) || (defined(HAVE_DECL_KEY_MOVE) && HAVE_DECL_KEY_MOVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MOVE) == (175), "KEY_MOVE != 175");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MOVE 175
#endif
#if defined(KEY_EDIT) || (defined(HAVE_DECL_KEY_EDIT) && HAVE_DECL_KEY_EDIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_EDIT) == (176), "KEY_EDIT != 176");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_EDIT 176
#endif
#if defined(KEY_SCROLLUP) || (defined(HAVE_DECL_KEY_SCROLLUP) && HAVE_DECL_KEY_SCROLLUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SCROLLUP) == (177), "KEY_SCROLLUP != 177");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SCROLLUP 177
#endif
#if defined(KEY_SCROLLDOWN) || (defined(HAVE_DECL_KEY_SCROLLDOWN) && HAVE_DECL_KEY_SCROLLDOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SCROLLDOWN) == (178), "KEY_SCROLLDOWN != 178");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SCROLLDOWN 178
#endif
#if defined(KEY_KPLEFTPAREN) || (defined(HAVE_DECL_KEY_KPLEFTPAREN) && HAVE_DECL_KEY_KPLEFTPAREN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPLEFTPAREN) == (179), "KEY_KPLEFTPAREN != 179");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPLEFTPAREN 179
#endif
#if defined(KEY_KPRIGHTPAREN) || (defined(HAVE_DECL_KEY_KPRIGHTPAREN) && HAVE_DECL_KEY_KPRIGHTPAREN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KPRIGHTPAREN) == (180), "KEY_KPRIGHTPAREN != 180");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KPRIGHTPAREN 180
#endif
#if defined(KEY_NEW) || (defined(HAVE_DECL_KEY_NEW) && HAVE_DECL_KEY_NEW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NEW) == (181), "KEY_NEW != 181");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NEW 181
#endif
#if defined(KEY_REDO) || (defined(HAVE_DECL_KEY_REDO) && HAVE_DECL_KEY_REDO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_REDO) == (182), "KEY_REDO != 182");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_REDO 182
#endif
#if defined(KEY_F13) || (defined(HAVE_DECL_KEY_F13) && HAVE_DECL_KEY_F13)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F13) == (183), "KEY_F13 != 183");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F13 183
#endif
#if defined(KEY_F14) || (defined(HAVE_DECL_KEY_F14) && HAVE_DECL_KEY_F14)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F14) == (184), "KEY_F14 != 184");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F14 184
#endif
#if defined(KEY_F15) || (defined(HAVE_DECL_KEY_F15) && HAVE_DECL_KEY_F15)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F15) == (185), "KEY_F15 != 185");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F15 185
#endif
#if defined(KEY_F16) || (defined(HAVE_DECL_KEY_F16) && HAVE_DECL_KEY_F16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F16) == (186), "KEY_F16 != 186");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F16 186
#endif
#if defined(KEY_F17) || (defined(HAVE_DECL_KEY_F17) && HAVE_DECL_KEY_F17)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F17) == (187), "KEY_F17 != 187");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F17 187
#endif
#if defined(KEY_F18) || (defined(HAVE_DECL_KEY_F18) && HAVE_DECL_KEY_F18)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F18) == (188), "KEY_F18 != 188");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F18 188
#endif
#if defined(KEY_F19) || (defined(HAVE_DECL_KEY_F19) && HAVE_DECL_KEY_F19)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F19) == (189), "KEY_F19 != 189");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F19 189
#endif
#if defined(KEY_F20) || (defined(HAVE_DECL_KEY_F20) && HAVE_DECL_KEY_F20)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F20) == (190), "KEY_F20 != 190");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F20 190
#endif
#if defined(KEY_F21) || (defined(HAVE_DECL_KEY_F21) && HAVE_DECL_KEY_F21)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F21) == (191), "KEY_F21 != 191");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F21 191
#endif
#if defined(KEY_F22) || (defined(HAVE_DECL_KEY_F22) && HAVE_DECL_KEY_F22)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F22) == (192), "KEY_F22 != 192");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F22 192
#endif
#if defined(KEY_F23) || (defined(HAVE_DECL_KEY_F23) && HAVE_DECL_KEY_F23)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F23) == (193), "KEY_F23 != 193");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F23 193
#endif
#if defined(KEY_F24) || (defined(HAVE_DECL_KEY_F24) && HAVE_DECL_KEY_F24)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_F24) == (194), "KEY_F24 != 194");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_F24 194
#endif
#if defined(KEY_PLAYCD) || (defined(HAVE_DECL_KEY_PLAYCD) && HAVE_DECL_KEY_PLAYCD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PLAYCD) == (200), "KEY_PLAYCD != 200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PLAYCD 200
#endif
#if defined(KEY_PAUSECD) || (defined(HAVE_DECL_KEY_PAUSECD) && HAVE_DECL_KEY_PAUSECD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PAUSECD) == (201), "KEY_PAUSECD != 201");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PAUSECD 201
#endif
#if defined(KEY_PROG3) || (defined(HAVE_DECL_KEY_PROG3) && HAVE_DECL_KEY_PROG3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PROG3) == (202), "KEY_PROG3 != 202");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PROG3 202
#endif
#if defined(KEY_PROG4) || (defined(HAVE_DECL_KEY_PROG4) && HAVE_DECL_KEY_PROG4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PROG4) == (203), "KEY_PROG4 != 203");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PROG4 203
#endif
#if defined(KEY_DASHBOARD) || (defined(HAVE_DECL_KEY_DASHBOARD) && HAVE_DECL_KEY_DASHBOARD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DASHBOARD) == (204), "KEY_DASHBOARD != 204");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DASHBOARD 204
#endif
#if defined(KEY_SUSPEND) || (defined(HAVE_DECL_KEY_SUSPEND) && HAVE_DECL_KEY_SUSPEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SUSPEND) == (205), "KEY_SUSPEND != 205");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SUSPEND 205
#endif
#if defined(KEY_CLOSE) || (defined(HAVE_DECL_KEY_CLOSE) && HAVE_DECL_KEY_CLOSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CLOSE) == (206), "KEY_CLOSE != 206");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CLOSE 206
#endif
#if defined(KEY_PLAY) || (defined(HAVE_DECL_KEY_PLAY) && HAVE_DECL_KEY_PLAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PLAY) == (207), "KEY_PLAY != 207");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PLAY 207
#endif
#if defined(KEY_FASTFORWARD) || (defined(HAVE_DECL_KEY_FASTFORWARD) && HAVE_DECL_KEY_FASTFORWARD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FASTFORWARD) == (208), "KEY_FASTFORWARD != 208");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FASTFORWARD 208
#endif
#if defined(KEY_BASSBOOST) || (defined(HAVE_DECL_KEY_BASSBOOST) && HAVE_DECL_KEY_BASSBOOST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BASSBOOST) == (209), "KEY_BASSBOOST != 209");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BASSBOOST 209
#endif
#if defined(KEY_PRINT) || (defined(HAVE_DECL_KEY_PRINT) && HAVE_DECL_KEY_PRINT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PRINT) == (210), "KEY_PRINT != 210");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PRINT 210
#endif
#if defined(KEY_HP) || (defined(HAVE_DECL_KEY_HP) && HAVE_DECL_KEY_HP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_HP) == (211), "KEY_HP != 211");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_HP 211
#endif
#if defined(KEY_CAMERA) || (defined(HAVE_DECL_KEY_CAMERA) && HAVE_DECL_KEY_CAMERA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CAMERA) == (212), "KEY_CAMERA != 212");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CAMERA 212
#endif
#if defined(KEY_SOUND) || (defined(HAVE_DECL_KEY_SOUND) && HAVE_DECL_KEY_SOUND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SOUND) == (213), "KEY_SOUND != 213");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SOUND 213
#endif
#if defined(KEY_QUESTION) || (defined(HAVE_DECL_KEY_QUESTION) && HAVE_DECL_KEY_QUESTION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_QUESTION) == (214), "KEY_QUESTION != 214");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_QUESTION 214
#endif
#if defined(KEY_EMAIL) || (defined(HAVE_DECL_KEY_EMAIL) && HAVE_DECL_KEY_EMAIL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_EMAIL) == (215), "KEY_EMAIL != 215");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_EMAIL 215
#endif
#if defined(KEY_CHAT) || (defined(HAVE_DECL_KEY_CHAT) && HAVE_DECL_KEY_CHAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CHAT) == (216), "KEY_CHAT != 216");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CHAT 216
#endif
#if defined(KEY_SEARCH) || (defined(HAVE_DECL_KEY_SEARCH) && HAVE_DECL_KEY_SEARCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SEARCH) == (217), "KEY_SEARCH != 217");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SEARCH 217
#endif
#if defined(KEY_CONNECT) || (defined(HAVE_DECL_KEY_CONNECT) && HAVE_DECL_KEY_CONNECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CONNECT) == (218), "KEY_CONNECT != 218");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CONNECT 218
#endif
#if defined(KEY_FINANCE) || (defined(HAVE_DECL_KEY_FINANCE) && HAVE_DECL_KEY_FINANCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FINANCE) == (219), "KEY_FINANCE != 219");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FINANCE 219
#endif
#if defined(KEY_SPORT) || (defined(HAVE_DECL_KEY_SPORT) && HAVE_DECL_KEY_SPORT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SPORT) == (220), "KEY_SPORT != 220");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SPORT 220
#endif
#if defined(KEY_SHOP) || (defined(HAVE_DECL_KEY_SHOP) && HAVE_DECL_KEY_SHOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SHOP) == (221), "KEY_SHOP != 221");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SHOP 221
#endif
#if defined(KEY_ALTERASE) || (defined(HAVE_DECL_KEY_ALTERASE) && HAVE_DECL_KEY_ALTERASE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ALTERASE) == (222), "KEY_ALTERASE != 222");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ALTERASE 222
#endif
#if defined(KEY_CANCEL) || (defined(HAVE_DECL_KEY_CANCEL) && HAVE_DECL_KEY_CANCEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CANCEL) == (223), "KEY_CANCEL != 223");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CANCEL 223
#endif
#if defined(KEY_BRIGHTNESSDOWN) || (defined(HAVE_DECL_KEY_BRIGHTNESSDOWN) && HAVE_DECL_KEY_BRIGHTNESSDOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRIGHTNESSDOWN) == (224), "KEY_BRIGHTNESSDOWN != 224");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRIGHTNESSDOWN 224
#endif
#if defined(KEY_BRIGHTNESSUP) || (defined(HAVE_DECL_KEY_BRIGHTNESSUP) && HAVE_DECL_KEY_BRIGHTNESSUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRIGHTNESSUP) == (225), "KEY_BRIGHTNESSUP != 225");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRIGHTNESSUP 225
#endif
#if defined(KEY_MEDIA) || (defined(HAVE_DECL_KEY_MEDIA) && HAVE_DECL_KEY_MEDIA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MEDIA) == (226), "KEY_MEDIA != 226");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MEDIA 226
#endif
#if defined(KEY_SWITCHVIDEOMODE) || (defined(HAVE_DECL_KEY_SWITCHVIDEOMODE) && HAVE_DECL_KEY_SWITCHVIDEOMODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SWITCHVIDEOMODE) == (227), "KEY_SWITCHVIDEOMODE != 227");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SWITCHVIDEOMODE 227
#endif
#if defined(KEY_KBDILLUMTOGGLE) || (defined(HAVE_DECL_KEY_KBDILLUMTOGGLE) && HAVE_DECL_KEY_KBDILLUMTOGGLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBDILLUMTOGGLE) == (228), "KEY_KBDILLUMTOGGLE != 228");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBDILLUMTOGGLE 228
#endif
#if defined(KEY_KBDILLUMDOWN) || (defined(HAVE_DECL_KEY_KBDILLUMDOWN) && HAVE_DECL_KEY_KBDILLUMDOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBDILLUMDOWN) == (229), "KEY_KBDILLUMDOWN != 229");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBDILLUMDOWN 229
#endif
#if defined(KEY_KBDILLUMUP) || (defined(HAVE_DECL_KEY_KBDILLUMUP) && HAVE_DECL_KEY_KBDILLUMUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBDILLUMUP) == (230), "KEY_KBDILLUMUP != 230");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBDILLUMUP 230
#endif
#if defined(KEY_SEND) || (defined(HAVE_DECL_KEY_SEND) && HAVE_DECL_KEY_SEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SEND) == (231), "KEY_SEND != 231");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SEND 231
#endif
#if defined(KEY_REPLY) || (defined(HAVE_DECL_KEY_REPLY) && HAVE_DECL_KEY_REPLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_REPLY) == (232), "KEY_REPLY != 232");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_REPLY 232
#endif
#if defined(KEY_FORWARDMAIL) || (defined(HAVE_DECL_KEY_FORWARDMAIL) && HAVE_DECL_KEY_FORWARDMAIL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FORWARDMAIL) == (233), "KEY_FORWARDMAIL != 233");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FORWARDMAIL 233
#endif
#if defined(KEY_SAVE) || (defined(HAVE_DECL_KEY_SAVE) && HAVE_DECL_KEY_SAVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SAVE) == (234), "KEY_SAVE != 234");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SAVE 234
#endif
#if defined(KEY_DOCUMENTS) || (defined(HAVE_DECL_KEY_DOCUMENTS) && HAVE_DECL_KEY_DOCUMENTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DOCUMENTS) == (235), "KEY_DOCUMENTS != 235");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DOCUMENTS 235
#endif
#if defined(KEY_BATTERY) || (defined(HAVE_DECL_KEY_BATTERY) && HAVE_DECL_KEY_BATTERY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BATTERY) == (236), "KEY_BATTERY != 236");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BATTERY 236
#endif
#if defined(KEY_BLUETOOTH) || (defined(HAVE_DECL_KEY_BLUETOOTH) && HAVE_DECL_KEY_BLUETOOTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BLUETOOTH) == (237), "KEY_BLUETOOTH != 237");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BLUETOOTH 237
#endif
#if defined(KEY_WLAN) || (defined(HAVE_DECL_KEY_WLAN) && HAVE_DECL_KEY_WLAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_WLAN) == (238), "KEY_WLAN != 238");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_WLAN 238
#endif
#if defined(KEY_UWB) || (defined(HAVE_DECL_KEY_UWB) && HAVE_DECL_KEY_UWB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_UWB) == (239), "KEY_UWB != 239");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_UWB 239
#endif
#if defined(KEY_UNKNOWN) || (defined(HAVE_DECL_KEY_UNKNOWN) && HAVE_DECL_KEY_UNKNOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_UNKNOWN) == (240), "KEY_UNKNOWN != 240");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_UNKNOWN 240
#endif
#if defined(KEY_VIDEO_NEXT) || (defined(HAVE_DECL_KEY_VIDEO_NEXT) && HAVE_DECL_KEY_VIDEO_NEXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VIDEO_NEXT) == (241), "KEY_VIDEO_NEXT != 241");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VIDEO_NEXT 241
#endif
#if defined(KEY_VIDEO_PREV) || (defined(HAVE_DECL_KEY_VIDEO_PREV) && HAVE_DECL_KEY_VIDEO_PREV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VIDEO_PREV) == (242), "KEY_VIDEO_PREV != 242");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VIDEO_PREV 242
#endif
#if defined(KEY_BRIGHTNESS_CYCLE) || (defined(HAVE_DECL_KEY_BRIGHTNESS_CYCLE) && HAVE_DECL_KEY_BRIGHTNESS_CYCLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRIGHTNESS_CYCLE) == (243), "KEY_BRIGHTNESS_CYCLE != 243");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRIGHTNESS_CYCLE 243
#endif
#if defined(KEY_BRIGHTNESS_AUTO) || (defined(HAVE_DECL_KEY_BRIGHTNESS_AUTO) && HAVE_DECL_KEY_BRIGHTNESS_AUTO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRIGHTNESS_AUTO) == (244), "KEY_BRIGHTNESS_AUTO != 244");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRIGHTNESS_AUTO 244
#endif
#if defined(KEY_DISPLAY_OFF) || (defined(HAVE_DECL_KEY_DISPLAY_OFF) && HAVE_DECL_KEY_DISPLAY_OFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DISPLAY_OFF) == (245), "KEY_DISPLAY_OFF != 245");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DISPLAY_OFF 245
#endif
#if defined(KEY_WWAN) || (defined(HAVE_DECL_KEY_WWAN) && HAVE_DECL_KEY_WWAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_WWAN) == (246), "KEY_WWAN != 246");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_WWAN 246
#endif
#ifndef STRACE_WORKAROUND_FOR_KEY_RFKILL
# define STRACE_WORKAROUND_FOR_KEY_RFKILL
# undef KEY_RFKILL
#endif
#if defined(KEY_RFKILL) || (defined(HAVE_DECL_KEY_RFKILL) && HAVE_DECL_KEY_RFKILL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RFKILL) == (247), "KEY_RFKILL != 247");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RFKILL 247
#endif
#if defined(KEY_MICMUTE) || (defined(HAVE_DECL_KEY_MICMUTE) && HAVE_DECL_KEY_MICMUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MICMUTE) == (248), "KEY_MICMUTE != 248");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MICMUTE 248
#endif
#if defined(BTN_0) || (defined(HAVE_DECL_BTN_0) && HAVE_DECL_BTN_0)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_0) == (0x100), "BTN_0 != 0x100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_0 0x100
#endif
#if defined(BTN_1) || (defined(HAVE_DECL_BTN_1) && HAVE_DECL_BTN_1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_1) == (0x101), "BTN_1 != 0x101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_1 0x101
#endif
#if defined(BTN_2) || (defined(HAVE_DECL_BTN_2) && HAVE_DECL_BTN_2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_2) == (0x102), "BTN_2 != 0x102");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_2 0x102
#endif
#if defined(BTN_3) || (defined(HAVE_DECL_BTN_3) && HAVE_DECL_BTN_3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_3) == (0x103), "BTN_3 != 0x103");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_3 0x103
#endif
#if defined(BTN_4) || (defined(HAVE_DECL_BTN_4) && HAVE_DECL_BTN_4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_4) == (0x104), "BTN_4 != 0x104");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_4 0x104
#endif
#if defined(BTN_5) || (defined(HAVE_DECL_BTN_5) && HAVE_DECL_BTN_5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_5) == (0x105), "BTN_5 != 0x105");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_5 0x105
#endif
#if defined(BTN_6) || (defined(HAVE_DECL_BTN_6) && HAVE_DECL_BTN_6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_6) == (0x106), "BTN_6 != 0x106");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_6 0x106
#endif
#if defined(BTN_7) || (defined(HAVE_DECL_BTN_7) && HAVE_DECL_BTN_7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_7) == (0x107), "BTN_7 != 0x107");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_7 0x107
#endif
#if defined(BTN_8) || (defined(HAVE_DECL_BTN_8) && HAVE_DECL_BTN_8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_8) == (0x108), "BTN_8 != 0x108");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_8 0x108
#endif
#if defined(BTN_9) || (defined(HAVE_DECL_BTN_9) && HAVE_DECL_BTN_9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_9) == (0x109), "BTN_9 != 0x109");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_9 0x109
#endif
#if defined(BTN_LEFT) || (defined(HAVE_DECL_BTN_LEFT) && HAVE_DECL_BTN_LEFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_LEFT) == (0x110), "BTN_LEFT != 0x110");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_LEFT 0x110
#endif
#if defined(BTN_RIGHT) || (defined(HAVE_DECL_BTN_RIGHT) && HAVE_DECL_BTN_RIGHT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_RIGHT) == (0x111), "BTN_RIGHT != 0x111");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_RIGHT 0x111
#endif
#if defined(BTN_MIDDLE) || (defined(HAVE_DECL_BTN_MIDDLE) && HAVE_DECL_BTN_MIDDLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_MIDDLE) == (0x112), "BTN_MIDDLE != 0x112");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_MIDDLE 0x112
#endif
#if defined(BTN_SIDE) || (defined(HAVE_DECL_BTN_SIDE) && HAVE_DECL_BTN_SIDE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_SIDE) == (0x113), "BTN_SIDE != 0x113");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_SIDE 0x113
#endif
#if defined(BTN_EXTRA) || (defined(HAVE_DECL_BTN_EXTRA) && HAVE_DECL_BTN_EXTRA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_EXTRA) == (0x114), "BTN_EXTRA != 0x114");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_EXTRA 0x114
#endif
#if defined(BTN_FORWARD) || (defined(HAVE_DECL_BTN_FORWARD) && HAVE_DECL_BTN_FORWARD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_FORWARD) == (0x115), "BTN_FORWARD != 0x115");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_FORWARD 0x115
#endif
#if defined(BTN_BACK) || (defined(HAVE_DECL_BTN_BACK) && HAVE_DECL_BTN_BACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_BACK) == (0x116), "BTN_BACK != 0x116");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_BACK 0x116
#endif
#if defined(BTN_TASK) || (defined(HAVE_DECL_BTN_TASK) && HAVE_DECL_BTN_TASK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TASK) == (0x117), "BTN_TASK != 0x117");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TASK 0x117
#endif
#if defined(BTN_TRIGGER) || (defined(HAVE_DECL_BTN_TRIGGER) && HAVE_DECL_BTN_TRIGGER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER) == (0x120), "BTN_TRIGGER != 0x120");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER 0x120
#endif
#if defined(BTN_THUMB) || (defined(HAVE_DECL_BTN_THUMB) && HAVE_DECL_BTN_THUMB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_THUMB) == (0x121), "BTN_THUMB != 0x121");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_THUMB 0x121
#endif
#if defined(BTN_THUMB2) || (defined(HAVE_DECL_BTN_THUMB2) && HAVE_DECL_BTN_THUMB2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_THUMB2) == (0x122), "BTN_THUMB2 != 0x122");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_THUMB2 0x122
#endif
#if defined(BTN_TOP) || (defined(HAVE_DECL_BTN_TOP) && HAVE_DECL_BTN_TOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOP) == (0x123), "BTN_TOP != 0x123");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOP 0x123
#endif
#if defined(BTN_TOP2) || (defined(HAVE_DECL_BTN_TOP2) && HAVE_DECL_BTN_TOP2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOP2) == (0x124), "BTN_TOP2 != 0x124");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOP2 0x124
#endif
#if defined(BTN_PINKIE) || (defined(HAVE_DECL_BTN_PINKIE) && HAVE_DECL_BTN_PINKIE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_PINKIE) == (0x125), "BTN_PINKIE != 0x125");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_PINKIE 0x125
#endif
#if defined(BTN_BASE) || (defined(HAVE_DECL_BTN_BASE) && HAVE_DECL_BTN_BASE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_BASE) == (0x126), "BTN_BASE != 0x126");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_BASE 0x126
#endif
#if defined(BTN_BASE2) || (defined(HAVE_DECL_BTN_BASE2) && HAVE_DECL_BTN_BASE2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_BASE2) == (0x127), "BTN_BASE2 != 0x127");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_BASE2 0x127
#endif
#if defined(BTN_BASE3) || (defined(HAVE_DECL_BTN_BASE3) && HAVE_DECL_BTN_BASE3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_BASE3) == (0x128), "BTN_BASE3 != 0x128");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_BASE3 0x128
#endif
#if defined(BTN_BASE4) || (defined(HAVE_DECL_BTN_BASE4) && HAVE_DECL_BTN_BASE4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_BASE4) == (0x129), "BTN_BASE4 != 0x129");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_BASE4 0x129
#endif
#if defined(BTN_BASE5) || (defined(HAVE_DECL_BTN_BASE5) && HAVE_DECL_BTN_BASE5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_BASE5) == (0x12a), "BTN_BASE5 != 0x12a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_BASE5 0x12a
#endif
#if defined(BTN_BASE6) || (defined(HAVE_DECL_BTN_BASE6) && HAVE_DECL_BTN_BASE6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_BASE6) == (0x12b), "BTN_BASE6 != 0x12b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_BASE6 0x12b
#endif
#if defined(BTN_DEAD) || (defined(HAVE_DECL_BTN_DEAD) && HAVE_DECL_BTN_DEAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_DEAD) == (0x12f), "BTN_DEAD != 0x12f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_DEAD 0x12f
#endif
#if defined(BTN_SOUTH) || (defined(HAVE_DECL_BTN_SOUTH) && HAVE_DECL_BTN_SOUTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_SOUTH) == (0x130), "BTN_SOUTH != 0x130");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_SOUTH 0x130
#endif
#if defined(BTN_EAST) || (defined(HAVE_DECL_BTN_EAST) && HAVE_DECL_BTN_EAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_EAST) == (0x131), "BTN_EAST != 0x131");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_EAST 0x131
#endif
#if defined(BTN_C) || (defined(HAVE_DECL_BTN_C) && HAVE_DECL_BTN_C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_C) == (0x132), "BTN_C != 0x132");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_C 0x132
#endif
#if defined(BTN_NORTH) || (defined(HAVE_DECL_BTN_NORTH) && HAVE_DECL_BTN_NORTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_NORTH) == (0x133), "BTN_NORTH != 0x133");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_NORTH 0x133
#endif
#if defined(BTN_WEST) || (defined(HAVE_DECL_BTN_WEST) && HAVE_DECL_BTN_WEST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_WEST) == (0x134), "BTN_WEST != 0x134");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_WEST 0x134
#endif
#if defined(BTN_Z) || (defined(HAVE_DECL_BTN_Z) && HAVE_DECL_BTN_Z)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_Z) == (0x135), "BTN_Z != 0x135");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_Z 0x135
#endif
#if defined(BTN_TL) || (defined(HAVE_DECL_BTN_TL) && HAVE_DECL_BTN_TL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TL) == (0x136), "BTN_TL != 0x136");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TL 0x136
#endif
#if defined(BTN_TR) || (defined(HAVE_DECL_BTN_TR) && HAVE_DECL_BTN_TR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TR) == (0x137), "BTN_TR != 0x137");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TR 0x137
#endif
#if defined(BTN_TL2) || (defined(HAVE_DECL_BTN_TL2) && HAVE_DECL_BTN_TL2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TL2) == (0x138), "BTN_TL2 != 0x138");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TL2 0x138
#endif
#if defined(BTN_TR2) || (defined(HAVE_DECL_BTN_TR2) && HAVE_DECL_BTN_TR2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TR2) == (0x139), "BTN_TR2 != 0x139");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TR2 0x139
#endif
#if defined(BTN_SELECT) || (defined(HAVE_DECL_BTN_SELECT) && HAVE_DECL_BTN_SELECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_SELECT) == (0x13a), "BTN_SELECT != 0x13a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_SELECT 0x13a
#endif
#if defined(BTN_START) || (defined(HAVE_DECL_BTN_START) && HAVE_DECL_BTN_START)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_START) == (0x13b), "BTN_START != 0x13b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_START 0x13b
#endif
#if defined(BTN_MODE) || (defined(HAVE_DECL_BTN_MODE) && HAVE_DECL_BTN_MODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_MODE) == (0x13c), "BTN_MODE != 0x13c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_MODE 0x13c
#endif
#if defined(BTN_THUMBL) || (defined(HAVE_DECL_BTN_THUMBL) && HAVE_DECL_BTN_THUMBL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_THUMBL) == (0x13d), "BTN_THUMBL != 0x13d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_THUMBL 0x13d
#endif
#if defined(BTN_THUMBR) || (defined(HAVE_DECL_BTN_THUMBR) && HAVE_DECL_BTN_THUMBR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_THUMBR) == (0x13e), "BTN_THUMBR != 0x13e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_THUMBR 0x13e
#endif
#if defined(BTN_TOOL_PEN) || (defined(HAVE_DECL_BTN_TOOL_PEN) && HAVE_DECL_BTN_TOOL_PEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_PEN) == (0x140), "BTN_TOOL_PEN != 0x140");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_PEN 0x140
#endif
#if defined(BTN_TOOL_RUBBER) || (defined(HAVE_DECL_BTN_TOOL_RUBBER) && HAVE_DECL_BTN_TOOL_RUBBER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_RUBBER) == (0x141), "BTN_TOOL_RUBBER != 0x141");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_RUBBER 0x141
#endif
#if defined(BTN_TOOL_BRUSH) || (defined(HAVE_DECL_BTN_TOOL_BRUSH) && HAVE_DECL_BTN_TOOL_BRUSH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_BRUSH) == (0x142), "BTN_TOOL_BRUSH != 0x142");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_BRUSH 0x142
#endif
#if defined(BTN_TOOL_PENCIL) || (defined(HAVE_DECL_BTN_TOOL_PENCIL) && HAVE_DECL_BTN_TOOL_PENCIL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_PENCIL) == (0x143), "BTN_TOOL_PENCIL != 0x143");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_PENCIL 0x143
#endif
#if defined(BTN_TOOL_AIRBRUSH) || (defined(HAVE_DECL_BTN_TOOL_AIRBRUSH) && HAVE_DECL_BTN_TOOL_AIRBRUSH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_AIRBRUSH) == (0x144), "BTN_TOOL_AIRBRUSH != 0x144");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_AIRBRUSH 0x144
#endif
#if defined(BTN_TOOL_FINGER) || (defined(HAVE_DECL_BTN_TOOL_FINGER) && HAVE_DECL_BTN_TOOL_FINGER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_FINGER) == (0x145), "BTN_TOOL_FINGER != 0x145");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_FINGER 0x145
#endif
#if defined(BTN_TOOL_MOUSE) || (defined(HAVE_DECL_BTN_TOOL_MOUSE) && HAVE_DECL_BTN_TOOL_MOUSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_MOUSE) == (0x146), "BTN_TOOL_MOUSE != 0x146");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_MOUSE 0x146
#endif
#if defined(BTN_TOOL_LENS) || (defined(HAVE_DECL_BTN_TOOL_LENS) && HAVE_DECL_BTN_TOOL_LENS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_LENS) == (0x147), "BTN_TOOL_LENS != 0x147");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_LENS 0x147
#endif
#if defined(BTN_TOOL_QUINTTAP) || (defined(HAVE_DECL_BTN_TOOL_QUINTTAP) && HAVE_DECL_BTN_TOOL_QUINTTAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_QUINTTAP) == (0x148), "BTN_TOOL_QUINTTAP != 0x148");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_QUINTTAP 0x148
#endif
#if defined(BTN_STYLUS3) || (defined(HAVE_DECL_BTN_STYLUS3) && HAVE_DECL_BTN_STYLUS3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_STYLUS3) == (0x149), "BTN_STYLUS3 != 0x149");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_STYLUS3 0x149
#endif
#if defined(BTN_TOUCH) || (defined(HAVE_DECL_BTN_TOUCH) && HAVE_DECL_BTN_TOUCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOUCH) == (0x14a), "BTN_TOUCH != 0x14a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOUCH 0x14a
#endif
#if defined(BTN_STYLUS) || (defined(HAVE_DECL_BTN_STYLUS) && HAVE_DECL_BTN_STYLUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_STYLUS) == (0x14b), "BTN_STYLUS != 0x14b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_STYLUS 0x14b
#endif
#if defined(BTN_STYLUS2) || (defined(HAVE_DECL_BTN_STYLUS2) && HAVE_DECL_BTN_STYLUS2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_STYLUS2) == (0x14c), "BTN_STYLUS2 != 0x14c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_STYLUS2 0x14c
#endif
#if defined(BTN_TOOL_DOUBLETAP) || (defined(HAVE_DECL_BTN_TOOL_DOUBLETAP) && HAVE_DECL_BTN_TOOL_DOUBLETAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_DOUBLETAP) == (0x14d), "BTN_TOOL_DOUBLETAP != 0x14d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_DOUBLETAP 0x14d
#endif
#if defined(BTN_TOOL_TRIPLETAP) || (defined(HAVE_DECL_BTN_TOOL_TRIPLETAP) && HAVE_DECL_BTN_TOOL_TRIPLETAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_TRIPLETAP) == (0x14e), "BTN_TOOL_TRIPLETAP != 0x14e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_TRIPLETAP 0x14e
#endif
#if defined(BTN_TOOL_QUADTAP) || (defined(HAVE_DECL_BTN_TOOL_QUADTAP) && HAVE_DECL_BTN_TOOL_QUADTAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TOOL_QUADTAP) == (0x14f), "BTN_TOOL_QUADTAP != 0x14f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TOOL_QUADTAP 0x14f
#endif
#if defined(BTN_GEAR_DOWN) || (defined(HAVE_DECL_BTN_GEAR_DOWN) && HAVE_DECL_BTN_GEAR_DOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_GEAR_DOWN) == (0x150), "BTN_GEAR_DOWN != 0x150");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_GEAR_DOWN 0x150
#endif
#if defined(BTN_GEAR_UP) || (defined(HAVE_DECL_BTN_GEAR_UP) && HAVE_DECL_BTN_GEAR_UP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_GEAR_UP) == (0x151), "BTN_GEAR_UP != 0x151");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_GEAR_UP 0x151
#endif
#if defined(KEY_OK) || (defined(HAVE_DECL_KEY_OK) && HAVE_DECL_KEY_OK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_OK) == (0x160), "KEY_OK != 0x160");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_OK 0x160
#endif
#if defined(KEY_SELECT) || (defined(HAVE_DECL_KEY_SELECT) && HAVE_DECL_KEY_SELECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SELECT) == (0x161), "KEY_SELECT != 0x161");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SELECT 0x161
#endif
#if defined(KEY_GOTO) || (defined(HAVE_DECL_KEY_GOTO) && HAVE_DECL_KEY_GOTO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_GOTO) == (0x162), "KEY_GOTO != 0x162");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_GOTO 0x162
#endif
#if defined(KEY_CLEAR) || (defined(HAVE_DECL_KEY_CLEAR) && HAVE_DECL_KEY_CLEAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CLEAR) == (0x163), "KEY_CLEAR != 0x163");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CLEAR 0x163
#endif
#if defined(KEY_POWER2) || (defined(HAVE_DECL_KEY_POWER2) && HAVE_DECL_KEY_POWER2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_POWER2) == (0x164), "KEY_POWER2 != 0x164");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_POWER2 0x164
#endif
#if defined(KEY_OPTION) || (defined(HAVE_DECL_KEY_OPTION) && HAVE_DECL_KEY_OPTION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_OPTION) == (0x165), "KEY_OPTION != 0x165");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_OPTION 0x165
#endif
#if defined(KEY_INFO) || (defined(HAVE_DECL_KEY_INFO) && HAVE_DECL_KEY_INFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_INFO) == (0x166), "KEY_INFO != 0x166");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_INFO 0x166
#endif
#if defined(KEY_TIME) || (defined(HAVE_DECL_KEY_TIME) && HAVE_DECL_KEY_TIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TIME) == (0x167), "KEY_TIME != 0x167");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TIME 0x167
#endif
#if defined(KEY_VENDOR) || (defined(HAVE_DECL_KEY_VENDOR) && HAVE_DECL_KEY_VENDOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VENDOR) == (0x168), "KEY_VENDOR != 0x168");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VENDOR 0x168
#endif
#if defined(KEY_ARCHIVE) || (defined(HAVE_DECL_KEY_ARCHIVE) && HAVE_DECL_KEY_ARCHIVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ARCHIVE) == (0x169), "KEY_ARCHIVE != 0x169");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ARCHIVE 0x169
#endif
#if defined(KEY_PROGRAM) || (defined(HAVE_DECL_KEY_PROGRAM) && HAVE_DECL_KEY_PROGRAM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PROGRAM) == (0x16a), "KEY_PROGRAM != 0x16a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PROGRAM 0x16a
#endif
#if defined(KEY_CHANNEL) || (defined(HAVE_DECL_KEY_CHANNEL) && HAVE_DECL_KEY_CHANNEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CHANNEL) == (0x16b), "KEY_CHANNEL != 0x16b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CHANNEL 0x16b
#endif
#if defined(KEY_FAVORITES) || (defined(HAVE_DECL_KEY_FAVORITES) && HAVE_DECL_KEY_FAVORITES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FAVORITES) == (0x16c), "KEY_FAVORITES != 0x16c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FAVORITES 0x16c
#endif
#if defined(KEY_EPG) || (defined(HAVE_DECL_KEY_EPG) && HAVE_DECL_KEY_EPG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_EPG) == (0x16d), "KEY_EPG != 0x16d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_EPG 0x16d
#endif
#if defined(KEY_PVR) || (defined(HAVE_DECL_KEY_PVR) && HAVE_DECL_KEY_PVR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PVR) == (0x16e), "KEY_PVR != 0x16e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PVR 0x16e
#endif
#if defined(KEY_MHP) || (defined(HAVE_DECL_KEY_MHP) && HAVE_DECL_KEY_MHP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MHP) == (0x16f), "KEY_MHP != 0x16f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MHP 0x16f
#endif
#if defined(KEY_LANGUAGE) || (defined(HAVE_DECL_KEY_LANGUAGE) && HAVE_DECL_KEY_LANGUAGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LANGUAGE) == (0x170), "KEY_LANGUAGE != 0x170");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LANGUAGE 0x170
#endif
#if defined(KEY_TITLE) || (defined(HAVE_DECL_KEY_TITLE) && HAVE_DECL_KEY_TITLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TITLE) == (0x171), "KEY_TITLE != 0x171");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TITLE 0x171
#endif
#if defined(KEY_SUBTITLE) || (defined(HAVE_DECL_KEY_SUBTITLE) && HAVE_DECL_KEY_SUBTITLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SUBTITLE) == (0x172), "KEY_SUBTITLE != 0x172");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SUBTITLE 0x172
#endif
#if defined(KEY_ANGLE) || (defined(HAVE_DECL_KEY_ANGLE) && HAVE_DECL_KEY_ANGLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ANGLE) == (0x173), "KEY_ANGLE != 0x173");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ANGLE 0x173
#endif
#if defined(KEY_ZOOM) || (defined(HAVE_DECL_KEY_ZOOM) && HAVE_DECL_KEY_ZOOM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ZOOM) == (0x174), "KEY_ZOOM != 0x174");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ZOOM 0x174
#endif
#if defined(KEY_MODE) || (defined(HAVE_DECL_KEY_MODE) && HAVE_DECL_KEY_MODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MODE) == (0x175), "KEY_MODE != 0x175");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MODE 0x175
#endif
#if defined(KEY_KEYBOARD) || (defined(HAVE_DECL_KEY_KEYBOARD) && HAVE_DECL_KEY_KEYBOARD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KEYBOARD) == (0x176), "KEY_KEYBOARD != 0x176");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KEYBOARD 0x176
#endif
#if defined(KEY_SCREEN) || (defined(HAVE_DECL_KEY_SCREEN) && HAVE_DECL_KEY_SCREEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SCREEN) == (0x177), "KEY_SCREEN != 0x177");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SCREEN 0x177
#endif
#if defined(KEY_PC) || (defined(HAVE_DECL_KEY_PC) && HAVE_DECL_KEY_PC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PC) == (0x178), "KEY_PC != 0x178");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PC 0x178
#endif
#if defined(KEY_TV) || (defined(HAVE_DECL_KEY_TV) && HAVE_DECL_KEY_TV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TV) == (0x179), "KEY_TV != 0x179");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TV 0x179
#endif
#if defined(KEY_TV2) || (defined(HAVE_DECL_KEY_TV2) && HAVE_DECL_KEY_TV2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TV2) == (0x17a), "KEY_TV2 != 0x17a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TV2 0x17a
#endif
#if defined(KEY_VCR) || (defined(HAVE_DECL_KEY_VCR) && HAVE_DECL_KEY_VCR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VCR) == (0x17b), "KEY_VCR != 0x17b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VCR 0x17b
#endif
#if defined(KEY_VCR2) || (defined(HAVE_DECL_KEY_VCR2) && HAVE_DECL_KEY_VCR2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VCR2) == (0x17c), "KEY_VCR2 != 0x17c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VCR2 0x17c
#endif
#if defined(KEY_SAT) || (defined(HAVE_DECL_KEY_SAT) && HAVE_DECL_KEY_SAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SAT) == (0x17d), "KEY_SAT != 0x17d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SAT 0x17d
#endif
#if defined(KEY_SAT2) || (defined(HAVE_DECL_KEY_SAT2) && HAVE_DECL_KEY_SAT2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SAT2) == (0x17e), "KEY_SAT2 != 0x17e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SAT2 0x17e
#endif
#if defined(KEY_CD) || (defined(HAVE_DECL_KEY_CD) && HAVE_DECL_KEY_CD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CD) == (0x17f), "KEY_CD != 0x17f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CD 0x17f
#endif
#if defined(KEY_TAPE) || (defined(HAVE_DECL_KEY_TAPE) && HAVE_DECL_KEY_TAPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TAPE) == (0x180), "KEY_TAPE != 0x180");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TAPE 0x180
#endif
#if defined(KEY_RADIO) || (defined(HAVE_DECL_KEY_RADIO) && HAVE_DECL_KEY_RADIO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RADIO) == (0x181), "KEY_RADIO != 0x181");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RADIO 0x181
#endif
#if defined(KEY_TUNER) || (defined(HAVE_DECL_KEY_TUNER) && HAVE_DECL_KEY_TUNER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TUNER) == (0x182), "KEY_TUNER != 0x182");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TUNER 0x182
#endif
#if defined(KEY_PLAYER) || (defined(HAVE_DECL_KEY_PLAYER) && HAVE_DECL_KEY_PLAYER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PLAYER) == (0x183), "KEY_PLAYER != 0x183");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PLAYER 0x183
#endif
#if defined(KEY_TEXT) || (defined(HAVE_DECL_KEY_TEXT) && HAVE_DECL_KEY_TEXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TEXT) == (0x184), "KEY_TEXT != 0x184");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TEXT 0x184
#endif
#if defined(KEY_DVD) || (defined(HAVE_DECL_KEY_DVD) && HAVE_DECL_KEY_DVD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DVD) == (0x185), "KEY_DVD != 0x185");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DVD 0x185
#endif
#if defined(KEY_AUX) || (defined(HAVE_DECL_KEY_AUX) && HAVE_DECL_KEY_AUX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_AUX) == (0x186), "KEY_AUX != 0x186");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_AUX 0x186
#endif
#if defined(KEY_MP3) || (defined(HAVE_DECL_KEY_MP3) && HAVE_DECL_KEY_MP3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MP3) == (0x187), "KEY_MP3 != 0x187");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MP3 0x187
#endif
#if defined(KEY_AUDIO) || (defined(HAVE_DECL_KEY_AUDIO) && HAVE_DECL_KEY_AUDIO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_AUDIO) == (0x188), "KEY_AUDIO != 0x188");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_AUDIO 0x188
#endif
#if defined(KEY_VIDEO) || (defined(HAVE_DECL_KEY_VIDEO) && HAVE_DECL_KEY_VIDEO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VIDEO) == (0x189), "KEY_VIDEO != 0x189");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VIDEO 0x189
#endif
#if defined(KEY_DIRECTORY) || (defined(HAVE_DECL_KEY_DIRECTORY) && HAVE_DECL_KEY_DIRECTORY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DIRECTORY) == (0x18a), "KEY_DIRECTORY != 0x18a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DIRECTORY 0x18a
#endif
#if defined(KEY_LIST) || (defined(HAVE_DECL_KEY_LIST) && HAVE_DECL_KEY_LIST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LIST) == (0x18b), "KEY_LIST != 0x18b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LIST 0x18b
#endif
#if defined(KEY_MEMO) || (defined(HAVE_DECL_KEY_MEMO) && HAVE_DECL_KEY_MEMO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MEMO) == (0x18c), "KEY_MEMO != 0x18c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MEMO 0x18c
#endif
#if defined(KEY_CALENDAR) || (defined(HAVE_DECL_KEY_CALENDAR) && HAVE_DECL_KEY_CALENDAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CALENDAR) == (0x18d), "KEY_CALENDAR != 0x18d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CALENDAR 0x18d
#endif
#if defined(KEY_RED) || (defined(HAVE_DECL_KEY_RED) && HAVE_DECL_KEY_RED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RED) == (0x18e), "KEY_RED != 0x18e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RED 0x18e
#endif
#if defined(KEY_GREEN) || (defined(HAVE_DECL_KEY_GREEN) && HAVE_DECL_KEY_GREEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_GREEN) == (0x18f), "KEY_GREEN != 0x18f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_GREEN 0x18f
#endif
#if defined(KEY_YELLOW) || (defined(HAVE_DECL_KEY_YELLOW) && HAVE_DECL_KEY_YELLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_YELLOW) == (0x190), "KEY_YELLOW != 0x190");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_YELLOW 0x190
#endif
#if defined(KEY_BLUE) || (defined(HAVE_DECL_KEY_BLUE) && HAVE_DECL_KEY_BLUE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BLUE) == (0x191), "KEY_BLUE != 0x191");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BLUE 0x191
#endif
#if defined(KEY_CHANNELUP) || (defined(HAVE_DECL_KEY_CHANNELUP) && HAVE_DECL_KEY_CHANNELUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CHANNELUP) == (0x192), "KEY_CHANNELUP != 0x192");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CHANNELUP 0x192
#endif
#if defined(KEY_CHANNELDOWN) || (defined(HAVE_DECL_KEY_CHANNELDOWN) && HAVE_DECL_KEY_CHANNELDOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CHANNELDOWN) == (0x193), "KEY_CHANNELDOWN != 0x193");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CHANNELDOWN 0x193
#endif
#if defined(KEY_FIRST) || (defined(HAVE_DECL_KEY_FIRST) && HAVE_DECL_KEY_FIRST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FIRST) == (0x194), "KEY_FIRST != 0x194");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FIRST 0x194
#endif
#if defined(KEY_LAST) || (defined(HAVE_DECL_KEY_LAST) && HAVE_DECL_KEY_LAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LAST) == (0x195), "KEY_LAST != 0x195");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LAST 0x195
#endif
#if defined(KEY_AB) || (defined(HAVE_DECL_KEY_AB) && HAVE_DECL_KEY_AB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_AB) == (0x196), "KEY_AB != 0x196");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_AB 0x196
#endif
#if defined(KEY_NEXT) || (defined(HAVE_DECL_KEY_NEXT) && HAVE_DECL_KEY_NEXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NEXT) == (0x197), "KEY_NEXT != 0x197");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NEXT 0x197
#endif
#if defined(KEY_RESTART) || (defined(HAVE_DECL_KEY_RESTART) && HAVE_DECL_KEY_RESTART)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RESTART) == (0x198), "KEY_RESTART != 0x198");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RESTART 0x198
#endif
#if defined(KEY_SLOW) || (defined(HAVE_DECL_KEY_SLOW) && HAVE_DECL_KEY_SLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SLOW) == (0x199), "KEY_SLOW != 0x199");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SLOW 0x199
#endif
#if defined(KEY_SHUFFLE) || (defined(HAVE_DECL_KEY_SHUFFLE) && HAVE_DECL_KEY_SHUFFLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SHUFFLE) == (0x19a), "KEY_SHUFFLE != 0x19a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SHUFFLE 0x19a
#endif
#if defined(KEY_BREAK) || (defined(HAVE_DECL_KEY_BREAK) && HAVE_DECL_KEY_BREAK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BREAK) == (0x19b), "KEY_BREAK != 0x19b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BREAK 0x19b
#endif
#if defined(KEY_PREVIOUS) || (defined(HAVE_DECL_KEY_PREVIOUS) && HAVE_DECL_KEY_PREVIOUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PREVIOUS) == (0x19c), "KEY_PREVIOUS != 0x19c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PREVIOUS 0x19c
#endif
#if defined(KEY_DIGITS) || (defined(HAVE_DECL_KEY_DIGITS) && HAVE_DECL_KEY_DIGITS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DIGITS) == (0x19d), "KEY_DIGITS != 0x19d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DIGITS 0x19d
#endif
#if defined(KEY_TEEN) || (defined(HAVE_DECL_KEY_TEEN) && HAVE_DECL_KEY_TEEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TEEN) == (0x19e), "KEY_TEEN != 0x19e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TEEN 0x19e
#endif
#if defined(KEY_TWEN) || (defined(HAVE_DECL_KEY_TWEN) && HAVE_DECL_KEY_TWEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TWEN) == (0x19f), "KEY_TWEN != 0x19f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TWEN 0x19f
#endif
#if defined(KEY_VIDEOPHONE) || (defined(HAVE_DECL_KEY_VIDEOPHONE) && HAVE_DECL_KEY_VIDEOPHONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VIDEOPHONE) == (0x1a0), "KEY_VIDEOPHONE != 0x1a0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VIDEOPHONE 0x1a0
#endif
#if defined(KEY_GAMES) || (defined(HAVE_DECL_KEY_GAMES) && HAVE_DECL_KEY_GAMES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_GAMES) == (0x1a1), "KEY_GAMES != 0x1a1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_GAMES 0x1a1
#endif
#if defined(KEY_ZOOMIN) || (defined(HAVE_DECL_KEY_ZOOMIN) && HAVE_DECL_KEY_ZOOMIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ZOOMIN) == (0x1a2), "KEY_ZOOMIN != 0x1a2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ZOOMIN 0x1a2
#endif
#if defined(KEY_ZOOMOUT) || (defined(HAVE_DECL_KEY_ZOOMOUT) && HAVE_DECL_KEY_ZOOMOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ZOOMOUT) == (0x1a3), "KEY_ZOOMOUT != 0x1a3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ZOOMOUT 0x1a3
#endif
#if defined(KEY_ZOOMRESET) || (defined(HAVE_DECL_KEY_ZOOMRESET) && HAVE_DECL_KEY_ZOOMRESET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ZOOMRESET) == (0x1a4), "KEY_ZOOMRESET != 0x1a4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ZOOMRESET 0x1a4
#endif
#if defined(KEY_WORDPROCESSOR) || (defined(HAVE_DECL_KEY_WORDPROCESSOR) && HAVE_DECL_KEY_WORDPROCESSOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_WORDPROCESSOR) == (0x1a5), "KEY_WORDPROCESSOR != 0x1a5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_WORDPROCESSOR 0x1a5
#endif
#if defined(KEY_EDITOR) || (defined(HAVE_DECL_KEY_EDITOR) && HAVE_DECL_KEY_EDITOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_EDITOR) == (0x1a6), "KEY_EDITOR != 0x1a6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_EDITOR 0x1a6
#endif
#if defined(KEY_SPREADSHEET) || (defined(HAVE_DECL_KEY_SPREADSHEET) && HAVE_DECL_KEY_SPREADSHEET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SPREADSHEET) == (0x1a7), "KEY_SPREADSHEET != 0x1a7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SPREADSHEET 0x1a7
#endif
#if defined(KEY_GRAPHICSEDITOR) || (defined(HAVE_DECL_KEY_GRAPHICSEDITOR) && HAVE_DECL_KEY_GRAPHICSEDITOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_GRAPHICSEDITOR) == (0x1a8), "KEY_GRAPHICSEDITOR != 0x1a8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_GRAPHICSEDITOR 0x1a8
#endif
#if defined(KEY_PRESENTATION) || (defined(HAVE_DECL_KEY_PRESENTATION) && HAVE_DECL_KEY_PRESENTATION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PRESENTATION) == (0x1a9), "KEY_PRESENTATION != 0x1a9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PRESENTATION 0x1a9
#endif
#if defined(KEY_DATABASE) || (defined(HAVE_DECL_KEY_DATABASE) && HAVE_DECL_KEY_DATABASE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DATABASE) == (0x1aa), "KEY_DATABASE != 0x1aa");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DATABASE 0x1aa
#endif
#if defined(KEY_NEWS) || (defined(HAVE_DECL_KEY_NEWS) && HAVE_DECL_KEY_NEWS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NEWS) == (0x1ab), "KEY_NEWS != 0x1ab");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NEWS 0x1ab
#endif
#if defined(KEY_VOICEMAIL) || (defined(HAVE_DECL_KEY_VOICEMAIL) && HAVE_DECL_KEY_VOICEMAIL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VOICEMAIL) == (0x1ac), "KEY_VOICEMAIL != 0x1ac");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VOICEMAIL 0x1ac
#endif
#if defined(KEY_ADDRESSBOOK) || (defined(HAVE_DECL_KEY_ADDRESSBOOK) && HAVE_DECL_KEY_ADDRESSBOOK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ADDRESSBOOK) == (0x1ad), "KEY_ADDRESSBOOK != 0x1ad");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ADDRESSBOOK 0x1ad
#endif
#if defined(KEY_MESSENGER) || (defined(HAVE_DECL_KEY_MESSENGER) && HAVE_DECL_KEY_MESSENGER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MESSENGER) == (0x1ae), "KEY_MESSENGER != 0x1ae");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MESSENGER 0x1ae
#endif
#if defined(KEY_DISPLAYTOGGLE) || (defined(HAVE_DECL_KEY_DISPLAYTOGGLE) && HAVE_DECL_KEY_DISPLAYTOGGLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DISPLAYTOGGLE) == (0x1af), "KEY_DISPLAYTOGGLE != 0x1af");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DISPLAYTOGGLE 0x1af
#endif
#if defined(KEY_SPELLCHECK) || (defined(HAVE_DECL_KEY_SPELLCHECK) && HAVE_DECL_KEY_SPELLCHECK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SPELLCHECK) == (0x1b0), "KEY_SPELLCHECK != 0x1b0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SPELLCHECK 0x1b0
#endif
#if defined(KEY_LOGOFF) || (defined(HAVE_DECL_KEY_LOGOFF) && HAVE_DECL_KEY_LOGOFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LOGOFF) == (0x1b1), "KEY_LOGOFF != 0x1b1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LOGOFF 0x1b1
#endif
#if defined(KEY_DOLLAR) || (defined(HAVE_DECL_KEY_DOLLAR) && HAVE_DECL_KEY_DOLLAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DOLLAR) == (0x1b2), "KEY_DOLLAR != 0x1b2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DOLLAR 0x1b2
#endif
#if defined(KEY_EURO) || (defined(HAVE_DECL_KEY_EURO) && HAVE_DECL_KEY_EURO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_EURO) == (0x1b3), "KEY_EURO != 0x1b3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_EURO 0x1b3
#endif
#if defined(KEY_FRAMEBACK) || (defined(HAVE_DECL_KEY_FRAMEBACK) && HAVE_DECL_KEY_FRAMEBACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FRAMEBACK) == (0x1b4), "KEY_FRAMEBACK != 0x1b4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FRAMEBACK 0x1b4
#endif
#if defined(KEY_FRAMEFORWARD) || (defined(HAVE_DECL_KEY_FRAMEFORWARD) && HAVE_DECL_KEY_FRAMEFORWARD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FRAMEFORWARD) == (0x1b5), "KEY_FRAMEFORWARD != 0x1b5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FRAMEFORWARD 0x1b5
#endif
#if defined(KEY_CONTEXT_MENU) || (defined(HAVE_DECL_KEY_CONTEXT_MENU) && HAVE_DECL_KEY_CONTEXT_MENU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CONTEXT_MENU) == (0x1b6), "KEY_CONTEXT_MENU != 0x1b6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CONTEXT_MENU 0x1b6
#endif
#if defined(KEY_MEDIA_REPEAT) || (defined(HAVE_DECL_KEY_MEDIA_REPEAT) && HAVE_DECL_KEY_MEDIA_REPEAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MEDIA_REPEAT) == (0x1b7), "KEY_MEDIA_REPEAT != 0x1b7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MEDIA_REPEAT 0x1b7
#endif
#if defined(KEY_10CHANNELSUP) || (defined(HAVE_DECL_KEY_10CHANNELSUP) && HAVE_DECL_KEY_10CHANNELSUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_10CHANNELSUP) == (0x1b8), "KEY_10CHANNELSUP != 0x1b8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_10CHANNELSUP 0x1b8
#endif
#if defined(KEY_10CHANNELSDOWN) || (defined(HAVE_DECL_KEY_10CHANNELSDOWN) && HAVE_DECL_KEY_10CHANNELSDOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_10CHANNELSDOWN) == (0x1b9), "KEY_10CHANNELSDOWN != 0x1b9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_10CHANNELSDOWN 0x1b9
#endif
#if defined(KEY_IMAGES) || (defined(HAVE_DECL_KEY_IMAGES) && HAVE_DECL_KEY_IMAGES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_IMAGES) == (0x1ba), "KEY_IMAGES != 0x1ba");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_IMAGES 0x1ba
#endif
#if defined(KEY_DEL_EOL) || (defined(HAVE_DECL_KEY_DEL_EOL) && HAVE_DECL_KEY_DEL_EOL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DEL_EOL) == (0x1c0), "KEY_DEL_EOL != 0x1c0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DEL_EOL 0x1c0
#endif
#if defined(KEY_DEL_EOS) || (defined(HAVE_DECL_KEY_DEL_EOS) && HAVE_DECL_KEY_DEL_EOS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DEL_EOS) == (0x1c1), "KEY_DEL_EOS != 0x1c1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DEL_EOS 0x1c1
#endif
#if defined(KEY_INS_LINE) || (defined(HAVE_DECL_KEY_INS_LINE) && HAVE_DECL_KEY_INS_LINE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_INS_LINE) == (0x1c2), "KEY_INS_LINE != 0x1c2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_INS_LINE 0x1c2
#endif
#if defined(KEY_DEL_LINE) || (defined(HAVE_DECL_KEY_DEL_LINE) && HAVE_DECL_KEY_DEL_LINE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DEL_LINE) == (0x1c3), "KEY_DEL_LINE != 0x1c3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DEL_LINE 0x1c3
#endif
#if defined(KEY_FN) || (defined(HAVE_DECL_KEY_FN) && HAVE_DECL_KEY_FN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN) == (0x1d0), "KEY_FN != 0x1d0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN 0x1d0
#endif
#if defined(KEY_FN_ESC) || (defined(HAVE_DECL_KEY_FN_ESC) && HAVE_DECL_KEY_FN_ESC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_ESC) == (0x1d1), "KEY_FN_ESC != 0x1d1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_ESC 0x1d1
#endif
#if defined(KEY_FN_F1) || (defined(HAVE_DECL_KEY_FN_F1) && HAVE_DECL_KEY_FN_F1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F1) == (0x1d2), "KEY_FN_F1 != 0x1d2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F1 0x1d2
#endif
#if defined(KEY_FN_F2) || (defined(HAVE_DECL_KEY_FN_F2) && HAVE_DECL_KEY_FN_F2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F2) == (0x1d3), "KEY_FN_F2 != 0x1d3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F2 0x1d3
#endif
#if defined(KEY_FN_F3) || (defined(HAVE_DECL_KEY_FN_F3) && HAVE_DECL_KEY_FN_F3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F3) == (0x1d4), "KEY_FN_F3 != 0x1d4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F3 0x1d4
#endif
#if defined(KEY_FN_F4) || (defined(HAVE_DECL_KEY_FN_F4) && HAVE_DECL_KEY_FN_F4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F4) == (0x1d5), "KEY_FN_F4 != 0x1d5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F4 0x1d5
#endif
#if defined(KEY_FN_F5) || (defined(HAVE_DECL_KEY_FN_F5) && HAVE_DECL_KEY_FN_F5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F5) == (0x1d6), "KEY_FN_F5 != 0x1d6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F5 0x1d6
#endif
#if defined(KEY_FN_F6) || (defined(HAVE_DECL_KEY_FN_F6) && HAVE_DECL_KEY_FN_F6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F6) == (0x1d7), "KEY_FN_F6 != 0x1d7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F6 0x1d7
#endif
#if defined(KEY_FN_F7) || (defined(HAVE_DECL_KEY_FN_F7) && HAVE_DECL_KEY_FN_F7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F7) == (0x1d8), "KEY_FN_F7 != 0x1d8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F7 0x1d8
#endif
#if defined(KEY_FN_F8) || (defined(HAVE_DECL_KEY_FN_F8) && HAVE_DECL_KEY_FN_F8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F8) == (0x1d9), "KEY_FN_F8 != 0x1d9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F8 0x1d9
#endif
#if defined(KEY_FN_F9) || (defined(HAVE_DECL_KEY_FN_F9) && HAVE_DECL_KEY_FN_F9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F9) == (0x1da), "KEY_FN_F9 != 0x1da");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F9 0x1da
#endif
#if defined(KEY_FN_F10) || (defined(HAVE_DECL_KEY_FN_F10) && HAVE_DECL_KEY_FN_F10)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F10) == (0x1db), "KEY_FN_F10 != 0x1db");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F10 0x1db
#endif
#if defined(KEY_FN_F11) || (defined(HAVE_DECL_KEY_FN_F11) && HAVE_DECL_KEY_FN_F11)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F11) == (0x1dc), "KEY_FN_F11 != 0x1dc");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F11 0x1dc
#endif
#if defined(KEY_FN_F12) || (defined(HAVE_DECL_KEY_FN_F12) && HAVE_DECL_KEY_FN_F12)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F12) == (0x1dd), "KEY_FN_F12 != 0x1dd");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F12 0x1dd
#endif
#if defined(KEY_FN_1) || (defined(HAVE_DECL_KEY_FN_1) && HAVE_DECL_KEY_FN_1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_1) == (0x1de), "KEY_FN_1 != 0x1de");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_1 0x1de
#endif
#if defined(KEY_FN_2) || (defined(HAVE_DECL_KEY_FN_2) && HAVE_DECL_KEY_FN_2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_2) == (0x1df), "KEY_FN_2 != 0x1df");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_2 0x1df
#endif
#if defined(KEY_FN_D) || (defined(HAVE_DECL_KEY_FN_D) && HAVE_DECL_KEY_FN_D)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_D) == (0x1e0), "KEY_FN_D != 0x1e0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_D 0x1e0
#endif
#if defined(KEY_FN_E) || (defined(HAVE_DECL_KEY_FN_E) && HAVE_DECL_KEY_FN_E)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_E) == (0x1e1), "KEY_FN_E != 0x1e1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_E 0x1e1
#endif
#if defined(KEY_FN_F) || (defined(HAVE_DECL_KEY_FN_F) && HAVE_DECL_KEY_FN_F)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_F) == (0x1e2), "KEY_FN_F != 0x1e2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_F 0x1e2
#endif
#if defined(KEY_FN_S) || (defined(HAVE_DECL_KEY_FN_S) && HAVE_DECL_KEY_FN_S)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_S) == (0x1e3), "KEY_FN_S != 0x1e3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_S 0x1e3
#endif
#if defined(KEY_FN_B) || (defined(HAVE_DECL_KEY_FN_B) && HAVE_DECL_KEY_FN_B)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FN_B) == (0x1e4), "KEY_FN_B != 0x1e4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FN_B 0x1e4
#endif
#if defined(KEY_BRL_DOT1) || (defined(HAVE_DECL_KEY_BRL_DOT1) && HAVE_DECL_KEY_BRL_DOT1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRL_DOT1) == (0x1f1), "KEY_BRL_DOT1 != 0x1f1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRL_DOT1 0x1f1
#endif
#if defined(KEY_BRL_DOT2) || (defined(HAVE_DECL_KEY_BRL_DOT2) && HAVE_DECL_KEY_BRL_DOT2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRL_DOT2) == (0x1f2), "KEY_BRL_DOT2 != 0x1f2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRL_DOT2 0x1f2
#endif
#if defined(KEY_BRL_DOT3) || (defined(HAVE_DECL_KEY_BRL_DOT3) && HAVE_DECL_KEY_BRL_DOT3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRL_DOT3) == (0x1f3), "KEY_BRL_DOT3 != 0x1f3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRL_DOT3 0x1f3
#endif
#if defined(KEY_BRL_DOT4) || (defined(HAVE_DECL_KEY_BRL_DOT4) && HAVE_DECL_KEY_BRL_DOT4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRL_DOT4) == (0x1f4), "KEY_BRL_DOT4 != 0x1f4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRL_DOT4 0x1f4
#endif
#if defined(KEY_BRL_DOT5) || (defined(HAVE_DECL_KEY_BRL_DOT5) && HAVE_DECL_KEY_BRL_DOT5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRL_DOT5) == (0x1f5), "KEY_BRL_DOT5 != 0x1f5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRL_DOT5 0x1f5
#endif
#if defined(KEY_BRL_DOT6) || (defined(HAVE_DECL_KEY_BRL_DOT6) && HAVE_DECL_KEY_BRL_DOT6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRL_DOT6) == (0x1f6), "KEY_BRL_DOT6 != 0x1f6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRL_DOT6 0x1f6
#endif
#if defined(KEY_BRL_DOT7) || (defined(HAVE_DECL_KEY_BRL_DOT7) && HAVE_DECL_KEY_BRL_DOT7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRL_DOT7) == (0x1f7), "KEY_BRL_DOT7 != 0x1f7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRL_DOT7 0x1f7
#endif
#if defined(KEY_BRL_DOT8) || (defined(HAVE_DECL_KEY_BRL_DOT8) && HAVE_DECL_KEY_BRL_DOT8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRL_DOT8) == (0x1f8), "KEY_BRL_DOT8 != 0x1f8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRL_DOT8 0x1f8
#endif
#if defined(KEY_BRL_DOT9) || (defined(HAVE_DECL_KEY_BRL_DOT9) && HAVE_DECL_KEY_BRL_DOT9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRL_DOT9) == (0x1f9), "KEY_BRL_DOT9 != 0x1f9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRL_DOT9 0x1f9
#endif
#if defined(KEY_BRL_DOT10) || (defined(HAVE_DECL_KEY_BRL_DOT10) && HAVE_DECL_KEY_BRL_DOT10)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRL_DOT10) == (0x1fa), "KEY_BRL_DOT10 != 0x1fa");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRL_DOT10 0x1fa
#endif
#if defined(KEY_NUMERIC_0) || (defined(HAVE_DECL_KEY_NUMERIC_0) && HAVE_DECL_KEY_NUMERIC_0)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_0) == (0x200), "KEY_NUMERIC_0 != 0x200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_0 0x200
#endif
#if defined(KEY_NUMERIC_1) || (defined(HAVE_DECL_KEY_NUMERIC_1) && HAVE_DECL_KEY_NUMERIC_1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_1) == (0x201), "KEY_NUMERIC_1 != 0x201");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_1 0x201
#endif
#if defined(KEY_NUMERIC_2) || (defined(HAVE_DECL_KEY_NUMERIC_2) && HAVE_DECL_KEY_NUMERIC_2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_2) == (0x202), "KEY_NUMERIC_2 != 0x202");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_2 0x202
#endif
#if defined(KEY_NUMERIC_3) || (defined(HAVE_DECL_KEY_NUMERIC_3) && HAVE_DECL_KEY_NUMERIC_3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_3) == (0x203), "KEY_NUMERIC_3 != 0x203");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_3 0x203
#endif
#if defined(KEY_NUMERIC_4) || (defined(HAVE_DECL_KEY_NUMERIC_4) && HAVE_DECL_KEY_NUMERIC_4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_4) == (0x204), "KEY_NUMERIC_4 != 0x204");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_4 0x204
#endif
#if defined(KEY_NUMERIC_5) || (defined(HAVE_DECL_KEY_NUMERIC_5) && HAVE_DECL_KEY_NUMERIC_5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_5) == (0x205), "KEY_NUMERIC_5 != 0x205");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_5 0x205
#endif
#if defined(KEY_NUMERIC_6) || (defined(HAVE_DECL_KEY_NUMERIC_6) && HAVE_DECL_KEY_NUMERIC_6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_6) == (0x206), "KEY_NUMERIC_6 != 0x206");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_6 0x206
#endif
#if defined(KEY_NUMERIC_7) || (defined(HAVE_DECL_KEY_NUMERIC_7) && HAVE_DECL_KEY_NUMERIC_7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_7) == (0x207), "KEY_NUMERIC_7 != 0x207");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_7 0x207
#endif
#if defined(KEY_NUMERIC_8) || (defined(HAVE_DECL_KEY_NUMERIC_8) && HAVE_DECL_KEY_NUMERIC_8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_8) == (0x208), "KEY_NUMERIC_8 != 0x208");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_8 0x208
#endif
#if defined(KEY_NUMERIC_9) || (defined(HAVE_DECL_KEY_NUMERIC_9) && HAVE_DECL_KEY_NUMERIC_9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_9) == (0x209), "KEY_NUMERIC_9 != 0x209");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_9 0x209
#endif
#if defined(KEY_NUMERIC_STAR) || (defined(HAVE_DECL_KEY_NUMERIC_STAR) && HAVE_DECL_KEY_NUMERIC_STAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_STAR) == (0x20a), "KEY_NUMERIC_STAR != 0x20a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_STAR 0x20a
#endif
#if defined(KEY_NUMERIC_POUND) || (defined(HAVE_DECL_KEY_NUMERIC_POUND) && HAVE_DECL_KEY_NUMERIC_POUND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_POUND) == (0x20b), "KEY_NUMERIC_POUND != 0x20b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_POUND 0x20b
#endif
#if defined(KEY_NUMERIC_A) || (defined(HAVE_DECL_KEY_NUMERIC_A) && HAVE_DECL_KEY_NUMERIC_A)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_A) == (0x20c), "KEY_NUMERIC_A != 0x20c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_A 0x20c
#endif
#if defined(KEY_NUMERIC_B) || (defined(HAVE_DECL_KEY_NUMERIC_B) && HAVE_DECL_KEY_NUMERIC_B)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_B) == (0x20d), "KEY_NUMERIC_B != 0x20d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_B 0x20d
#endif
#if defined(KEY_NUMERIC_C) || (defined(HAVE_DECL_KEY_NUMERIC_C) && HAVE_DECL_KEY_NUMERIC_C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_C) == (0x20e), "KEY_NUMERIC_C != 0x20e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_C 0x20e
#endif
#if defined(KEY_NUMERIC_D) || (defined(HAVE_DECL_KEY_NUMERIC_D) && HAVE_DECL_KEY_NUMERIC_D)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_D) == (0x20f), "KEY_NUMERIC_D != 0x20f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_D 0x20f
#endif
#if defined(KEY_CAMERA_FOCUS) || (defined(HAVE_DECL_KEY_CAMERA_FOCUS) && HAVE_DECL_KEY_CAMERA_FOCUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CAMERA_FOCUS) == (0x210), "KEY_CAMERA_FOCUS != 0x210");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CAMERA_FOCUS 0x210
#endif
#if defined(KEY_WPS_BUTTON) || (defined(HAVE_DECL_KEY_WPS_BUTTON) && HAVE_DECL_KEY_WPS_BUTTON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_WPS_BUTTON) == (0x211), "KEY_WPS_BUTTON != 0x211");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_WPS_BUTTON 0x211
#endif
#if defined(KEY_TOUCHPAD_TOGGLE) || (defined(HAVE_DECL_KEY_TOUCHPAD_TOGGLE) && HAVE_DECL_KEY_TOUCHPAD_TOGGLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TOUCHPAD_TOGGLE) == (0x212), "KEY_TOUCHPAD_TOGGLE != 0x212");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TOUCHPAD_TOGGLE 0x212
#endif
#if defined(KEY_TOUCHPAD_ON) || (defined(HAVE_DECL_KEY_TOUCHPAD_ON) && HAVE_DECL_KEY_TOUCHPAD_ON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TOUCHPAD_ON) == (0x213), "KEY_TOUCHPAD_ON != 0x213");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TOUCHPAD_ON 0x213
#endif
#if defined(KEY_TOUCHPAD_OFF) || (defined(HAVE_DECL_KEY_TOUCHPAD_OFF) && HAVE_DECL_KEY_TOUCHPAD_OFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TOUCHPAD_OFF) == (0x214), "KEY_TOUCHPAD_OFF != 0x214");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TOUCHPAD_OFF 0x214
#endif
#if defined(KEY_CAMERA_ZOOMIN) || (defined(HAVE_DECL_KEY_CAMERA_ZOOMIN) && HAVE_DECL_KEY_CAMERA_ZOOMIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CAMERA_ZOOMIN) == (0x215), "KEY_CAMERA_ZOOMIN != 0x215");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CAMERA_ZOOMIN 0x215
#endif
#if defined(KEY_CAMERA_ZOOMOUT) || (defined(HAVE_DECL_KEY_CAMERA_ZOOMOUT) && HAVE_DECL_KEY_CAMERA_ZOOMOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CAMERA_ZOOMOUT) == (0x216), "KEY_CAMERA_ZOOMOUT != 0x216");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CAMERA_ZOOMOUT 0x216
#endif
#if defined(KEY_CAMERA_UP) || (defined(HAVE_DECL_KEY_CAMERA_UP) && HAVE_DECL_KEY_CAMERA_UP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CAMERA_UP) == (0x217), "KEY_CAMERA_UP != 0x217");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CAMERA_UP 0x217
#endif
#if defined(KEY_CAMERA_DOWN) || (defined(HAVE_DECL_KEY_CAMERA_DOWN) && HAVE_DECL_KEY_CAMERA_DOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CAMERA_DOWN) == (0x218), "KEY_CAMERA_DOWN != 0x218");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CAMERA_DOWN 0x218
#endif
#if defined(KEY_CAMERA_LEFT) || (defined(HAVE_DECL_KEY_CAMERA_LEFT) && HAVE_DECL_KEY_CAMERA_LEFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CAMERA_LEFT) == (0x219), "KEY_CAMERA_LEFT != 0x219");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CAMERA_LEFT 0x219
#endif
#if defined(KEY_CAMERA_RIGHT) || (defined(HAVE_DECL_KEY_CAMERA_RIGHT) && HAVE_DECL_KEY_CAMERA_RIGHT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CAMERA_RIGHT) == (0x21a), "KEY_CAMERA_RIGHT != 0x21a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CAMERA_RIGHT 0x21a
#endif
#if defined(KEY_ATTENDANT_ON) || (defined(HAVE_DECL_KEY_ATTENDANT_ON) && HAVE_DECL_KEY_ATTENDANT_ON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ATTENDANT_ON) == (0x21b), "KEY_ATTENDANT_ON != 0x21b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ATTENDANT_ON 0x21b
#endif
#if defined(KEY_ATTENDANT_OFF) || (defined(HAVE_DECL_KEY_ATTENDANT_OFF) && HAVE_DECL_KEY_ATTENDANT_OFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ATTENDANT_OFF) == (0x21c), "KEY_ATTENDANT_OFF != 0x21c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ATTENDANT_OFF 0x21c
#endif
#if defined(KEY_ATTENDANT_TOGGLE) || (defined(HAVE_DECL_KEY_ATTENDANT_TOGGLE) && HAVE_DECL_KEY_ATTENDANT_TOGGLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ATTENDANT_TOGGLE) == (0x21d), "KEY_ATTENDANT_TOGGLE != 0x21d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ATTENDANT_TOGGLE 0x21d
#endif
#if defined(KEY_LIGHTS_TOGGLE) || (defined(HAVE_DECL_KEY_LIGHTS_TOGGLE) && HAVE_DECL_KEY_LIGHTS_TOGGLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LIGHTS_TOGGLE) == (0x21e), "KEY_LIGHTS_TOGGLE != 0x21e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LIGHTS_TOGGLE 0x21e
#endif
#if defined(BTN_DPAD_UP) || (defined(HAVE_DECL_BTN_DPAD_UP) && HAVE_DECL_BTN_DPAD_UP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_DPAD_UP) == (0x220), "BTN_DPAD_UP != 0x220");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_DPAD_UP 0x220
#endif
#if defined(BTN_DPAD_DOWN) || (defined(HAVE_DECL_BTN_DPAD_DOWN) && HAVE_DECL_BTN_DPAD_DOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_DPAD_DOWN) == (0x221), "BTN_DPAD_DOWN != 0x221");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_DPAD_DOWN 0x221
#endif
#if defined(BTN_DPAD_LEFT) || (defined(HAVE_DECL_BTN_DPAD_LEFT) && HAVE_DECL_BTN_DPAD_LEFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_DPAD_LEFT) == (0x222), "BTN_DPAD_LEFT != 0x222");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_DPAD_LEFT 0x222
#endif
#if defined(BTN_DPAD_RIGHT) || (defined(HAVE_DECL_BTN_DPAD_RIGHT) && HAVE_DECL_BTN_DPAD_RIGHT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_DPAD_RIGHT) == (0x223), "BTN_DPAD_RIGHT != 0x223");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_DPAD_RIGHT 0x223
#endif
#if defined(KEY_ALS_TOGGLE) || (defined(HAVE_DECL_KEY_ALS_TOGGLE) && HAVE_DECL_KEY_ALS_TOGGLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ALS_TOGGLE) == (0x230), "KEY_ALS_TOGGLE != 0x230");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ALS_TOGGLE 0x230
#endif
#if defined(KEY_ROTATE_LOCK_TOGGLE) || (defined(HAVE_DECL_KEY_ROTATE_LOCK_TOGGLE) && HAVE_DECL_KEY_ROTATE_LOCK_TOGGLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ROTATE_LOCK_TOGGLE) == (0x231), "KEY_ROTATE_LOCK_TOGGLE != 0x231");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ROTATE_LOCK_TOGGLE 0x231
#endif
#if defined(KEY_BUTTONCONFIG) || (defined(HAVE_DECL_KEY_BUTTONCONFIG) && HAVE_DECL_KEY_BUTTONCONFIG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BUTTONCONFIG) == (0x240), "KEY_BUTTONCONFIG != 0x240");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BUTTONCONFIG 0x240
#endif
#if defined(KEY_TASKMANAGER) || (defined(HAVE_DECL_KEY_TASKMANAGER) && HAVE_DECL_KEY_TASKMANAGER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_TASKMANAGER) == (0x241), "KEY_TASKMANAGER != 0x241");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_TASKMANAGER 0x241
#endif
#if defined(KEY_JOURNAL) || (defined(HAVE_DECL_KEY_JOURNAL) && HAVE_DECL_KEY_JOURNAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_JOURNAL) == (0x242), "KEY_JOURNAL != 0x242");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_JOURNAL 0x242
#endif
#if defined(KEY_CONTROLPANEL) || (defined(HAVE_DECL_KEY_CONTROLPANEL) && HAVE_DECL_KEY_CONTROLPANEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_CONTROLPANEL) == (0x243), "KEY_CONTROLPANEL != 0x243");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_CONTROLPANEL 0x243
#endif
#if defined(KEY_APPSELECT) || (defined(HAVE_DECL_KEY_APPSELECT) && HAVE_DECL_KEY_APPSELECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_APPSELECT) == (0x244), "KEY_APPSELECT != 0x244");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_APPSELECT 0x244
#endif
#if defined(KEY_SCREENSAVER) || (defined(HAVE_DECL_KEY_SCREENSAVER) && HAVE_DECL_KEY_SCREENSAVER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SCREENSAVER) == (0x245), "KEY_SCREENSAVER != 0x245");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SCREENSAVER 0x245
#endif
#if defined(KEY_VOICECOMMAND) || (defined(HAVE_DECL_KEY_VOICECOMMAND) && HAVE_DECL_KEY_VOICECOMMAND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VOICECOMMAND) == (0x246), "KEY_VOICECOMMAND != 0x246");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VOICECOMMAND 0x246
#endif
#if defined(KEY_ASSISTANT) || (defined(HAVE_DECL_KEY_ASSISTANT) && HAVE_DECL_KEY_ASSISTANT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ASSISTANT) == (0x247), "KEY_ASSISTANT != 0x247");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ASSISTANT 0x247
#endif
#if defined(KEY_KBD_LAYOUT_NEXT) || (defined(HAVE_DECL_KEY_KBD_LAYOUT_NEXT) && HAVE_DECL_KEY_KBD_LAYOUT_NEXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBD_LAYOUT_NEXT) == (0x248), "KEY_KBD_LAYOUT_NEXT != 0x248");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBD_LAYOUT_NEXT 0x248
#endif
#ifndef STRACE_WORKAROUND_FOR_KEY_BRIGHTNESS_MIN
# define STRACE_WORKAROUND_FOR_KEY_BRIGHTNESS_MIN
# undef KEY_BRIGHTNESS_MIN
#endif
#if defined(KEY_BRIGHTNESS_MIN) || (defined(HAVE_DECL_KEY_BRIGHTNESS_MIN) && HAVE_DECL_KEY_BRIGHTNESS_MIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRIGHTNESS_MIN) == (0x250), "KEY_BRIGHTNESS_MIN != 0x250");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRIGHTNESS_MIN 0x250
#endif
#if defined(KEY_BRIGHTNESS_MAX) || (defined(HAVE_DECL_KEY_BRIGHTNESS_MAX) && HAVE_DECL_KEY_BRIGHTNESS_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_BRIGHTNESS_MAX) == (0x251), "KEY_BRIGHTNESS_MAX != 0x251");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_BRIGHTNESS_MAX 0x251
#endif
#if defined(KEY_KBDINPUTASSIST_PREV) || (defined(HAVE_DECL_KEY_KBDINPUTASSIST_PREV) && HAVE_DECL_KEY_KBDINPUTASSIST_PREV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBDINPUTASSIST_PREV) == (0x260), "KEY_KBDINPUTASSIST_PREV != 0x260");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBDINPUTASSIST_PREV 0x260
#endif
#if defined(KEY_KBDINPUTASSIST_NEXT) || (defined(HAVE_DECL_KEY_KBDINPUTASSIST_NEXT) && HAVE_DECL_KEY_KBDINPUTASSIST_NEXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBDINPUTASSIST_NEXT) == (0x261), "KEY_KBDINPUTASSIST_NEXT != 0x261");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBDINPUTASSIST_NEXT 0x261
#endif
#if defined(KEY_KBDINPUTASSIST_PREVGROUP) || (defined(HAVE_DECL_KEY_KBDINPUTASSIST_PREVGROUP) && HAVE_DECL_KEY_KBDINPUTASSIST_PREVGROUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBDINPUTASSIST_PREVGROUP) == (0x262), "KEY_KBDINPUTASSIST_PREVGROUP != 0x262");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBDINPUTASSIST_PREVGROUP 0x262
#endif
#if defined(KEY_KBDINPUTASSIST_NEXTGROUP) || (defined(HAVE_DECL_KEY_KBDINPUTASSIST_NEXTGROUP) && HAVE_DECL_KEY_KBDINPUTASSIST_NEXTGROUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBDINPUTASSIST_NEXTGROUP) == (0x263), "KEY_KBDINPUTASSIST_NEXTGROUP != 0x263");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBDINPUTASSIST_NEXTGROUP 0x263
#endif
#if defined(KEY_KBDINPUTASSIST_ACCEPT) || (defined(HAVE_DECL_KEY_KBDINPUTASSIST_ACCEPT) && HAVE_DECL_KEY_KBDINPUTASSIST_ACCEPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBDINPUTASSIST_ACCEPT) == (0x264), "KEY_KBDINPUTASSIST_ACCEPT != 0x264");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBDINPUTASSIST_ACCEPT 0x264
#endif
#if defined(KEY_KBDINPUTASSIST_CANCEL) || (defined(HAVE_DECL_KEY_KBDINPUTASSIST_CANCEL) && HAVE_DECL_KEY_KBDINPUTASSIST_CANCEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBDINPUTASSIST_CANCEL) == (0x265), "KEY_KBDINPUTASSIST_CANCEL != 0x265");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBDINPUTASSIST_CANCEL 0x265
#endif
#if defined(KEY_RIGHT_UP) || (defined(HAVE_DECL_KEY_RIGHT_UP) && HAVE_DECL_KEY_RIGHT_UP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RIGHT_UP) == (0x266), "KEY_RIGHT_UP != 0x266");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RIGHT_UP 0x266
#endif
#if defined(KEY_RIGHT_DOWN) || (defined(HAVE_DECL_KEY_RIGHT_DOWN) && HAVE_DECL_KEY_RIGHT_DOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_RIGHT_DOWN) == (0x267), "KEY_RIGHT_DOWN != 0x267");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_RIGHT_DOWN 0x267
#endif
#if defined(KEY_LEFT_UP) || (defined(HAVE_DECL_KEY_LEFT_UP) && HAVE_DECL_KEY_LEFT_UP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LEFT_UP) == (0x268), "KEY_LEFT_UP != 0x268");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LEFT_UP 0x268
#endif
#if defined(KEY_LEFT_DOWN) || (defined(HAVE_DECL_KEY_LEFT_DOWN) && HAVE_DECL_KEY_LEFT_DOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_LEFT_DOWN) == (0x269), "KEY_LEFT_DOWN != 0x269");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_LEFT_DOWN 0x269
#endif
#if defined(KEY_ROOT_MENU) || (defined(HAVE_DECL_KEY_ROOT_MENU) && HAVE_DECL_KEY_ROOT_MENU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ROOT_MENU) == (0x26a), "KEY_ROOT_MENU != 0x26a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ROOT_MENU 0x26a
#endif
#if defined(KEY_MEDIA_TOP_MENU) || (defined(HAVE_DECL_KEY_MEDIA_TOP_MENU) && HAVE_DECL_KEY_MEDIA_TOP_MENU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MEDIA_TOP_MENU) == (0x26b), "KEY_MEDIA_TOP_MENU != 0x26b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MEDIA_TOP_MENU 0x26b
#endif
#if defined(KEY_NUMERIC_11) || (defined(HAVE_DECL_KEY_NUMERIC_11) && HAVE_DECL_KEY_NUMERIC_11)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_11) == (0x26c), "KEY_NUMERIC_11 != 0x26c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_11 0x26c
#endif
#if defined(KEY_NUMERIC_12) || (defined(HAVE_DECL_KEY_NUMERIC_12) && HAVE_DECL_KEY_NUMERIC_12)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NUMERIC_12) == (0x26d), "KEY_NUMERIC_12 != 0x26d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NUMERIC_12 0x26d
#endif
#if defined(KEY_AUDIO_DESC) || (defined(HAVE_DECL_KEY_AUDIO_DESC) && HAVE_DECL_KEY_AUDIO_DESC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_AUDIO_DESC) == (0x26e), "KEY_AUDIO_DESC != 0x26e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_AUDIO_DESC 0x26e
#endif
#if defined(KEY_3D_MODE) || (defined(HAVE_DECL_KEY_3D_MODE) && HAVE_DECL_KEY_3D_MODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_3D_MODE) == (0x26f), "KEY_3D_MODE != 0x26f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_3D_MODE 0x26f
#endif
#if defined(KEY_NEXT_FAVORITE) || (defined(HAVE_DECL_KEY_NEXT_FAVORITE) && HAVE_DECL_KEY_NEXT_FAVORITE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_NEXT_FAVORITE) == (0x270), "KEY_NEXT_FAVORITE != 0x270");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_NEXT_FAVORITE 0x270
#endif
#if defined(KEY_STOP_RECORD) || (defined(HAVE_DECL_KEY_STOP_RECORD) && HAVE_DECL_KEY_STOP_RECORD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_STOP_RECORD) == (0x271), "KEY_STOP_RECORD != 0x271");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_STOP_RECORD 0x271
#endif
#if defined(KEY_PAUSE_RECORD) || (defined(HAVE_DECL_KEY_PAUSE_RECORD) && HAVE_DECL_KEY_PAUSE_RECORD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PAUSE_RECORD) == (0x272), "KEY_PAUSE_RECORD != 0x272");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PAUSE_RECORD 0x272
#endif
#if defined(KEY_VOD) || (defined(HAVE_DECL_KEY_VOD) && HAVE_DECL_KEY_VOD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_VOD) == (0x273), "KEY_VOD != 0x273");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_VOD 0x273
#endif
#if defined(KEY_UNMUTE) || (defined(HAVE_DECL_KEY_UNMUTE) && HAVE_DECL_KEY_UNMUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_UNMUTE) == (0x274), "KEY_UNMUTE != 0x274");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_UNMUTE 0x274
#endif
#if defined(KEY_FASTREVERSE) || (defined(HAVE_DECL_KEY_FASTREVERSE) && HAVE_DECL_KEY_FASTREVERSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_FASTREVERSE) == (0x275), "KEY_FASTREVERSE != 0x275");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_FASTREVERSE 0x275
#endif
#if defined(KEY_SLOWREVERSE) || (defined(HAVE_DECL_KEY_SLOWREVERSE) && HAVE_DECL_KEY_SLOWREVERSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SLOWREVERSE) == (0x276), "KEY_SLOWREVERSE != 0x276");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SLOWREVERSE 0x276
#endif
#ifndef STRACE_WORKAROUND_FOR_KEY_DATA
# define STRACE_WORKAROUND_FOR_KEY_DATA
# undef KEY_DATA
#endif
#if defined(KEY_DATA) || (defined(HAVE_DECL_KEY_DATA) && HAVE_DECL_KEY_DATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_DATA) == (0x277), "KEY_DATA != 0x277");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_DATA 0x277
#endif
#if defined(KEY_ONSCREEN_KEYBOARD) || (defined(HAVE_DECL_KEY_ONSCREEN_KEYBOARD) && HAVE_DECL_KEY_ONSCREEN_KEYBOARD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_ONSCREEN_KEYBOARD) == (0x278), "KEY_ONSCREEN_KEYBOARD != 0x278");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_ONSCREEN_KEYBOARD 0x278
#endif
#if defined(KEY_PRIVACY_SCREEN_TOGGLE) || (defined(HAVE_DECL_KEY_PRIVACY_SCREEN_TOGGLE) && HAVE_DECL_KEY_PRIVACY_SCREEN_TOGGLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_PRIVACY_SCREEN_TOGGLE) == (0x279), "KEY_PRIVACY_SCREEN_TOGGLE != 0x279");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_PRIVACY_SCREEN_TOGGLE 0x279
#endif
#if defined(KEY_SELECTIVE_SCREENSHOT) || (defined(HAVE_DECL_KEY_SELECTIVE_SCREENSHOT) && HAVE_DECL_KEY_SELECTIVE_SCREENSHOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_SELECTIVE_SCREENSHOT) == (0x27a), "KEY_SELECTIVE_SCREENSHOT != 0x27a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_SELECTIVE_SCREENSHOT 0x27a
#endif
#if defined(KEY_MACRO1) || (defined(HAVE_DECL_KEY_MACRO1) && HAVE_DECL_KEY_MACRO1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO1) == (0x290), "KEY_MACRO1 != 0x290");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO1 0x290
#endif
#if defined(KEY_MACRO2) || (defined(HAVE_DECL_KEY_MACRO2) && HAVE_DECL_KEY_MACRO2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO2) == (0x291), "KEY_MACRO2 != 0x291");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO2 0x291
#endif
#if defined(KEY_MACRO3) || (defined(HAVE_DECL_KEY_MACRO3) && HAVE_DECL_KEY_MACRO3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO3) == (0x292), "KEY_MACRO3 != 0x292");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO3 0x292
#endif
#if defined(KEY_MACRO4) || (defined(HAVE_DECL_KEY_MACRO4) && HAVE_DECL_KEY_MACRO4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO4) == (0x293), "KEY_MACRO4 != 0x293");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO4 0x293
#endif
#if defined(KEY_MACRO5) || (defined(HAVE_DECL_KEY_MACRO5) && HAVE_DECL_KEY_MACRO5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO5) == (0x294), "KEY_MACRO5 != 0x294");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO5 0x294
#endif
#if defined(KEY_MACRO6) || (defined(HAVE_DECL_KEY_MACRO6) && HAVE_DECL_KEY_MACRO6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO6) == (0x295), "KEY_MACRO6 != 0x295");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO6 0x295
#endif
#if defined(KEY_MACRO7) || (defined(HAVE_DECL_KEY_MACRO7) && HAVE_DECL_KEY_MACRO7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO7) == (0x296), "KEY_MACRO7 != 0x296");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO7 0x296
#endif
#if defined(KEY_MACRO8) || (defined(HAVE_DECL_KEY_MACRO8) && HAVE_DECL_KEY_MACRO8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO8) == (0x297), "KEY_MACRO8 != 0x297");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO8 0x297
#endif
#if defined(KEY_MACRO9) || (defined(HAVE_DECL_KEY_MACRO9) && HAVE_DECL_KEY_MACRO9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO9) == (0x298), "KEY_MACRO9 != 0x298");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO9 0x298
#endif
#if defined(KEY_MACRO10) || (defined(HAVE_DECL_KEY_MACRO10) && HAVE_DECL_KEY_MACRO10)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO10) == (0x299), "KEY_MACRO10 != 0x299");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO10 0x299
#endif
#if defined(KEY_MACRO11) || (defined(HAVE_DECL_KEY_MACRO11) && HAVE_DECL_KEY_MACRO11)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO11) == (0x29a), "KEY_MACRO11 != 0x29a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO11 0x29a
#endif
#if defined(KEY_MACRO12) || (defined(HAVE_DECL_KEY_MACRO12) && HAVE_DECL_KEY_MACRO12)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO12) == (0x29b), "KEY_MACRO12 != 0x29b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO12 0x29b
#endif
#if defined(KEY_MACRO13) || (defined(HAVE_DECL_KEY_MACRO13) && HAVE_DECL_KEY_MACRO13)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO13) == (0x29c), "KEY_MACRO13 != 0x29c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO13 0x29c
#endif
#if defined(KEY_MACRO14) || (defined(HAVE_DECL_KEY_MACRO14) && HAVE_DECL_KEY_MACRO14)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO14) == (0x29d), "KEY_MACRO14 != 0x29d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO14 0x29d
#endif
#if defined(KEY_MACRO15) || (defined(HAVE_DECL_KEY_MACRO15) && HAVE_DECL_KEY_MACRO15)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO15) == (0x29e), "KEY_MACRO15 != 0x29e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO15 0x29e
#endif
#if defined(KEY_MACRO16) || (defined(HAVE_DECL_KEY_MACRO16) && HAVE_DECL_KEY_MACRO16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO16) == (0x29f), "KEY_MACRO16 != 0x29f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO16 0x29f
#endif
#if defined(KEY_MACRO17) || (defined(HAVE_DECL_KEY_MACRO17) && HAVE_DECL_KEY_MACRO17)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO17) == (0x2a0), "KEY_MACRO17 != 0x2a0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO17 0x2a0
#endif
#if defined(KEY_MACRO18) || (defined(HAVE_DECL_KEY_MACRO18) && HAVE_DECL_KEY_MACRO18)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO18) == (0x2a1), "KEY_MACRO18 != 0x2a1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO18 0x2a1
#endif
#if defined(KEY_MACRO19) || (defined(HAVE_DECL_KEY_MACRO19) && HAVE_DECL_KEY_MACRO19)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO19) == (0x2a2), "KEY_MACRO19 != 0x2a2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO19 0x2a2
#endif
#if defined(KEY_MACRO20) || (defined(HAVE_DECL_KEY_MACRO20) && HAVE_DECL_KEY_MACRO20)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO20) == (0x2a3), "KEY_MACRO20 != 0x2a3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO20 0x2a3
#endif
#if defined(KEY_MACRO21) || (defined(HAVE_DECL_KEY_MACRO21) && HAVE_DECL_KEY_MACRO21)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO21) == (0x2a4), "KEY_MACRO21 != 0x2a4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO21 0x2a4
#endif
#if defined(KEY_MACRO22) || (defined(HAVE_DECL_KEY_MACRO22) && HAVE_DECL_KEY_MACRO22)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO22) == (0x2a5), "KEY_MACRO22 != 0x2a5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO22 0x2a5
#endif
#if defined(KEY_MACRO23) || (defined(HAVE_DECL_KEY_MACRO23) && HAVE_DECL_KEY_MACRO23)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO23) == (0x2a6), "KEY_MACRO23 != 0x2a6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO23 0x2a6
#endif
#if defined(KEY_MACRO24) || (defined(HAVE_DECL_KEY_MACRO24) && HAVE_DECL_KEY_MACRO24)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO24) == (0x2a7), "KEY_MACRO24 != 0x2a7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO24 0x2a7
#endif
#if defined(KEY_MACRO25) || (defined(HAVE_DECL_KEY_MACRO25) && HAVE_DECL_KEY_MACRO25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO25) == (0x2a8), "KEY_MACRO25 != 0x2a8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO25 0x2a8
#endif
#if defined(KEY_MACRO26) || (defined(HAVE_DECL_KEY_MACRO26) && HAVE_DECL_KEY_MACRO26)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO26) == (0x2a9), "KEY_MACRO26 != 0x2a9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO26 0x2a9
#endif
#if defined(KEY_MACRO27) || (defined(HAVE_DECL_KEY_MACRO27) && HAVE_DECL_KEY_MACRO27)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO27) == (0x2aa), "KEY_MACRO27 != 0x2aa");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO27 0x2aa
#endif
#if defined(KEY_MACRO28) || (defined(HAVE_DECL_KEY_MACRO28) && HAVE_DECL_KEY_MACRO28)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO28) == (0x2ab), "KEY_MACRO28 != 0x2ab");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO28 0x2ab
#endif
#if defined(KEY_MACRO29) || (defined(HAVE_DECL_KEY_MACRO29) && HAVE_DECL_KEY_MACRO29)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO29) == (0x2ac), "KEY_MACRO29 != 0x2ac");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO29 0x2ac
#endif
#if defined(KEY_MACRO30) || (defined(HAVE_DECL_KEY_MACRO30) && HAVE_DECL_KEY_MACRO30)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO30) == (0x2ad), "KEY_MACRO30 != 0x2ad");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO30 0x2ad
#endif
#if defined(KEY_MACRO_RECORD_START) || (defined(HAVE_DECL_KEY_MACRO_RECORD_START) && HAVE_DECL_KEY_MACRO_RECORD_START)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO_RECORD_START) == (0x2b0), "KEY_MACRO_RECORD_START != 0x2b0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO_RECORD_START 0x2b0
#endif
#if defined(KEY_MACRO_RECORD_STOP) || (defined(HAVE_DECL_KEY_MACRO_RECORD_STOP) && HAVE_DECL_KEY_MACRO_RECORD_STOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO_RECORD_STOP) == (0x2b1), "KEY_MACRO_RECORD_STOP != 0x2b1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO_RECORD_STOP 0x2b1
#endif
#if defined(KEY_MACRO_PRESET_CYCLE) || (defined(HAVE_DECL_KEY_MACRO_PRESET_CYCLE) && HAVE_DECL_KEY_MACRO_PRESET_CYCLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO_PRESET_CYCLE) == (0x2b2), "KEY_MACRO_PRESET_CYCLE != 0x2b2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO_PRESET_CYCLE 0x2b2
#endif
#if defined(KEY_MACRO_PRESET1) || (defined(HAVE_DECL_KEY_MACRO_PRESET1) && HAVE_DECL_KEY_MACRO_PRESET1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO_PRESET1) == (0x2b3), "KEY_MACRO_PRESET1 != 0x2b3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO_PRESET1 0x2b3
#endif
#if defined(KEY_MACRO_PRESET2) || (defined(HAVE_DECL_KEY_MACRO_PRESET2) && HAVE_DECL_KEY_MACRO_PRESET2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO_PRESET2) == (0x2b4), "KEY_MACRO_PRESET2 != 0x2b4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO_PRESET2 0x2b4
#endif
#if defined(KEY_MACRO_PRESET3) || (defined(HAVE_DECL_KEY_MACRO_PRESET3) && HAVE_DECL_KEY_MACRO_PRESET3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_MACRO_PRESET3) == (0x2b5), "KEY_MACRO_PRESET3 != 0x2b5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_MACRO_PRESET3 0x2b5
#endif
#if defined(KEY_KBD_LCD_MENU1) || (defined(HAVE_DECL_KEY_KBD_LCD_MENU1) && HAVE_DECL_KEY_KBD_LCD_MENU1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBD_LCD_MENU1) == (0x2b8), "KEY_KBD_LCD_MENU1 != 0x2b8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBD_LCD_MENU1 0x2b8
#endif
#if defined(KEY_KBD_LCD_MENU2) || (defined(HAVE_DECL_KEY_KBD_LCD_MENU2) && HAVE_DECL_KEY_KBD_LCD_MENU2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBD_LCD_MENU2) == (0x2b9), "KEY_KBD_LCD_MENU2 != 0x2b9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBD_LCD_MENU2 0x2b9
#endif
#if defined(KEY_KBD_LCD_MENU3) || (defined(HAVE_DECL_KEY_KBD_LCD_MENU3) && HAVE_DECL_KEY_KBD_LCD_MENU3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBD_LCD_MENU3) == (0x2ba), "KEY_KBD_LCD_MENU3 != 0x2ba");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBD_LCD_MENU3 0x2ba
#endif
#if defined(KEY_KBD_LCD_MENU4) || (defined(HAVE_DECL_KEY_KBD_LCD_MENU4) && HAVE_DECL_KEY_KBD_LCD_MENU4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBD_LCD_MENU4) == (0x2bb), "KEY_KBD_LCD_MENU4 != 0x2bb");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBD_LCD_MENU4 0x2bb
#endif
#if defined(KEY_KBD_LCD_MENU5) || (defined(HAVE_DECL_KEY_KBD_LCD_MENU5) && HAVE_DECL_KEY_KBD_LCD_MENU5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEY_KBD_LCD_MENU5) == (0x2bc), "KEY_KBD_LCD_MENU5 != 0x2bc");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEY_KBD_LCD_MENU5 0x2bc
#endif
#if defined(BTN_TRIGGER_HAPPY1) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY1) && HAVE_DECL_BTN_TRIGGER_HAPPY1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY1) == (0x2c0), "BTN_TRIGGER_HAPPY1 != 0x2c0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY1 0x2c0
#endif
#if defined(BTN_TRIGGER_HAPPY2) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY2) && HAVE_DECL_BTN_TRIGGER_HAPPY2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY2) == (0x2c1), "BTN_TRIGGER_HAPPY2 != 0x2c1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY2 0x2c1
#endif
#if defined(BTN_TRIGGER_HAPPY3) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY3) && HAVE_DECL_BTN_TRIGGER_HAPPY3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY3) == (0x2c2), "BTN_TRIGGER_HAPPY3 != 0x2c2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY3 0x2c2
#endif
#if defined(BTN_TRIGGER_HAPPY4) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY4) && HAVE_DECL_BTN_TRIGGER_HAPPY4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY4) == (0x2c3), "BTN_TRIGGER_HAPPY4 != 0x2c3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY4 0x2c3
#endif
#if defined(BTN_TRIGGER_HAPPY5) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY5) && HAVE_DECL_BTN_TRIGGER_HAPPY5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY5) == (0x2c4), "BTN_TRIGGER_HAPPY5 != 0x2c4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY5 0x2c4
#endif
#if defined(BTN_TRIGGER_HAPPY6) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY6) && HAVE_DECL_BTN_TRIGGER_HAPPY6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY6) == (0x2c5), "BTN_TRIGGER_HAPPY6 != 0x2c5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY6 0x2c5
#endif
#if defined(BTN_TRIGGER_HAPPY7) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY7) && HAVE_DECL_BTN_TRIGGER_HAPPY7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY7) == (0x2c6), "BTN_TRIGGER_HAPPY7 != 0x2c6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY7 0x2c6
#endif
#if defined(BTN_TRIGGER_HAPPY8) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY8) && HAVE_DECL_BTN_TRIGGER_HAPPY8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY8) == (0x2c7), "BTN_TRIGGER_HAPPY8 != 0x2c7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY8 0x2c7
#endif
#if defined(BTN_TRIGGER_HAPPY9) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY9) && HAVE_DECL_BTN_TRIGGER_HAPPY9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY9) == (0x2c8), "BTN_TRIGGER_HAPPY9 != 0x2c8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY9 0x2c8
#endif
#if defined(BTN_TRIGGER_HAPPY10) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY10) && HAVE_DECL_BTN_TRIGGER_HAPPY10)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY10) == (0x2c9), "BTN_TRIGGER_HAPPY10 != 0x2c9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY10 0x2c9
#endif
#if defined(BTN_TRIGGER_HAPPY11) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY11) && HAVE_DECL_BTN_TRIGGER_HAPPY11)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY11) == (0x2ca), "BTN_TRIGGER_HAPPY11 != 0x2ca");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY11 0x2ca
#endif
#if defined(BTN_TRIGGER_HAPPY12) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY12) && HAVE_DECL_BTN_TRIGGER_HAPPY12)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY12) == (0x2cb), "BTN_TRIGGER_HAPPY12 != 0x2cb");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY12 0x2cb
#endif
#if defined(BTN_TRIGGER_HAPPY13) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY13) && HAVE_DECL_BTN_TRIGGER_HAPPY13)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY13) == (0x2cc), "BTN_TRIGGER_HAPPY13 != 0x2cc");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY13 0x2cc
#endif
#if defined(BTN_TRIGGER_HAPPY14) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY14) && HAVE_DECL_BTN_TRIGGER_HAPPY14)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY14) == (0x2cd), "BTN_TRIGGER_HAPPY14 != 0x2cd");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY14 0x2cd
#endif
#if defined(BTN_TRIGGER_HAPPY15) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY15) && HAVE_DECL_BTN_TRIGGER_HAPPY15)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY15) == (0x2ce), "BTN_TRIGGER_HAPPY15 != 0x2ce");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY15 0x2ce
#endif
#if defined(BTN_TRIGGER_HAPPY16) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY16) && HAVE_DECL_BTN_TRIGGER_HAPPY16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY16) == (0x2cf), "BTN_TRIGGER_HAPPY16 != 0x2cf");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY16 0x2cf
#endif
#if defined(BTN_TRIGGER_HAPPY17) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY17) && HAVE_DECL_BTN_TRIGGER_HAPPY17)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY17) == (0x2d0), "BTN_TRIGGER_HAPPY17 != 0x2d0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY17 0x2d0
#endif
#if defined(BTN_TRIGGER_HAPPY18) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY18) && HAVE_DECL_BTN_TRIGGER_HAPPY18)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY18) == (0x2d1), "BTN_TRIGGER_HAPPY18 != 0x2d1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY18 0x2d1
#endif
#if defined(BTN_TRIGGER_HAPPY19) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY19) && HAVE_DECL_BTN_TRIGGER_HAPPY19)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY19) == (0x2d2), "BTN_TRIGGER_HAPPY19 != 0x2d2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY19 0x2d2
#endif
#if defined(BTN_TRIGGER_HAPPY20) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY20) && HAVE_DECL_BTN_TRIGGER_HAPPY20)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY20) == (0x2d3), "BTN_TRIGGER_HAPPY20 != 0x2d3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY20 0x2d3
#endif
#if defined(BTN_TRIGGER_HAPPY21) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY21) && HAVE_DECL_BTN_TRIGGER_HAPPY21)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY21) == (0x2d4), "BTN_TRIGGER_HAPPY21 != 0x2d4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY21 0x2d4
#endif
#if defined(BTN_TRIGGER_HAPPY22) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY22) && HAVE_DECL_BTN_TRIGGER_HAPPY22)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY22) == (0x2d5), "BTN_TRIGGER_HAPPY22 != 0x2d5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY22 0x2d5
#endif
#if defined(BTN_TRIGGER_HAPPY23) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY23) && HAVE_DECL_BTN_TRIGGER_HAPPY23)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY23) == (0x2d6), "BTN_TRIGGER_HAPPY23 != 0x2d6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY23 0x2d6
#endif
#if defined(BTN_TRIGGER_HAPPY24) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY24) && HAVE_DECL_BTN_TRIGGER_HAPPY24)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY24) == (0x2d7), "BTN_TRIGGER_HAPPY24 != 0x2d7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY24 0x2d7
#endif
#if defined(BTN_TRIGGER_HAPPY25) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY25) && HAVE_DECL_BTN_TRIGGER_HAPPY25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY25) == (0x2d8), "BTN_TRIGGER_HAPPY25 != 0x2d8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY25 0x2d8
#endif
#if defined(BTN_TRIGGER_HAPPY26) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY26) && HAVE_DECL_BTN_TRIGGER_HAPPY26)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY26) == (0x2d9), "BTN_TRIGGER_HAPPY26 != 0x2d9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY26 0x2d9
#endif
#if defined(BTN_TRIGGER_HAPPY27) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY27) && HAVE_DECL_BTN_TRIGGER_HAPPY27)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY27) == (0x2da), "BTN_TRIGGER_HAPPY27 != 0x2da");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY27 0x2da
#endif
#if defined(BTN_TRIGGER_HAPPY28) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY28) && HAVE_DECL_BTN_TRIGGER_HAPPY28)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY28) == (0x2db), "BTN_TRIGGER_HAPPY28 != 0x2db");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY28 0x2db
#endif
#if defined(BTN_TRIGGER_HAPPY29) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY29) && HAVE_DECL_BTN_TRIGGER_HAPPY29)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY29) == (0x2dc), "BTN_TRIGGER_HAPPY29 != 0x2dc");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY29 0x2dc
#endif
#if defined(BTN_TRIGGER_HAPPY30) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY30) && HAVE_DECL_BTN_TRIGGER_HAPPY30)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY30) == (0x2dd), "BTN_TRIGGER_HAPPY30 != 0x2dd");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY30 0x2dd
#endif
#if defined(BTN_TRIGGER_HAPPY31) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY31) && HAVE_DECL_BTN_TRIGGER_HAPPY31)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY31) == (0x2de), "BTN_TRIGGER_HAPPY31 != 0x2de");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY31 0x2de
#endif
#if defined(BTN_TRIGGER_HAPPY32) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY32) && HAVE_DECL_BTN_TRIGGER_HAPPY32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY32) == (0x2df), "BTN_TRIGGER_HAPPY32 != 0x2df");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY32 0x2df
#endif
#if defined(BTN_TRIGGER_HAPPY33) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY33) && HAVE_DECL_BTN_TRIGGER_HAPPY33)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY33) == (0x2e0), "BTN_TRIGGER_HAPPY33 != 0x2e0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY33 0x2e0
#endif
#if defined(BTN_TRIGGER_HAPPY34) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY34) && HAVE_DECL_BTN_TRIGGER_HAPPY34)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY34) == (0x2e1), "BTN_TRIGGER_HAPPY34 != 0x2e1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY34 0x2e1
#endif
#if defined(BTN_TRIGGER_HAPPY35) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY35) && HAVE_DECL_BTN_TRIGGER_HAPPY35)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY35) == (0x2e2), "BTN_TRIGGER_HAPPY35 != 0x2e2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY35 0x2e2
#endif
#if defined(BTN_TRIGGER_HAPPY36) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY36) && HAVE_DECL_BTN_TRIGGER_HAPPY36)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY36) == (0x2e3), "BTN_TRIGGER_HAPPY36 != 0x2e3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY36 0x2e3
#endif
#if defined(BTN_TRIGGER_HAPPY37) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY37) && HAVE_DECL_BTN_TRIGGER_HAPPY37)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY37) == (0x2e4), "BTN_TRIGGER_HAPPY37 != 0x2e4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY37 0x2e4
#endif
#if defined(BTN_TRIGGER_HAPPY38) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY38) && HAVE_DECL_BTN_TRIGGER_HAPPY38)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY38) == (0x2e5), "BTN_TRIGGER_HAPPY38 != 0x2e5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY38 0x2e5
#endif
#if defined(BTN_TRIGGER_HAPPY39) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY39) && HAVE_DECL_BTN_TRIGGER_HAPPY39)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY39) == (0x2e6), "BTN_TRIGGER_HAPPY39 != 0x2e6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY39 0x2e6
#endif
#if defined(BTN_TRIGGER_HAPPY40) || (defined(HAVE_DECL_BTN_TRIGGER_HAPPY40) && HAVE_DECL_BTN_TRIGGER_HAPPY40)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTN_TRIGGER_HAPPY40) == (0x2e7), "BTN_TRIGGER_HAPPY40 != 0x2e7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTN_TRIGGER_HAPPY40 0x2e7
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat evdev_keycode in mpers mode

# else

static const struct xlat_data evdev_keycode_xdata[] = {

 [KEY_RESERVED] = XLAT(KEY_RESERVED),
 #define XLAT_VAL_0 ((unsigned) (KEY_RESERVED))
 #define XLAT_STR_0 STRINGIFY(KEY_RESERVED)
 [KEY_ESC] = XLAT(KEY_ESC),
 #define XLAT_VAL_1 ((unsigned) (KEY_ESC))
 #define XLAT_STR_1 STRINGIFY(KEY_ESC)
 [KEY_1] = XLAT(KEY_1),
 #define XLAT_VAL_2 ((unsigned) (KEY_1))
 #define XLAT_STR_2 STRINGIFY(KEY_1)
 [KEY_2] = XLAT(KEY_2),
 #define XLAT_VAL_3 ((unsigned) (KEY_2))
 #define XLAT_STR_3 STRINGIFY(KEY_2)
 [KEY_3] = XLAT(KEY_3),
 #define XLAT_VAL_4 ((unsigned) (KEY_3))
 #define XLAT_STR_4 STRINGIFY(KEY_3)
 [KEY_4] = XLAT(KEY_4),
 #define XLAT_VAL_5 ((unsigned) (KEY_4))
 #define XLAT_STR_5 STRINGIFY(KEY_4)
 [KEY_5] = XLAT(KEY_5),
 #define XLAT_VAL_6 ((unsigned) (KEY_5))
 #define XLAT_STR_6 STRINGIFY(KEY_5)
 [KEY_6] = XLAT(KEY_6),
 #define XLAT_VAL_7 ((unsigned) (KEY_6))
 #define XLAT_STR_7 STRINGIFY(KEY_6)
 [KEY_7] = XLAT(KEY_7),
 #define XLAT_VAL_8 ((unsigned) (KEY_7))
 #define XLAT_STR_8 STRINGIFY(KEY_7)
 [KEY_8] = XLAT(KEY_8),
 #define XLAT_VAL_9 ((unsigned) (KEY_8))
 #define XLAT_STR_9 STRINGIFY(KEY_8)
 [KEY_9] = XLAT(KEY_9),
 #define XLAT_VAL_10 ((unsigned) (KEY_9))
 #define XLAT_STR_10 STRINGIFY(KEY_9)
 [KEY_0] = XLAT(KEY_0),
 #define XLAT_VAL_11 ((unsigned) (KEY_0))
 #define XLAT_STR_11 STRINGIFY(KEY_0)
 [KEY_MINUS] = XLAT(KEY_MINUS),
 #define XLAT_VAL_12 ((unsigned) (KEY_MINUS))
 #define XLAT_STR_12 STRINGIFY(KEY_MINUS)
 [KEY_EQUAL] = XLAT(KEY_EQUAL),
 #define XLAT_VAL_13 ((unsigned) (KEY_EQUAL))
 #define XLAT_STR_13 STRINGIFY(KEY_EQUAL)
 [KEY_BACKSPACE] = XLAT(KEY_BACKSPACE),
 #define XLAT_VAL_14 ((unsigned) (KEY_BACKSPACE))
 #define XLAT_STR_14 STRINGIFY(KEY_BACKSPACE)
 [KEY_TAB] = XLAT(KEY_TAB),
 #define XLAT_VAL_15 ((unsigned) (KEY_TAB))
 #define XLAT_STR_15 STRINGIFY(KEY_TAB)
 [KEY_Q] = XLAT(KEY_Q),
 #define XLAT_VAL_16 ((unsigned) (KEY_Q))
 #define XLAT_STR_16 STRINGIFY(KEY_Q)
 [KEY_W] = XLAT(KEY_W),
 #define XLAT_VAL_17 ((unsigned) (KEY_W))
 #define XLAT_STR_17 STRINGIFY(KEY_W)
 [KEY_E] = XLAT(KEY_E),
 #define XLAT_VAL_18 ((unsigned) (KEY_E))
 #define XLAT_STR_18 STRINGIFY(KEY_E)
 [KEY_R] = XLAT(KEY_R),
 #define XLAT_VAL_19 ((unsigned) (KEY_R))
 #define XLAT_STR_19 STRINGIFY(KEY_R)
 [KEY_T] = XLAT(KEY_T),
 #define XLAT_VAL_20 ((unsigned) (KEY_T))
 #define XLAT_STR_20 STRINGIFY(KEY_T)
 [KEY_Y] = XLAT(KEY_Y),
 #define XLAT_VAL_21 ((unsigned) (KEY_Y))
 #define XLAT_STR_21 STRINGIFY(KEY_Y)
 [KEY_U] = XLAT(KEY_U),
 #define XLAT_VAL_22 ((unsigned) (KEY_U))
 #define XLAT_STR_22 STRINGIFY(KEY_U)
 [KEY_I] = XLAT(KEY_I),
 #define XLAT_VAL_23 ((unsigned) (KEY_I))
 #define XLAT_STR_23 STRINGIFY(KEY_I)
 [KEY_O] = XLAT(KEY_O),
 #define XLAT_VAL_24 ((unsigned) (KEY_O))
 #define XLAT_STR_24 STRINGIFY(KEY_O)
 [KEY_P] = XLAT(KEY_P),
 #define XLAT_VAL_25 ((unsigned) (KEY_P))
 #define XLAT_STR_25 STRINGIFY(KEY_P)
 [KEY_LEFTBRACE] = XLAT(KEY_LEFTBRACE),
 #define XLAT_VAL_26 ((unsigned) (KEY_LEFTBRACE))
 #define XLAT_STR_26 STRINGIFY(KEY_LEFTBRACE)
 [KEY_RIGHTBRACE] = XLAT(KEY_RIGHTBRACE),
 #define XLAT_VAL_27 ((unsigned) (KEY_RIGHTBRACE))
 #define XLAT_STR_27 STRINGIFY(KEY_RIGHTBRACE)
 [KEY_ENTER] = XLAT(KEY_ENTER),
 #define XLAT_VAL_28 ((unsigned) (KEY_ENTER))
 #define XLAT_STR_28 STRINGIFY(KEY_ENTER)
 [KEY_LEFTCTRL] = XLAT(KEY_LEFTCTRL),
 #define XLAT_VAL_29 ((unsigned) (KEY_LEFTCTRL))
 #define XLAT_STR_29 STRINGIFY(KEY_LEFTCTRL)
 [KEY_A] = XLAT(KEY_A),
 #define XLAT_VAL_30 ((unsigned) (KEY_A))
 #define XLAT_STR_30 STRINGIFY(KEY_A)
 [KEY_S] = XLAT(KEY_S),
 #define XLAT_VAL_31 ((unsigned) (KEY_S))
 #define XLAT_STR_31 STRINGIFY(KEY_S)
 [KEY_D] = XLAT(KEY_D),
 #define XLAT_VAL_32 ((unsigned) (KEY_D))
 #define XLAT_STR_32 STRINGIFY(KEY_D)
 [KEY_F] = XLAT(KEY_F),
 #define XLAT_VAL_33 ((unsigned) (KEY_F))
 #define XLAT_STR_33 STRINGIFY(KEY_F)
 [KEY_G] = XLAT(KEY_G),
 #define XLAT_VAL_34 ((unsigned) (KEY_G))
 #define XLAT_STR_34 STRINGIFY(KEY_G)
 [KEY_H] = XLAT(KEY_H),
 #define XLAT_VAL_35 ((unsigned) (KEY_H))
 #define XLAT_STR_35 STRINGIFY(KEY_H)
 [KEY_J] = XLAT(KEY_J),
 #define XLAT_VAL_36 ((unsigned) (KEY_J))
 #define XLAT_STR_36 STRINGIFY(KEY_J)
 [KEY_K] = XLAT(KEY_K),
 #define XLAT_VAL_37 ((unsigned) (KEY_K))
 #define XLAT_STR_37 STRINGIFY(KEY_K)
 [KEY_L] = XLAT(KEY_L),
 #define XLAT_VAL_38 ((unsigned) (KEY_L))
 #define XLAT_STR_38 STRINGIFY(KEY_L)
 [KEY_SEMICOLON] = XLAT(KEY_SEMICOLON),
 #define XLAT_VAL_39 ((unsigned) (KEY_SEMICOLON))
 #define XLAT_STR_39 STRINGIFY(KEY_SEMICOLON)
 [KEY_APOSTROPHE] = XLAT(KEY_APOSTROPHE),
 #define XLAT_VAL_40 ((unsigned) (KEY_APOSTROPHE))
 #define XLAT_STR_40 STRINGIFY(KEY_APOSTROPHE)
 [KEY_GRAVE] = XLAT(KEY_GRAVE),
 #define XLAT_VAL_41 ((unsigned) (KEY_GRAVE))
 #define XLAT_STR_41 STRINGIFY(KEY_GRAVE)
 [KEY_LEFTSHIFT] = XLAT(KEY_LEFTSHIFT),
 #define XLAT_VAL_42 ((unsigned) (KEY_LEFTSHIFT))
 #define XLAT_STR_42 STRINGIFY(KEY_LEFTSHIFT)
 [KEY_BACKSLASH] = XLAT(KEY_BACKSLASH),
 #define XLAT_VAL_43 ((unsigned) (KEY_BACKSLASH))
 #define XLAT_STR_43 STRINGIFY(KEY_BACKSLASH)
 [KEY_Z] = XLAT(KEY_Z),
 #define XLAT_VAL_44 ((unsigned) (KEY_Z))
 #define XLAT_STR_44 STRINGIFY(KEY_Z)
 [KEY_X] = XLAT(KEY_X),
 #define XLAT_VAL_45 ((unsigned) (KEY_X))
 #define XLAT_STR_45 STRINGIFY(KEY_X)
 [KEY_C] = XLAT(KEY_C),
 #define XLAT_VAL_46 ((unsigned) (KEY_C))
 #define XLAT_STR_46 STRINGIFY(KEY_C)
 [KEY_V] = XLAT(KEY_V),
 #define XLAT_VAL_47 ((unsigned) (KEY_V))
 #define XLAT_STR_47 STRINGIFY(KEY_V)
 [KEY_B] = XLAT(KEY_B),
 #define XLAT_VAL_48 ((unsigned) (KEY_B))
 #define XLAT_STR_48 STRINGIFY(KEY_B)
 [KEY_N] = XLAT(KEY_N),
 #define XLAT_VAL_49 ((unsigned) (KEY_N))
 #define XLAT_STR_49 STRINGIFY(KEY_N)
 [KEY_M] = XLAT(KEY_M),
 #define XLAT_VAL_50 ((unsigned) (KEY_M))
 #define XLAT_STR_50 STRINGIFY(KEY_M)
 [KEY_COMMA] = XLAT(KEY_COMMA),
 #define XLAT_VAL_51 ((unsigned) (KEY_COMMA))
 #define XLAT_STR_51 STRINGIFY(KEY_COMMA)
 [KEY_DOT] = XLAT(KEY_DOT),
 #define XLAT_VAL_52 ((unsigned) (KEY_DOT))
 #define XLAT_STR_52 STRINGIFY(KEY_DOT)
 [KEY_SLASH] = XLAT(KEY_SLASH),
 #define XLAT_VAL_53 ((unsigned) (KEY_SLASH))
 #define XLAT_STR_53 STRINGIFY(KEY_SLASH)
 [KEY_RIGHTSHIFT] = XLAT(KEY_RIGHTSHIFT),
 #define XLAT_VAL_54 ((unsigned) (KEY_RIGHTSHIFT))
 #define XLAT_STR_54 STRINGIFY(KEY_RIGHTSHIFT)
 [KEY_KPASTERISK] = XLAT(KEY_KPASTERISK),
 #define XLAT_VAL_55 ((unsigned) (KEY_KPASTERISK))
 #define XLAT_STR_55 STRINGIFY(KEY_KPASTERISK)
 [KEY_LEFTALT] = XLAT(KEY_LEFTALT),
 #define XLAT_VAL_56 ((unsigned) (KEY_LEFTALT))
 #define XLAT_STR_56 STRINGIFY(KEY_LEFTALT)
 [KEY_SPACE] = XLAT(KEY_SPACE),
 #define XLAT_VAL_57 ((unsigned) (KEY_SPACE))
 #define XLAT_STR_57 STRINGIFY(KEY_SPACE)
 [KEY_CAPSLOCK] = XLAT(KEY_CAPSLOCK),
 #define XLAT_VAL_58 ((unsigned) (KEY_CAPSLOCK))
 #define XLAT_STR_58 STRINGIFY(KEY_CAPSLOCK)
 [KEY_F1] = XLAT(KEY_F1),
 #define XLAT_VAL_59 ((unsigned) (KEY_F1))
 #define XLAT_STR_59 STRINGIFY(KEY_F1)
 [KEY_F2] = XLAT(KEY_F2),
 #define XLAT_VAL_60 ((unsigned) (KEY_F2))
 #define XLAT_STR_60 STRINGIFY(KEY_F2)
 [KEY_F3] = XLAT(KEY_F3),
 #define XLAT_VAL_61 ((unsigned) (KEY_F3))
 #define XLAT_STR_61 STRINGIFY(KEY_F3)
 [KEY_F4] = XLAT(KEY_F4),
 #define XLAT_VAL_62 ((unsigned) (KEY_F4))
 #define XLAT_STR_62 STRINGIFY(KEY_F4)
 [KEY_F5] = XLAT(KEY_F5),
 #define XLAT_VAL_63 ((unsigned) (KEY_F5))
 #define XLAT_STR_63 STRINGIFY(KEY_F5)
 [KEY_F6] = XLAT(KEY_F6),
 #define XLAT_VAL_64 ((unsigned) (KEY_F6))
 #define XLAT_STR_64 STRINGIFY(KEY_F6)
 [KEY_F7] = XLAT(KEY_F7),
 #define XLAT_VAL_65 ((unsigned) (KEY_F7))
 #define XLAT_STR_65 STRINGIFY(KEY_F7)
 [KEY_F8] = XLAT(KEY_F8),
 #define XLAT_VAL_66 ((unsigned) (KEY_F8))
 #define XLAT_STR_66 STRINGIFY(KEY_F8)
 [KEY_F9] = XLAT(KEY_F9),
 #define XLAT_VAL_67 ((unsigned) (KEY_F9))
 #define XLAT_STR_67 STRINGIFY(KEY_F9)
 [KEY_F10] = XLAT(KEY_F10),
 #define XLAT_VAL_68 ((unsigned) (KEY_F10))
 #define XLAT_STR_68 STRINGIFY(KEY_F10)
 [KEY_NUMLOCK] = XLAT(KEY_NUMLOCK),
 #define XLAT_VAL_69 ((unsigned) (KEY_NUMLOCK))
 #define XLAT_STR_69 STRINGIFY(KEY_NUMLOCK)
 [KEY_SCROLLLOCK] = XLAT(KEY_SCROLLLOCK),
 #define XLAT_VAL_70 ((unsigned) (KEY_SCROLLLOCK))
 #define XLAT_STR_70 STRINGIFY(KEY_SCROLLLOCK)
 [KEY_KP7] = XLAT(KEY_KP7),
 #define XLAT_VAL_71 ((unsigned) (KEY_KP7))
 #define XLAT_STR_71 STRINGIFY(KEY_KP7)
 [KEY_KP8] = XLAT(KEY_KP8),
 #define XLAT_VAL_72 ((unsigned) (KEY_KP8))
 #define XLAT_STR_72 STRINGIFY(KEY_KP8)
 [KEY_KP9] = XLAT(KEY_KP9),
 #define XLAT_VAL_73 ((unsigned) (KEY_KP9))
 #define XLAT_STR_73 STRINGIFY(KEY_KP9)
 [KEY_KPMINUS] = XLAT(KEY_KPMINUS),
 #define XLAT_VAL_74 ((unsigned) (KEY_KPMINUS))
 #define XLAT_STR_74 STRINGIFY(KEY_KPMINUS)
 [KEY_KP4] = XLAT(KEY_KP4),
 #define XLAT_VAL_75 ((unsigned) (KEY_KP4))
 #define XLAT_STR_75 STRINGIFY(KEY_KP4)
 [KEY_KP5] = XLAT(KEY_KP5),
 #define XLAT_VAL_76 ((unsigned) (KEY_KP5))
 #define XLAT_STR_76 STRINGIFY(KEY_KP5)
 [KEY_KP6] = XLAT(KEY_KP6),
 #define XLAT_VAL_77 ((unsigned) (KEY_KP6))
 #define XLAT_STR_77 STRINGIFY(KEY_KP6)
 [KEY_KPPLUS] = XLAT(KEY_KPPLUS),
 #define XLAT_VAL_78 ((unsigned) (KEY_KPPLUS))
 #define XLAT_STR_78 STRINGIFY(KEY_KPPLUS)
 [KEY_KP1] = XLAT(KEY_KP1),
 #define XLAT_VAL_79 ((unsigned) (KEY_KP1))
 #define XLAT_STR_79 STRINGIFY(KEY_KP1)
 [KEY_KP2] = XLAT(KEY_KP2),
 #define XLAT_VAL_80 ((unsigned) (KEY_KP2))
 #define XLAT_STR_80 STRINGIFY(KEY_KP2)
 [KEY_KP3] = XLAT(KEY_KP3),
 #define XLAT_VAL_81 ((unsigned) (KEY_KP3))
 #define XLAT_STR_81 STRINGIFY(KEY_KP3)
 [KEY_KP0] = XLAT(KEY_KP0),
 #define XLAT_VAL_82 ((unsigned) (KEY_KP0))
 #define XLAT_STR_82 STRINGIFY(KEY_KP0)
 [KEY_KPDOT] = XLAT(KEY_KPDOT),
 #define XLAT_VAL_83 ((unsigned) (KEY_KPDOT))
 #define XLAT_STR_83 STRINGIFY(KEY_KPDOT)

 [KEY_ZENKAKUHANKAKU] = XLAT(KEY_ZENKAKUHANKAKU),
 #define XLAT_VAL_84 ((unsigned) (KEY_ZENKAKUHANKAKU))
 #define XLAT_STR_84 STRINGIFY(KEY_ZENKAKUHANKAKU)
 [KEY_102ND] = XLAT(KEY_102ND),
 #define XLAT_VAL_85 ((unsigned) (KEY_102ND))
 #define XLAT_STR_85 STRINGIFY(KEY_102ND)
 [KEY_F11] = XLAT(KEY_F11),
 #define XLAT_VAL_86 ((unsigned) (KEY_F11))
 #define XLAT_STR_86 STRINGIFY(KEY_F11)
 [KEY_F12] = XLAT(KEY_F12),
 #define XLAT_VAL_87 ((unsigned) (KEY_F12))
 #define XLAT_STR_87 STRINGIFY(KEY_F12)
 [KEY_RO] = XLAT(KEY_RO),
 #define XLAT_VAL_88 ((unsigned) (KEY_RO))
 #define XLAT_STR_88 STRINGIFY(KEY_RO)
 [KEY_KATAKANA] = XLAT(KEY_KATAKANA),
 #define XLAT_VAL_89 ((unsigned) (KEY_KATAKANA))
 #define XLAT_STR_89 STRINGIFY(KEY_KATAKANA)
 [KEY_HIRAGANA] = XLAT(KEY_HIRAGANA),
 #define XLAT_VAL_90 ((unsigned) (KEY_HIRAGANA))
 #define XLAT_STR_90 STRINGIFY(KEY_HIRAGANA)
 [KEY_HENKAN] = XLAT(KEY_HENKAN),
 #define XLAT_VAL_91 ((unsigned) (KEY_HENKAN))
 #define XLAT_STR_91 STRINGIFY(KEY_HENKAN)
 [KEY_KATAKANAHIRAGANA] = XLAT(KEY_KATAKANAHIRAGANA),
 #define XLAT_VAL_92 ((unsigned) (KEY_KATAKANAHIRAGANA))
 #define XLAT_STR_92 STRINGIFY(KEY_KATAKANAHIRAGANA)
 [KEY_MUHENKAN] = XLAT(KEY_MUHENKAN),
 #define XLAT_VAL_93 ((unsigned) (KEY_MUHENKAN))
 #define XLAT_STR_93 STRINGIFY(KEY_MUHENKAN)
 [KEY_KPJPCOMMA] = XLAT(KEY_KPJPCOMMA),
 #define XLAT_VAL_94 ((unsigned) (KEY_KPJPCOMMA))
 #define XLAT_STR_94 STRINGIFY(KEY_KPJPCOMMA)
 [KEY_KPENTER] = XLAT(KEY_KPENTER),
 #define XLAT_VAL_95 ((unsigned) (KEY_KPENTER))
 #define XLAT_STR_95 STRINGIFY(KEY_KPENTER)
 [KEY_RIGHTCTRL] = XLAT(KEY_RIGHTCTRL),
 #define XLAT_VAL_96 ((unsigned) (KEY_RIGHTCTRL))
 #define XLAT_STR_96 STRINGIFY(KEY_RIGHTCTRL)
 [KEY_KPSLASH] = XLAT(KEY_KPSLASH),
 #define XLAT_VAL_97 ((unsigned) (KEY_KPSLASH))
 #define XLAT_STR_97 STRINGIFY(KEY_KPSLASH)
 [KEY_SYSRQ] = XLAT(KEY_SYSRQ),
 #define XLAT_VAL_98 ((unsigned) (KEY_SYSRQ))
 #define XLAT_STR_98 STRINGIFY(KEY_SYSRQ)
 [KEY_RIGHTALT] = XLAT(KEY_RIGHTALT),
 #define XLAT_VAL_99 ((unsigned) (KEY_RIGHTALT))
 #define XLAT_STR_99 STRINGIFY(KEY_RIGHTALT)
 [KEY_LINEFEED] = XLAT(KEY_LINEFEED),
 #define XLAT_VAL_100 ((unsigned) (KEY_LINEFEED))
 #define XLAT_STR_100 STRINGIFY(KEY_LINEFEED)
 [KEY_HOME] = XLAT(KEY_HOME),
 #define XLAT_VAL_101 ((unsigned) (KEY_HOME))
 #define XLAT_STR_101 STRINGIFY(KEY_HOME)
 [KEY_UP] = XLAT(KEY_UP),
 #define XLAT_VAL_102 ((unsigned) (KEY_UP))
 #define XLAT_STR_102 STRINGIFY(KEY_UP)
 [KEY_PAGEUP] = XLAT(KEY_PAGEUP),
 #define XLAT_VAL_103 ((unsigned) (KEY_PAGEUP))
 #define XLAT_STR_103 STRINGIFY(KEY_PAGEUP)
 [KEY_LEFT] = XLAT(KEY_LEFT),
 #define XLAT_VAL_104 ((unsigned) (KEY_LEFT))
 #define XLAT_STR_104 STRINGIFY(KEY_LEFT)
 [KEY_RIGHT] = XLAT(KEY_RIGHT),
 #define XLAT_VAL_105 ((unsigned) (KEY_RIGHT))
 #define XLAT_STR_105 STRINGIFY(KEY_RIGHT)
 [KEY_END] = XLAT(KEY_END),
 #define XLAT_VAL_106 ((unsigned) (KEY_END))
 #define XLAT_STR_106 STRINGIFY(KEY_END)
 [KEY_DOWN] = XLAT(KEY_DOWN),
 #define XLAT_VAL_107 ((unsigned) (KEY_DOWN))
 #define XLAT_STR_107 STRINGIFY(KEY_DOWN)
 [KEY_PAGEDOWN] = XLAT(KEY_PAGEDOWN),
 #define XLAT_VAL_108 ((unsigned) (KEY_PAGEDOWN))
 #define XLAT_STR_108 STRINGIFY(KEY_PAGEDOWN)
 [KEY_INSERT] = XLAT(KEY_INSERT),
 #define XLAT_VAL_109 ((unsigned) (KEY_INSERT))
 #define XLAT_STR_109 STRINGIFY(KEY_INSERT)
 [KEY_DELETE] = XLAT(KEY_DELETE),
 #define XLAT_VAL_110 ((unsigned) (KEY_DELETE))
 #define XLAT_STR_110 STRINGIFY(KEY_DELETE)
 [KEY_MACRO] = XLAT(KEY_MACRO),
 #define XLAT_VAL_111 ((unsigned) (KEY_MACRO))
 #define XLAT_STR_111 STRINGIFY(KEY_MACRO)
 [KEY_MUTE] = XLAT(KEY_MUTE),
 #define XLAT_VAL_112 ((unsigned) (KEY_MUTE))
 #define XLAT_STR_112 STRINGIFY(KEY_MUTE)
 [KEY_VOLUMEDOWN] = XLAT(KEY_VOLUMEDOWN),
 #define XLAT_VAL_113 ((unsigned) (KEY_VOLUMEDOWN))
 #define XLAT_STR_113 STRINGIFY(KEY_VOLUMEDOWN)
 [KEY_VOLUMEUP] = XLAT(KEY_VOLUMEUP),
 #define XLAT_VAL_114 ((unsigned) (KEY_VOLUMEUP))
 #define XLAT_STR_114 STRINGIFY(KEY_VOLUMEUP)
 [KEY_POWER] = XLAT(KEY_POWER),
 #define XLAT_VAL_115 ((unsigned) (KEY_POWER))
 #define XLAT_STR_115 STRINGIFY(KEY_POWER)
 [KEY_KPEQUAL] = XLAT(KEY_KPEQUAL),
 #define XLAT_VAL_116 ((unsigned) (KEY_KPEQUAL))
 #define XLAT_STR_116 STRINGIFY(KEY_KPEQUAL)
 [KEY_KPPLUSMINUS] = XLAT(KEY_KPPLUSMINUS),
 #define XLAT_VAL_117 ((unsigned) (KEY_KPPLUSMINUS))
 #define XLAT_STR_117 STRINGIFY(KEY_KPPLUSMINUS)
 [KEY_PAUSE] = XLAT(KEY_PAUSE),
 #define XLAT_VAL_118 ((unsigned) (KEY_PAUSE))
 #define XLAT_STR_118 STRINGIFY(KEY_PAUSE)
 [KEY_SCALE] = XLAT(KEY_SCALE),
 #define XLAT_VAL_119 ((unsigned) (KEY_SCALE))
 #define XLAT_STR_119 STRINGIFY(KEY_SCALE)

 [KEY_KPCOMMA] = XLAT(KEY_KPCOMMA),
 #define XLAT_VAL_120 ((unsigned) (KEY_KPCOMMA))
 #define XLAT_STR_120 STRINGIFY(KEY_KPCOMMA)
 [KEY_HANGEUL] = XLAT(KEY_HANGEUL),
 #define XLAT_VAL_121 ((unsigned) (KEY_HANGEUL))
 #define XLAT_STR_121 STRINGIFY(KEY_HANGEUL)
 [KEY_HANJA] = XLAT(KEY_HANJA),
 #define XLAT_VAL_122 ((unsigned) (KEY_HANJA))
 #define XLAT_STR_122 STRINGIFY(KEY_HANJA)
 [KEY_YEN] = XLAT(KEY_YEN),
 #define XLAT_VAL_123 ((unsigned) (KEY_YEN))
 #define XLAT_STR_123 STRINGIFY(KEY_YEN)
 [KEY_LEFTMETA] = XLAT(KEY_LEFTMETA),
 #define XLAT_VAL_124 ((unsigned) (KEY_LEFTMETA))
 #define XLAT_STR_124 STRINGIFY(KEY_LEFTMETA)
 [KEY_RIGHTMETA] = XLAT(KEY_RIGHTMETA),
 #define XLAT_VAL_125 ((unsigned) (KEY_RIGHTMETA))
 #define XLAT_STR_125 STRINGIFY(KEY_RIGHTMETA)
 [KEY_COMPOSE] = XLAT(KEY_COMPOSE),
 #define XLAT_VAL_126 ((unsigned) (KEY_COMPOSE))
 #define XLAT_STR_126 STRINGIFY(KEY_COMPOSE)

 [KEY_STOP] = XLAT(KEY_STOP),
 #define XLAT_VAL_127 ((unsigned) (KEY_STOP))
 #define XLAT_STR_127 STRINGIFY(KEY_STOP)
 [KEY_AGAIN] = XLAT(KEY_AGAIN),
 #define XLAT_VAL_128 ((unsigned) (KEY_AGAIN))
 #define XLAT_STR_128 STRINGIFY(KEY_AGAIN)
 [KEY_PROPS] = XLAT(KEY_PROPS),
 #define XLAT_VAL_129 ((unsigned) (KEY_PROPS))
 #define XLAT_STR_129 STRINGIFY(KEY_PROPS)
 [KEY_UNDO] = XLAT(KEY_UNDO),
 #define XLAT_VAL_130 ((unsigned) (KEY_UNDO))
 #define XLAT_STR_130 STRINGIFY(KEY_UNDO)
 [KEY_FRONT] = XLAT(KEY_FRONT),
 #define XLAT_VAL_131 ((unsigned) (KEY_FRONT))
 #define XLAT_STR_131 STRINGIFY(KEY_FRONT)
 [KEY_COPY] = XLAT(KEY_COPY),
 #define XLAT_VAL_132 ((unsigned) (KEY_COPY))
 #define XLAT_STR_132 STRINGIFY(KEY_COPY)
 [KEY_OPEN] = XLAT(KEY_OPEN),
 #define XLAT_VAL_133 ((unsigned) (KEY_OPEN))
 #define XLAT_STR_133 STRINGIFY(KEY_OPEN)
 [KEY_PASTE] = XLAT(KEY_PASTE),
 #define XLAT_VAL_134 ((unsigned) (KEY_PASTE))
 #define XLAT_STR_134 STRINGIFY(KEY_PASTE)
 [KEY_FIND] = XLAT(KEY_FIND),
 #define XLAT_VAL_135 ((unsigned) (KEY_FIND))
 #define XLAT_STR_135 STRINGIFY(KEY_FIND)
 [KEY_CUT] = XLAT(KEY_CUT),
 #define XLAT_VAL_136 ((unsigned) (KEY_CUT))
 #define XLAT_STR_136 STRINGIFY(KEY_CUT)
 [KEY_HELP] = XLAT(KEY_HELP),
 #define XLAT_VAL_137 ((unsigned) (KEY_HELP))
 #define XLAT_STR_137 STRINGIFY(KEY_HELP)
 [KEY_MENU] = XLAT(KEY_MENU),
 #define XLAT_VAL_138 ((unsigned) (KEY_MENU))
 #define XLAT_STR_138 STRINGIFY(KEY_MENU)
 [KEY_CALC] = XLAT(KEY_CALC),
 #define XLAT_VAL_139 ((unsigned) (KEY_CALC))
 #define XLAT_STR_139 STRINGIFY(KEY_CALC)
 [KEY_SETUP] = XLAT(KEY_SETUP),
 #define XLAT_VAL_140 ((unsigned) (KEY_SETUP))
 #define XLAT_STR_140 STRINGIFY(KEY_SETUP)
 [KEY_SLEEP] = XLAT(KEY_SLEEP),
 #define XLAT_VAL_141 ((unsigned) (KEY_SLEEP))
 #define XLAT_STR_141 STRINGIFY(KEY_SLEEP)
 [KEY_WAKEUP] = XLAT(KEY_WAKEUP),
 #define XLAT_VAL_142 ((unsigned) (KEY_WAKEUP))
 #define XLAT_STR_142 STRINGIFY(KEY_WAKEUP)
 [KEY_FILE] = XLAT(KEY_FILE),
 #define XLAT_VAL_143 ((unsigned) (KEY_FILE))
 #define XLAT_STR_143 STRINGIFY(KEY_FILE)
 [KEY_SENDFILE] = XLAT(KEY_SENDFILE),
 #define XLAT_VAL_144 ((unsigned) (KEY_SENDFILE))
 #define XLAT_STR_144 STRINGIFY(KEY_SENDFILE)
 [KEY_DELETEFILE] = XLAT(KEY_DELETEFILE),
 #define XLAT_VAL_145 ((unsigned) (KEY_DELETEFILE))
 #define XLAT_STR_145 STRINGIFY(KEY_DELETEFILE)
 [KEY_XFER] = XLAT(KEY_XFER),
 #define XLAT_VAL_146 ((unsigned) (KEY_XFER))
 #define XLAT_STR_146 STRINGIFY(KEY_XFER)
 [KEY_PROG1] = XLAT(KEY_PROG1),
 #define XLAT_VAL_147 ((unsigned) (KEY_PROG1))
 #define XLAT_STR_147 STRINGIFY(KEY_PROG1)
 [KEY_PROG2] = XLAT(KEY_PROG2),
 #define XLAT_VAL_148 ((unsigned) (KEY_PROG2))
 #define XLAT_STR_148 STRINGIFY(KEY_PROG2)
 [KEY_WWW] = XLAT(KEY_WWW),
 #define XLAT_VAL_149 ((unsigned) (KEY_WWW))
 #define XLAT_STR_149 STRINGIFY(KEY_WWW)
 [KEY_MSDOS] = XLAT(KEY_MSDOS),
 #define XLAT_VAL_150 ((unsigned) (KEY_MSDOS))
 #define XLAT_STR_150 STRINGIFY(KEY_MSDOS)
 [KEY_COFFEE] = XLAT(KEY_COFFEE),
 #define XLAT_VAL_151 ((unsigned) (KEY_COFFEE))
 #define XLAT_STR_151 STRINGIFY(KEY_COFFEE)
 [KEY_ROTATE_DISPLAY] = XLAT(KEY_ROTATE_DISPLAY),
 #define XLAT_VAL_152 ((unsigned) (KEY_ROTATE_DISPLAY))
 #define XLAT_STR_152 STRINGIFY(KEY_ROTATE_DISPLAY)
 [KEY_CYCLEWINDOWS] = XLAT(KEY_CYCLEWINDOWS),
 #define XLAT_VAL_153 ((unsigned) (KEY_CYCLEWINDOWS))
 #define XLAT_STR_153 STRINGIFY(KEY_CYCLEWINDOWS)
 [KEY_MAIL] = XLAT(KEY_MAIL),
 #define XLAT_VAL_154 ((unsigned) (KEY_MAIL))
 #define XLAT_STR_154 STRINGIFY(KEY_MAIL)
 [KEY_BOOKMARKS] = XLAT(KEY_BOOKMARKS),
 #define XLAT_VAL_155 ((unsigned) (KEY_BOOKMARKS))
 #define XLAT_STR_155 STRINGIFY(KEY_BOOKMARKS)
 [KEY_COMPUTER] = XLAT(KEY_COMPUTER),
 #define XLAT_VAL_156 ((unsigned) (KEY_COMPUTER))
 #define XLAT_STR_156 STRINGIFY(KEY_COMPUTER)
 [KEY_BACK] = XLAT(KEY_BACK),
 #define XLAT_VAL_157 ((unsigned) (KEY_BACK))
 #define XLAT_STR_157 STRINGIFY(KEY_BACK)
 [KEY_FORWARD] = XLAT(KEY_FORWARD),
 #define XLAT_VAL_158 ((unsigned) (KEY_FORWARD))
 #define XLAT_STR_158 STRINGIFY(KEY_FORWARD)
 [KEY_CLOSECD] = XLAT(KEY_CLOSECD),
 #define XLAT_VAL_159 ((unsigned) (KEY_CLOSECD))
 #define XLAT_STR_159 STRINGIFY(KEY_CLOSECD)
 [KEY_EJECTCD] = XLAT(KEY_EJECTCD),
 #define XLAT_VAL_160 ((unsigned) (KEY_EJECTCD))
 #define XLAT_STR_160 STRINGIFY(KEY_EJECTCD)
 [KEY_EJECTCLOSECD] = XLAT(KEY_EJECTCLOSECD),
 #define XLAT_VAL_161 ((unsigned) (KEY_EJECTCLOSECD))
 #define XLAT_STR_161 STRINGIFY(KEY_EJECTCLOSECD)
 [KEY_NEXTSONG] = XLAT(KEY_NEXTSONG),
 #define XLAT_VAL_162 ((unsigned) (KEY_NEXTSONG))
 #define XLAT_STR_162 STRINGIFY(KEY_NEXTSONG)
 [KEY_PLAYPAUSE] = XLAT(KEY_PLAYPAUSE),
 #define XLAT_VAL_163 ((unsigned) (KEY_PLAYPAUSE))
 #define XLAT_STR_163 STRINGIFY(KEY_PLAYPAUSE)
 [KEY_PREVIOUSSONG] = XLAT(KEY_PREVIOUSSONG),
 #define XLAT_VAL_164 ((unsigned) (KEY_PREVIOUSSONG))
 #define XLAT_STR_164 STRINGIFY(KEY_PREVIOUSSONG)
 [KEY_STOPCD] = XLAT(KEY_STOPCD),
 #define XLAT_VAL_165 ((unsigned) (KEY_STOPCD))
 #define XLAT_STR_165 STRINGIFY(KEY_STOPCD)
 [KEY_RECORD] = XLAT(KEY_RECORD),
 #define XLAT_VAL_166 ((unsigned) (KEY_RECORD))
 #define XLAT_STR_166 STRINGIFY(KEY_RECORD)
 [KEY_REWIND] = XLAT(KEY_REWIND),
 #define XLAT_VAL_167 ((unsigned) (KEY_REWIND))
 #define XLAT_STR_167 STRINGIFY(KEY_REWIND)
 [KEY_PHONE] = XLAT(KEY_PHONE),
 #define XLAT_VAL_168 ((unsigned) (KEY_PHONE))
 #define XLAT_STR_168 STRINGIFY(KEY_PHONE)
 [KEY_ISO] = XLAT(KEY_ISO),
 #define XLAT_VAL_169 ((unsigned) (KEY_ISO))
 #define XLAT_STR_169 STRINGIFY(KEY_ISO)
 [KEY_CONFIG] = XLAT(KEY_CONFIG),
 #define XLAT_VAL_170 ((unsigned) (KEY_CONFIG))
 #define XLAT_STR_170 STRINGIFY(KEY_CONFIG)
 [KEY_HOMEPAGE] = XLAT(KEY_HOMEPAGE),
 #define XLAT_VAL_171 ((unsigned) (KEY_HOMEPAGE))
 #define XLAT_STR_171 STRINGIFY(KEY_HOMEPAGE)
 [KEY_REFRESH] = XLAT(KEY_REFRESH),
 #define XLAT_VAL_172 ((unsigned) (KEY_REFRESH))
 #define XLAT_STR_172 STRINGIFY(KEY_REFRESH)
 [KEY_EXIT] = XLAT(KEY_EXIT),
 #define XLAT_VAL_173 ((unsigned) (KEY_EXIT))
 #define XLAT_STR_173 STRINGIFY(KEY_EXIT)
 [KEY_MOVE] = XLAT(KEY_MOVE),
 #define XLAT_VAL_174 ((unsigned) (KEY_MOVE))
 #define XLAT_STR_174 STRINGIFY(KEY_MOVE)
 [KEY_EDIT] = XLAT(KEY_EDIT),
 #define XLAT_VAL_175 ((unsigned) (KEY_EDIT))
 #define XLAT_STR_175 STRINGIFY(KEY_EDIT)
 [KEY_SCROLLUP] = XLAT(KEY_SCROLLUP),
 #define XLAT_VAL_176 ((unsigned) (KEY_SCROLLUP))
 #define XLAT_STR_176 STRINGIFY(KEY_SCROLLUP)
 [KEY_SCROLLDOWN] = XLAT(KEY_SCROLLDOWN),
 #define XLAT_VAL_177 ((unsigned) (KEY_SCROLLDOWN))
 #define XLAT_STR_177 STRINGIFY(KEY_SCROLLDOWN)
 [KEY_KPLEFTPAREN] = XLAT(KEY_KPLEFTPAREN),
 #define XLAT_VAL_178 ((unsigned) (KEY_KPLEFTPAREN))
 #define XLAT_STR_178 STRINGIFY(KEY_KPLEFTPAREN)
 [KEY_KPRIGHTPAREN] = XLAT(KEY_KPRIGHTPAREN),
 #define XLAT_VAL_179 ((unsigned) (KEY_KPRIGHTPAREN))
 #define XLAT_STR_179 STRINGIFY(KEY_KPRIGHTPAREN)
 [KEY_NEW] = XLAT(KEY_NEW),
 #define XLAT_VAL_180 ((unsigned) (KEY_NEW))
 #define XLAT_STR_180 STRINGIFY(KEY_NEW)
 [KEY_REDO] = XLAT(KEY_REDO),
 #define XLAT_VAL_181 ((unsigned) (KEY_REDO))
 #define XLAT_STR_181 STRINGIFY(KEY_REDO)

 [KEY_F13] = XLAT(KEY_F13),
 #define XLAT_VAL_182 ((unsigned) (KEY_F13))
 #define XLAT_STR_182 STRINGIFY(KEY_F13)
 [KEY_F14] = XLAT(KEY_F14),
 #define XLAT_VAL_183 ((unsigned) (KEY_F14))
 #define XLAT_STR_183 STRINGIFY(KEY_F14)
 [KEY_F15] = XLAT(KEY_F15),
 #define XLAT_VAL_184 ((unsigned) (KEY_F15))
 #define XLAT_STR_184 STRINGIFY(KEY_F15)
 [KEY_F16] = XLAT(KEY_F16),
 #define XLAT_VAL_185 ((unsigned) (KEY_F16))
 #define XLAT_STR_185 STRINGIFY(KEY_F16)
 [KEY_F17] = XLAT(KEY_F17),
 #define XLAT_VAL_186 ((unsigned) (KEY_F17))
 #define XLAT_STR_186 STRINGIFY(KEY_F17)
 [KEY_F18] = XLAT(KEY_F18),
 #define XLAT_VAL_187 ((unsigned) (KEY_F18))
 #define XLAT_STR_187 STRINGIFY(KEY_F18)
 [KEY_F19] = XLAT(KEY_F19),
 #define XLAT_VAL_188 ((unsigned) (KEY_F19))
 #define XLAT_STR_188 STRINGIFY(KEY_F19)
 [KEY_F20] = XLAT(KEY_F20),
 #define XLAT_VAL_189 ((unsigned) (KEY_F20))
 #define XLAT_STR_189 STRINGIFY(KEY_F20)
 [KEY_F21] = XLAT(KEY_F21),
 #define XLAT_VAL_190 ((unsigned) (KEY_F21))
 #define XLAT_STR_190 STRINGIFY(KEY_F21)
 [KEY_F22] = XLAT(KEY_F22),
 #define XLAT_VAL_191 ((unsigned) (KEY_F22))
 #define XLAT_STR_191 STRINGIFY(KEY_F22)
 [KEY_F23] = XLAT(KEY_F23),
 #define XLAT_VAL_192 ((unsigned) (KEY_F23))
 #define XLAT_STR_192 STRINGIFY(KEY_F23)
 [KEY_F24] = XLAT(KEY_F24),
 #define XLAT_VAL_193 ((unsigned) (KEY_F24))
 #define XLAT_STR_193 STRINGIFY(KEY_F24)

 [KEY_PLAYCD] = XLAT(KEY_PLAYCD),
 #define XLAT_VAL_194 ((unsigned) (KEY_PLAYCD))
 #define XLAT_STR_194 STRINGIFY(KEY_PLAYCD)
 [KEY_PAUSECD] = XLAT(KEY_PAUSECD),
 #define XLAT_VAL_195 ((unsigned) (KEY_PAUSECD))
 #define XLAT_STR_195 STRINGIFY(KEY_PAUSECD)
 [KEY_PROG3] = XLAT(KEY_PROG3),
 #define XLAT_VAL_196 ((unsigned) (KEY_PROG3))
 #define XLAT_STR_196 STRINGIFY(KEY_PROG3)
 [KEY_PROG4] = XLAT(KEY_PROG4),
 #define XLAT_VAL_197 ((unsigned) (KEY_PROG4))
 #define XLAT_STR_197 STRINGIFY(KEY_PROG4)
 [KEY_DASHBOARD] = XLAT(KEY_DASHBOARD),
 #define XLAT_VAL_198 ((unsigned) (KEY_DASHBOARD))
 #define XLAT_STR_198 STRINGIFY(KEY_DASHBOARD)
 [KEY_SUSPEND] = XLAT(KEY_SUSPEND),
 #define XLAT_VAL_199 ((unsigned) (KEY_SUSPEND))
 #define XLAT_STR_199 STRINGIFY(KEY_SUSPEND)
 [KEY_CLOSE] = XLAT(KEY_CLOSE),
 #define XLAT_VAL_200 ((unsigned) (KEY_CLOSE))
 #define XLAT_STR_200 STRINGIFY(KEY_CLOSE)
 [KEY_PLAY] = XLAT(KEY_PLAY),
 #define XLAT_VAL_201 ((unsigned) (KEY_PLAY))
 #define XLAT_STR_201 STRINGIFY(KEY_PLAY)
 [KEY_FASTFORWARD] = XLAT(KEY_FASTFORWARD),
 #define XLAT_VAL_202 ((unsigned) (KEY_FASTFORWARD))
 #define XLAT_STR_202 STRINGIFY(KEY_FASTFORWARD)
 [KEY_BASSBOOST] = XLAT(KEY_BASSBOOST),
 #define XLAT_VAL_203 ((unsigned) (KEY_BASSBOOST))
 #define XLAT_STR_203 STRINGIFY(KEY_BASSBOOST)
 [KEY_PRINT] = XLAT(KEY_PRINT),
 #define XLAT_VAL_204 ((unsigned) (KEY_PRINT))
 #define XLAT_STR_204 STRINGIFY(KEY_PRINT)
 [KEY_HP] = XLAT(KEY_HP),
 #define XLAT_VAL_205 ((unsigned) (KEY_HP))
 #define XLAT_STR_205 STRINGIFY(KEY_HP)
 [KEY_CAMERA] = XLAT(KEY_CAMERA),
 #define XLAT_VAL_206 ((unsigned) (KEY_CAMERA))
 #define XLAT_STR_206 STRINGIFY(KEY_CAMERA)
 [KEY_SOUND] = XLAT(KEY_SOUND),
 #define XLAT_VAL_207 ((unsigned) (KEY_SOUND))
 #define XLAT_STR_207 STRINGIFY(KEY_SOUND)
 [KEY_QUESTION] = XLAT(KEY_QUESTION),
 #define XLAT_VAL_208 ((unsigned) (KEY_QUESTION))
 #define XLAT_STR_208 STRINGIFY(KEY_QUESTION)
 [KEY_EMAIL] = XLAT(KEY_EMAIL),
 #define XLAT_VAL_209 ((unsigned) (KEY_EMAIL))
 #define XLAT_STR_209 STRINGIFY(KEY_EMAIL)
 [KEY_CHAT] = XLAT(KEY_CHAT),
 #define XLAT_VAL_210 ((unsigned) (KEY_CHAT))
 #define XLAT_STR_210 STRINGIFY(KEY_CHAT)
 [KEY_SEARCH] = XLAT(KEY_SEARCH),
 #define XLAT_VAL_211 ((unsigned) (KEY_SEARCH))
 #define XLAT_STR_211 STRINGIFY(KEY_SEARCH)
 [KEY_CONNECT] = XLAT(KEY_CONNECT),
 #define XLAT_VAL_212 ((unsigned) (KEY_CONNECT))
 #define XLAT_STR_212 STRINGIFY(KEY_CONNECT)
 [KEY_FINANCE] = XLAT(KEY_FINANCE),
 #define XLAT_VAL_213 ((unsigned) (KEY_FINANCE))
 #define XLAT_STR_213 STRINGIFY(KEY_FINANCE)
 [KEY_SPORT] = XLAT(KEY_SPORT),
 #define XLAT_VAL_214 ((unsigned) (KEY_SPORT))
 #define XLAT_STR_214 STRINGIFY(KEY_SPORT)
 [KEY_SHOP] = XLAT(KEY_SHOP),
 #define XLAT_VAL_215 ((unsigned) (KEY_SHOP))
 #define XLAT_STR_215 STRINGIFY(KEY_SHOP)
 [KEY_ALTERASE] = XLAT(KEY_ALTERASE),
 #define XLAT_VAL_216 ((unsigned) (KEY_ALTERASE))
 #define XLAT_STR_216 STRINGIFY(KEY_ALTERASE)
 [KEY_CANCEL] = XLAT(KEY_CANCEL),
 #define XLAT_VAL_217 ((unsigned) (KEY_CANCEL))
 #define XLAT_STR_217 STRINGIFY(KEY_CANCEL)
 [KEY_BRIGHTNESSDOWN] = XLAT(KEY_BRIGHTNESSDOWN),
 #define XLAT_VAL_218 ((unsigned) (KEY_BRIGHTNESSDOWN))
 #define XLAT_STR_218 STRINGIFY(KEY_BRIGHTNESSDOWN)
 [KEY_BRIGHTNESSUP] = XLAT(KEY_BRIGHTNESSUP),
 #define XLAT_VAL_219 ((unsigned) (KEY_BRIGHTNESSUP))
 #define XLAT_STR_219 STRINGIFY(KEY_BRIGHTNESSUP)
 [KEY_MEDIA] = XLAT(KEY_MEDIA),
 #define XLAT_VAL_220 ((unsigned) (KEY_MEDIA))
 #define XLAT_STR_220 STRINGIFY(KEY_MEDIA)

 [KEY_SWITCHVIDEOMODE] = XLAT(KEY_SWITCHVIDEOMODE),
 #define XLAT_VAL_221 ((unsigned) (KEY_SWITCHVIDEOMODE))
 #define XLAT_STR_221 STRINGIFY(KEY_SWITCHVIDEOMODE)

 [KEY_KBDILLUMTOGGLE] = XLAT(KEY_KBDILLUMTOGGLE),
 #define XLAT_VAL_222 ((unsigned) (KEY_KBDILLUMTOGGLE))
 #define XLAT_STR_222 STRINGIFY(KEY_KBDILLUMTOGGLE)
 [KEY_KBDILLUMDOWN] = XLAT(KEY_KBDILLUMDOWN),
 #define XLAT_VAL_223 ((unsigned) (KEY_KBDILLUMDOWN))
 #define XLAT_STR_223 STRINGIFY(KEY_KBDILLUMDOWN)
 [KEY_KBDILLUMUP] = XLAT(KEY_KBDILLUMUP),
 #define XLAT_VAL_224 ((unsigned) (KEY_KBDILLUMUP))
 #define XLAT_STR_224 STRINGIFY(KEY_KBDILLUMUP)

 [KEY_SEND] = XLAT(KEY_SEND),
 #define XLAT_VAL_225 ((unsigned) (KEY_SEND))
 #define XLAT_STR_225 STRINGIFY(KEY_SEND)
 [KEY_REPLY] = XLAT(KEY_REPLY),
 #define XLAT_VAL_226 ((unsigned) (KEY_REPLY))
 #define XLAT_STR_226 STRINGIFY(KEY_REPLY)
 [KEY_FORWARDMAIL] = XLAT(KEY_FORWARDMAIL),
 #define XLAT_VAL_227 ((unsigned) (KEY_FORWARDMAIL))
 #define XLAT_STR_227 STRINGIFY(KEY_FORWARDMAIL)
 [KEY_SAVE] = XLAT(KEY_SAVE),
 #define XLAT_VAL_228 ((unsigned) (KEY_SAVE))
 #define XLAT_STR_228 STRINGIFY(KEY_SAVE)
 [KEY_DOCUMENTS] = XLAT(KEY_DOCUMENTS),
 #define XLAT_VAL_229 ((unsigned) (KEY_DOCUMENTS))
 #define XLAT_STR_229 STRINGIFY(KEY_DOCUMENTS)

 [KEY_BATTERY] = XLAT(KEY_BATTERY),
 #define XLAT_VAL_230 ((unsigned) (KEY_BATTERY))
 #define XLAT_STR_230 STRINGIFY(KEY_BATTERY)

 [KEY_BLUETOOTH] = XLAT(KEY_BLUETOOTH),
 #define XLAT_VAL_231 ((unsigned) (KEY_BLUETOOTH))
 #define XLAT_STR_231 STRINGIFY(KEY_BLUETOOTH)
 [KEY_WLAN] = XLAT(KEY_WLAN),
 #define XLAT_VAL_232 ((unsigned) (KEY_WLAN))
 #define XLAT_STR_232 STRINGIFY(KEY_WLAN)
 [KEY_UWB] = XLAT(KEY_UWB),
 #define XLAT_VAL_233 ((unsigned) (KEY_UWB))
 #define XLAT_STR_233 STRINGIFY(KEY_UWB)

 [KEY_UNKNOWN] = XLAT(KEY_UNKNOWN),
 #define XLAT_VAL_234 ((unsigned) (KEY_UNKNOWN))
 #define XLAT_STR_234 STRINGIFY(KEY_UNKNOWN)

 [KEY_VIDEO_NEXT] = XLAT(KEY_VIDEO_NEXT),
 #define XLAT_VAL_235 ((unsigned) (KEY_VIDEO_NEXT))
 #define XLAT_STR_235 STRINGIFY(KEY_VIDEO_NEXT)
 [KEY_VIDEO_PREV] = XLAT(KEY_VIDEO_PREV),
 #define XLAT_VAL_236 ((unsigned) (KEY_VIDEO_PREV))
 #define XLAT_STR_236 STRINGIFY(KEY_VIDEO_PREV)
 [KEY_BRIGHTNESS_CYCLE] = XLAT(KEY_BRIGHTNESS_CYCLE),
 #define XLAT_VAL_237 ((unsigned) (KEY_BRIGHTNESS_CYCLE))
 #define XLAT_STR_237 STRINGIFY(KEY_BRIGHTNESS_CYCLE)
 [KEY_BRIGHTNESS_AUTO] = XLAT(KEY_BRIGHTNESS_AUTO),
 #define XLAT_VAL_238 ((unsigned) (KEY_BRIGHTNESS_AUTO))
 #define XLAT_STR_238 STRINGIFY(KEY_BRIGHTNESS_AUTO)
 [KEY_DISPLAY_OFF] = XLAT(KEY_DISPLAY_OFF),
 #define XLAT_VAL_239 ((unsigned) (KEY_DISPLAY_OFF))
 #define XLAT_STR_239 STRINGIFY(KEY_DISPLAY_OFF)

 [KEY_WWAN] = XLAT(KEY_WWAN),
 #define XLAT_VAL_240 ((unsigned) (KEY_WWAN))
 #define XLAT_STR_240 STRINGIFY(KEY_WWAN)

#ifndef STRACE_WORKAROUND_FOR_KEY_RFKILL
# define STRACE_WORKAROUND_FOR_KEY_RFKILL
/*
* KEY_RFKILL and KEY_NUMERIC_A constants were introduced by Linux kernel
* commits v2.6.33~17^2~2 and v4.1-rc1~150^2~1^10~6, respectively.
* Apparently, RHEL6 introduced an alternative KEY_RFKILL constant
* with the same value as upstream KEY_NUMERIC_A.
* Downstream vendors are *not* allowed to do this.
* Ignore the system value of KEY_RFKILL.
*/
# undef KEY_RFKILL
#endif
 [KEY_RFKILL] = XLAT(KEY_RFKILL),
 #define XLAT_VAL_241 ((unsigned) (KEY_RFKILL))
 #define XLAT_STR_241 STRINGIFY(KEY_RFKILL)

 [KEY_MICMUTE] = XLAT(KEY_MICMUTE),
 #define XLAT_VAL_242 ((unsigned) (KEY_MICMUTE))
 #define XLAT_STR_242 STRINGIFY(KEY_MICMUTE)

 [BTN_0] = XLAT(BTN_0),
 #define XLAT_VAL_243 ((unsigned) (BTN_0))
 #define XLAT_STR_243 STRINGIFY(BTN_0)
 [BTN_1] = XLAT(BTN_1),
 #define XLAT_VAL_244 ((unsigned) (BTN_1))
 #define XLAT_STR_244 STRINGIFY(BTN_1)
 [BTN_2] = XLAT(BTN_2),
 #define XLAT_VAL_245 ((unsigned) (BTN_2))
 #define XLAT_STR_245 STRINGIFY(BTN_2)
 [BTN_3] = XLAT(BTN_3),
 #define XLAT_VAL_246 ((unsigned) (BTN_3))
 #define XLAT_STR_246 STRINGIFY(BTN_3)
 [BTN_4] = XLAT(BTN_4),
 #define XLAT_VAL_247 ((unsigned) (BTN_4))
 #define XLAT_STR_247 STRINGIFY(BTN_4)
 [BTN_5] = XLAT(BTN_5),
 #define XLAT_VAL_248 ((unsigned) (BTN_5))
 #define XLAT_STR_248 STRINGIFY(BTN_5)
 [BTN_6] = XLAT(BTN_6),
 #define XLAT_VAL_249 ((unsigned) (BTN_6))
 #define XLAT_STR_249 STRINGIFY(BTN_6)
 [BTN_7] = XLAT(BTN_7),
 #define XLAT_VAL_250 ((unsigned) (BTN_7))
 #define XLAT_STR_250 STRINGIFY(BTN_7)
 [BTN_8] = XLAT(BTN_8),
 #define XLAT_VAL_251 ((unsigned) (BTN_8))
 #define XLAT_STR_251 STRINGIFY(BTN_8)
 [BTN_9] = XLAT(BTN_9),
 #define XLAT_VAL_252 ((unsigned) (BTN_9))
 #define XLAT_STR_252 STRINGIFY(BTN_9)

 [BTN_LEFT] = XLAT(BTN_LEFT),
 #define XLAT_VAL_253 ((unsigned) (BTN_LEFT))
 #define XLAT_STR_253 STRINGIFY(BTN_LEFT)
 [BTN_RIGHT] = XLAT(BTN_RIGHT),
 #define XLAT_VAL_254 ((unsigned) (BTN_RIGHT))
 #define XLAT_STR_254 STRINGIFY(BTN_RIGHT)
 [BTN_MIDDLE] = XLAT(BTN_MIDDLE),
 #define XLAT_VAL_255 ((unsigned) (BTN_MIDDLE))
 #define XLAT_STR_255 STRINGIFY(BTN_MIDDLE)
 [BTN_SIDE] = XLAT(BTN_SIDE),
 #define XLAT_VAL_256 ((unsigned) (BTN_SIDE))
 #define XLAT_STR_256 STRINGIFY(BTN_SIDE)
 [BTN_EXTRA] = XLAT(BTN_EXTRA),
 #define XLAT_VAL_257 ((unsigned) (BTN_EXTRA))
 #define XLAT_STR_257 STRINGIFY(BTN_EXTRA)
 [BTN_FORWARD] = XLAT(BTN_FORWARD),
 #define XLAT_VAL_258 ((unsigned) (BTN_FORWARD))
 #define XLAT_STR_258 STRINGIFY(BTN_FORWARD)
 [BTN_BACK] = XLAT(BTN_BACK),
 #define XLAT_VAL_259 ((unsigned) (BTN_BACK))
 #define XLAT_STR_259 STRINGIFY(BTN_BACK)
 [BTN_TASK] = XLAT(BTN_TASK),
 #define XLAT_VAL_260 ((unsigned) (BTN_TASK))
 #define XLAT_STR_260 STRINGIFY(BTN_TASK)

 [BTN_TRIGGER] = XLAT(BTN_TRIGGER),
 #define XLAT_VAL_261 ((unsigned) (BTN_TRIGGER))
 #define XLAT_STR_261 STRINGIFY(BTN_TRIGGER)
 [BTN_THUMB] = XLAT(BTN_THUMB),
 #define XLAT_VAL_262 ((unsigned) (BTN_THUMB))
 #define XLAT_STR_262 STRINGIFY(BTN_THUMB)
 [BTN_THUMB2] = XLAT(BTN_THUMB2),
 #define XLAT_VAL_263 ((unsigned) (BTN_THUMB2))
 #define XLAT_STR_263 STRINGIFY(BTN_THUMB2)
 [BTN_TOP] = XLAT(BTN_TOP),
 #define XLAT_VAL_264 ((unsigned) (BTN_TOP))
 #define XLAT_STR_264 STRINGIFY(BTN_TOP)
 [BTN_TOP2] = XLAT(BTN_TOP2),
 #define XLAT_VAL_265 ((unsigned) (BTN_TOP2))
 #define XLAT_STR_265 STRINGIFY(BTN_TOP2)
 [BTN_PINKIE] = XLAT(BTN_PINKIE),
 #define XLAT_VAL_266 ((unsigned) (BTN_PINKIE))
 #define XLAT_STR_266 STRINGIFY(BTN_PINKIE)
 [BTN_BASE] = XLAT(BTN_BASE),
 #define XLAT_VAL_267 ((unsigned) (BTN_BASE))
 #define XLAT_STR_267 STRINGIFY(BTN_BASE)
 [BTN_BASE2] = XLAT(BTN_BASE2),
 #define XLAT_VAL_268 ((unsigned) (BTN_BASE2))
 #define XLAT_STR_268 STRINGIFY(BTN_BASE2)
 [BTN_BASE3] = XLAT(BTN_BASE3),
 #define XLAT_VAL_269 ((unsigned) (BTN_BASE3))
 #define XLAT_STR_269 STRINGIFY(BTN_BASE3)
 [BTN_BASE4] = XLAT(BTN_BASE4),
 #define XLAT_VAL_270 ((unsigned) (BTN_BASE4))
 #define XLAT_STR_270 STRINGIFY(BTN_BASE4)
 [BTN_BASE5] = XLAT(BTN_BASE5),
 #define XLAT_VAL_271 ((unsigned) (BTN_BASE5))
 #define XLAT_STR_271 STRINGIFY(BTN_BASE5)
 [BTN_BASE6] = XLAT(BTN_BASE6),
 #define XLAT_VAL_272 ((unsigned) (BTN_BASE6))
 #define XLAT_STR_272 STRINGIFY(BTN_BASE6)
 [BTN_DEAD] = XLAT(BTN_DEAD),
 #define XLAT_VAL_273 ((unsigned) (BTN_DEAD))
 #define XLAT_STR_273 STRINGIFY(BTN_DEAD)

 [BTN_SOUTH] = XLAT(BTN_SOUTH),
 #define XLAT_VAL_274 ((unsigned) (BTN_SOUTH))
 #define XLAT_STR_274 STRINGIFY(BTN_SOUTH)
 [BTN_EAST] = XLAT(BTN_EAST),
 #define XLAT_VAL_275 ((unsigned) (BTN_EAST))
 #define XLAT_STR_275 STRINGIFY(BTN_EAST)
 [BTN_C] = XLAT(BTN_C),
 #define XLAT_VAL_276 ((unsigned) (BTN_C))
 #define XLAT_STR_276 STRINGIFY(BTN_C)
 [BTN_NORTH] = XLAT(BTN_NORTH),
 #define XLAT_VAL_277 ((unsigned) (BTN_NORTH))
 #define XLAT_STR_277 STRINGIFY(BTN_NORTH)
 [BTN_WEST] = XLAT(BTN_WEST),
 #define XLAT_VAL_278 ((unsigned) (BTN_WEST))
 #define XLAT_STR_278 STRINGIFY(BTN_WEST)
 [BTN_Z] = XLAT(BTN_Z),
 #define XLAT_VAL_279 ((unsigned) (BTN_Z))
 #define XLAT_STR_279 STRINGIFY(BTN_Z)
 [BTN_TL] = XLAT(BTN_TL),
 #define XLAT_VAL_280 ((unsigned) (BTN_TL))
 #define XLAT_STR_280 STRINGIFY(BTN_TL)
 [BTN_TR] = XLAT(BTN_TR),
 #define XLAT_VAL_281 ((unsigned) (BTN_TR))
 #define XLAT_STR_281 STRINGIFY(BTN_TR)
 [BTN_TL2] = XLAT(BTN_TL2),
 #define XLAT_VAL_282 ((unsigned) (BTN_TL2))
 #define XLAT_STR_282 STRINGIFY(BTN_TL2)
 [BTN_TR2] = XLAT(BTN_TR2),
 #define XLAT_VAL_283 ((unsigned) (BTN_TR2))
 #define XLAT_STR_283 STRINGIFY(BTN_TR2)
 [BTN_SELECT] = XLAT(BTN_SELECT),
 #define XLAT_VAL_284 ((unsigned) (BTN_SELECT))
 #define XLAT_STR_284 STRINGIFY(BTN_SELECT)
 [BTN_START] = XLAT(BTN_START),
 #define XLAT_VAL_285 ((unsigned) (BTN_START))
 #define XLAT_STR_285 STRINGIFY(BTN_START)
 [BTN_MODE] = XLAT(BTN_MODE),
 #define XLAT_VAL_286 ((unsigned) (BTN_MODE))
 #define XLAT_STR_286 STRINGIFY(BTN_MODE)
 [BTN_THUMBL] = XLAT(BTN_THUMBL),
 #define XLAT_VAL_287 ((unsigned) (BTN_THUMBL))
 #define XLAT_STR_287 STRINGIFY(BTN_THUMBL)
 [BTN_THUMBR] = XLAT(BTN_THUMBR),
 #define XLAT_VAL_288 ((unsigned) (BTN_THUMBR))
 #define XLAT_STR_288 STRINGIFY(BTN_THUMBR)

 [BTN_TOOL_PEN] = XLAT(BTN_TOOL_PEN),
 #define XLAT_VAL_289 ((unsigned) (BTN_TOOL_PEN))
 #define XLAT_STR_289 STRINGIFY(BTN_TOOL_PEN)
 [BTN_TOOL_RUBBER] = XLAT(BTN_TOOL_RUBBER),
 #define XLAT_VAL_290 ((unsigned) (BTN_TOOL_RUBBER))
 #define XLAT_STR_290 STRINGIFY(BTN_TOOL_RUBBER)
 [BTN_TOOL_BRUSH] = XLAT(BTN_TOOL_BRUSH),
 #define XLAT_VAL_291 ((unsigned) (BTN_TOOL_BRUSH))
 #define XLAT_STR_291 STRINGIFY(BTN_TOOL_BRUSH)
 [BTN_TOOL_PENCIL] = XLAT(BTN_TOOL_PENCIL),
 #define XLAT_VAL_292 ((unsigned) (BTN_TOOL_PENCIL))
 #define XLAT_STR_292 STRINGIFY(BTN_TOOL_PENCIL)
 [BTN_TOOL_AIRBRUSH] = XLAT(BTN_TOOL_AIRBRUSH),
 #define XLAT_VAL_293 ((unsigned) (BTN_TOOL_AIRBRUSH))
 #define XLAT_STR_293 STRINGIFY(BTN_TOOL_AIRBRUSH)
 [BTN_TOOL_FINGER] = XLAT(BTN_TOOL_FINGER),
 #define XLAT_VAL_294 ((unsigned) (BTN_TOOL_FINGER))
 #define XLAT_STR_294 STRINGIFY(BTN_TOOL_FINGER)
 [BTN_TOOL_MOUSE] = XLAT(BTN_TOOL_MOUSE),
 #define XLAT_VAL_295 ((unsigned) (BTN_TOOL_MOUSE))
 #define XLAT_STR_295 STRINGIFY(BTN_TOOL_MOUSE)
 [BTN_TOOL_LENS] = XLAT(BTN_TOOL_LENS),
 #define XLAT_VAL_296 ((unsigned) (BTN_TOOL_LENS))
 #define XLAT_STR_296 STRINGIFY(BTN_TOOL_LENS)
 [BTN_TOOL_QUINTTAP] = XLAT(BTN_TOOL_QUINTTAP),
 #define XLAT_VAL_297 ((unsigned) (BTN_TOOL_QUINTTAP))
 #define XLAT_STR_297 STRINGIFY(BTN_TOOL_QUINTTAP)
 [BTN_STYLUS3] = XLAT(BTN_STYLUS3),
 #define XLAT_VAL_298 ((unsigned) (BTN_STYLUS3))
 #define XLAT_STR_298 STRINGIFY(BTN_STYLUS3)
 [BTN_TOUCH] = XLAT(BTN_TOUCH),
 #define XLAT_VAL_299 ((unsigned) (BTN_TOUCH))
 #define XLAT_STR_299 STRINGIFY(BTN_TOUCH)
 [BTN_STYLUS] = XLAT(BTN_STYLUS),
 #define XLAT_VAL_300 ((unsigned) (BTN_STYLUS))
 #define XLAT_STR_300 STRINGIFY(BTN_STYLUS)
 [BTN_STYLUS2] = XLAT(BTN_STYLUS2),
 #define XLAT_VAL_301 ((unsigned) (BTN_STYLUS2))
 #define XLAT_STR_301 STRINGIFY(BTN_STYLUS2)
 [BTN_TOOL_DOUBLETAP] = XLAT(BTN_TOOL_DOUBLETAP),
 #define XLAT_VAL_302 ((unsigned) (BTN_TOOL_DOUBLETAP))
 #define XLAT_STR_302 STRINGIFY(BTN_TOOL_DOUBLETAP)
 [BTN_TOOL_TRIPLETAP] = XLAT(BTN_TOOL_TRIPLETAP),
 #define XLAT_VAL_303 ((unsigned) (BTN_TOOL_TRIPLETAP))
 #define XLAT_STR_303 STRINGIFY(BTN_TOOL_TRIPLETAP)
 [BTN_TOOL_QUADTAP] = XLAT(BTN_TOOL_QUADTAP),
 #define XLAT_VAL_304 ((unsigned) (BTN_TOOL_QUADTAP))
 #define XLAT_STR_304 STRINGIFY(BTN_TOOL_QUADTAP)

 [BTN_GEAR_DOWN] = XLAT(BTN_GEAR_DOWN),
 #define XLAT_VAL_305 ((unsigned) (BTN_GEAR_DOWN))
 #define XLAT_STR_305 STRINGIFY(BTN_GEAR_DOWN)
 [BTN_GEAR_UP] = XLAT(BTN_GEAR_UP),
 #define XLAT_VAL_306 ((unsigned) (BTN_GEAR_UP))
 #define XLAT_STR_306 STRINGIFY(BTN_GEAR_UP)

 [KEY_OK] = XLAT(KEY_OK),
 #define XLAT_VAL_307 ((unsigned) (KEY_OK))
 #define XLAT_STR_307 STRINGIFY(KEY_OK)
 [KEY_SELECT] = XLAT(KEY_SELECT),
 #define XLAT_VAL_308 ((unsigned) (KEY_SELECT))
 #define XLAT_STR_308 STRINGIFY(KEY_SELECT)
 [KEY_GOTO] = XLAT(KEY_GOTO),
 #define XLAT_VAL_309 ((unsigned) (KEY_GOTO))
 #define XLAT_STR_309 STRINGIFY(KEY_GOTO)
 [KEY_CLEAR] = XLAT(KEY_CLEAR),
 #define XLAT_VAL_310 ((unsigned) (KEY_CLEAR))
 #define XLAT_STR_310 STRINGIFY(KEY_CLEAR)
 [KEY_POWER2] = XLAT(KEY_POWER2),
 #define XLAT_VAL_311 ((unsigned) (KEY_POWER2))
 #define XLAT_STR_311 STRINGIFY(KEY_POWER2)
 [KEY_OPTION] = XLAT(KEY_OPTION),
 #define XLAT_VAL_312 ((unsigned) (KEY_OPTION))
 #define XLAT_STR_312 STRINGIFY(KEY_OPTION)
 [KEY_INFO] = XLAT(KEY_INFO),
 #define XLAT_VAL_313 ((unsigned) (KEY_INFO))
 #define XLAT_STR_313 STRINGIFY(KEY_INFO)
 [KEY_TIME] = XLAT(KEY_TIME),
 #define XLAT_VAL_314 ((unsigned) (KEY_TIME))
 #define XLAT_STR_314 STRINGIFY(KEY_TIME)
 [KEY_VENDOR] = XLAT(KEY_VENDOR),
 #define XLAT_VAL_315 ((unsigned) (KEY_VENDOR))
 #define XLAT_STR_315 STRINGIFY(KEY_VENDOR)
 [KEY_ARCHIVE] = XLAT(KEY_ARCHIVE),
 #define XLAT_VAL_316 ((unsigned) (KEY_ARCHIVE))
 #define XLAT_STR_316 STRINGIFY(KEY_ARCHIVE)
 [KEY_PROGRAM] = XLAT(KEY_PROGRAM),
 #define XLAT_VAL_317 ((unsigned) (KEY_PROGRAM))
 #define XLAT_STR_317 STRINGIFY(KEY_PROGRAM)
 [KEY_CHANNEL] = XLAT(KEY_CHANNEL),
 #define XLAT_VAL_318 ((unsigned) (KEY_CHANNEL))
 #define XLAT_STR_318 STRINGIFY(KEY_CHANNEL)
 [KEY_FAVORITES] = XLAT(KEY_FAVORITES),
 #define XLAT_VAL_319 ((unsigned) (KEY_FAVORITES))
 #define XLAT_STR_319 STRINGIFY(KEY_FAVORITES)
 [KEY_EPG] = XLAT(KEY_EPG),
 #define XLAT_VAL_320 ((unsigned) (KEY_EPG))
 #define XLAT_STR_320 STRINGIFY(KEY_EPG)
 [KEY_PVR] = XLAT(KEY_PVR),
 #define XLAT_VAL_321 ((unsigned) (KEY_PVR))
 #define XLAT_STR_321 STRINGIFY(KEY_PVR)
 [KEY_MHP] = XLAT(KEY_MHP),
 #define XLAT_VAL_322 ((unsigned) (KEY_MHP))
 #define XLAT_STR_322 STRINGIFY(KEY_MHP)
 [KEY_LANGUAGE] = XLAT(KEY_LANGUAGE),
 #define XLAT_VAL_323 ((unsigned) (KEY_LANGUAGE))
 #define XLAT_STR_323 STRINGIFY(KEY_LANGUAGE)
 [KEY_TITLE] = XLAT(KEY_TITLE),
 #define XLAT_VAL_324 ((unsigned) (KEY_TITLE))
 #define XLAT_STR_324 STRINGIFY(KEY_TITLE)
 [KEY_SUBTITLE] = XLAT(KEY_SUBTITLE),
 #define XLAT_VAL_325 ((unsigned) (KEY_SUBTITLE))
 #define XLAT_STR_325 STRINGIFY(KEY_SUBTITLE)
 [KEY_ANGLE] = XLAT(KEY_ANGLE),
 #define XLAT_VAL_326 ((unsigned) (KEY_ANGLE))
 #define XLAT_STR_326 STRINGIFY(KEY_ANGLE)
 [KEY_ZOOM] = XLAT(KEY_ZOOM),
 #define XLAT_VAL_327 ((unsigned) (KEY_ZOOM))
 #define XLAT_STR_327 STRINGIFY(KEY_ZOOM)
 [KEY_MODE] = XLAT(KEY_MODE),
 #define XLAT_VAL_328 ((unsigned) (KEY_MODE))
 #define XLAT_STR_328 STRINGIFY(KEY_MODE)
 [KEY_KEYBOARD] = XLAT(KEY_KEYBOARD),
 #define XLAT_VAL_329 ((unsigned) (KEY_KEYBOARD))
 #define XLAT_STR_329 STRINGIFY(KEY_KEYBOARD)
 [KEY_SCREEN] = XLAT(KEY_SCREEN),
 #define XLAT_VAL_330 ((unsigned) (KEY_SCREEN))
 #define XLAT_STR_330 STRINGIFY(KEY_SCREEN)
 [KEY_PC] = XLAT(KEY_PC),
 #define XLAT_VAL_331 ((unsigned) (KEY_PC))
 #define XLAT_STR_331 STRINGIFY(KEY_PC)
 [KEY_TV] = XLAT(KEY_TV),
 #define XLAT_VAL_332 ((unsigned) (KEY_TV))
 #define XLAT_STR_332 STRINGIFY(KEY_TV)
 [KEY_TV2] = XLAT(KEY_TV2),
 #define XLAT_VAL_333 ((unsigned) (KEY_TV2))
 #define XLAT_STR_333 STRINGIFY(KEY_TV2)
 [KEY_VCR] = XLAT(KEY_VCR),
 #define XLAT_VAL_334 ((unsigned) (KEY_VCR))
 #define XLAT_STR_334 STRINGIFY(KEY_VCR)
 [KEY_VCR2] = XLAT(KEY_VCR2),
 #define XLAT_VAL_335 ((unsigned) (KEY_VCR2))
 #define XLAT_STR_335 STRINGIFY(KEY_VCR2)
 [KEY_SAT] = XLAT(KEY_SAT),
 #define XLAT_VAL_336 ((unsigned) (KEY_SAT))
 #define XLAT_STR_336 STRINGIFY(KEY_SAT)
 [KEY_SAT2] = XLAT(KEY_SAT2),
 #define XLAT_VAL_337 ((unsigned) (KEY_SAT2))
 #define XLAT_STR_337 STRINGIFY(KEY_SAT2)
 [KEY_CD] = XLAT(KEY_CD),
 #define XLAT_VAL_338 ((unsigned) (KEY_CD))
 #define XLAT_STR_338 STRINGIFY(KEY_CD)
 [KEY_TAPE] = XLAT(KEY_TAPE),
 #define XLAT_VAL_339 ((unsigned) (KEY_TAPE))
 #define XLAT_STR_339 STRINGIFY(KEY_TAPE)
 [KEY_RADIO] = XLAT(KEY_RADIO),
 #define XLAT_VAL_340 ((unsigned) (KEY_RADIO))
 #define XLAT_STR_340 STRINGIFY(KEY_RADIO)
 [KEY_TUNER] = XLAT(KEY_TUNER),
 #define XLAT_VAL_341 ((unsigned) (KEY_TUNER))
 #define XLAT_STR_341 STRINGIFY(KEY_TUNER)
 [KEY_PLAYER] = XLAT(KEY_PLAYER),
 #define XLAT_VAL_342 ((unsigned) (KEY_PLAYER))
 #define XLAT_STR_342 STRINGIFY(KEY_PLAYER)
 [KEY_TEXT] = XLAT(KEY_TEXT),
 #define XLAT_VAL_343 ((unsigned) (KEY_TEXT))
 #define XLAT_STR_343 STRINGIFY(KEY_TEXT)
 [KEY_DVD] = XLAT(KEY_DVD),
 #define XLAT_VAL_344 ((unsigned) (KEY_DVD))
 #define XLAT_STR_344 STRINGIFY(KEY_DVD)
 [KEY_AUX] = XLAT(KEY_AUX),
 #define XLAT_VAL_345 ((unsigned) (KEY_AUX))
 #define XLAT_STR_345 STRINGIFY(KEY_AUX)
 [KEY_MP3] = XLAT(KEY_MP3),
 #define XLAT_VAL_346 ((unsigned) (KEY_MP3))
 #define XLAT_STR_346 STRINGIFY(KEY_MP3)
 [KEY_AUDIO] = XLAT(KEY_AUDIO),
 #define XLAT_VAL_347 ((unsigned) (KEY_AUDIO))
 #define XLAT_STR_347 STRINGIFY(KEY_AUDIO)
 [KEY_VIDEO] = XLAT(KEY_VIDEO),
 #define XLAT_VAL_348 ((unsigned) (KEY_VIDEO))
 #define XLAT_STR_348 STRINGIFY(KEY_VIDEO)
 [KEY_DIRECTORY] = XLAT(KEY_DIRECTORY),
 #define XLAT_VAL_349 ((unsigned) (KEY_DIRECTORY))
 #define XLAT_STR_349 STRINGIFY(KEY_DIRECTORY)
 [KEY_LIST] = XLAT(KEY_LIST),
 #define XLAT_VAL_350 ((unsigned) (KEY_LIST))
 #define XLAT_STR_350 STRINGIFY(KEY_LIST)
 [KEY_MEMO] = XLAT(KEY_MEMO),
 #define XLAT_VAL_351 ((unsigned) (KEY_MEMO))
 #define XLAT_STR_351 STRINGIFY(KEY_MEMO)
 [KEY_CALENDAR] = XLAT(KEY_CALENDAR),
 #define XLAT_VAL_352 ((unsigned) (KEY_CALENDAR))
 #define XLAT_STR_352 STRINGIFY(KEY_CALENDAR)
 [KEY_RED] = XLAT(KEY_RED),
 #define XLAT_VAL_353 ((unsigned) (KEY_RED))
 #define XLAT_STR_353 STRINGIFY(KEY_RED)
 [KEY_GREEN] = XLAT(KEY_GREEN),
 #define XLAT_VAL_354 ((unsigned) (KEY_GREEN))
 #define XLAT_STR_354 STRINGIFY(KEY_GREEN)
 [KEY_YELLOW] = XLAT(KEY_YELLOW),
 #define XLAT_VAL_355 ((unsigned) (KEY_YELLOW))
 #define XLAT_STR_355 STRINGIFY(KEY_YELLOW)
 [KEY_BLUE] = XLAT(KEY_BLUE),
 #define XLAT_VAL_356 ((unsigned) (KEY_BLUE))
 #define XLAT_STR_356 STRINGIFY(KEY_BLUE)
 [KEY_CHANNELUP] = XLAT(KEY_CHANNELUP),
 #define XLAT_VAL_357 ((unsigned) (KEY_CHANNELUP))
 #define XLAT_STR_357 STRINGIFY(KEY_CHANNELUP)
 [KEY_CHANNELDOWN] = XLAT(KEY_CHANNELDOWN),
 #define XLAT_VAL_358 ((unsigned) (KEY_CHANNELDOWN))
 #define XLAT_STR_358 STRINGIFY(KEY_CHANNELDOWN)
 [KEY_FIRST] = XLAT(KEY_FIRST),
 #define XLAT_VAL_359 ((unsigned) (KEY_FIRST))
 #define XLAT_STR_359 STRINGIFY(KEY_FIRST)
 [KEY_LAST] = XLAT(KEY_LAST),
 #define XLAT_VAL_360 ((unsigned) (KEY_LAST))
 #define XLAT_STR_360 STRINGIFY(KEY_LAST)
 [KEY_AB] = XLAT(KEY_AB),
 #define XLAT_VAL_361 ((unsigned) (KEY_AB))
 #define XLAT_STR_361 STRINGIFY(KEY_AB)
 [KEY_NEXT] = XLAT(KEY_NEXT),
 #define XLAT_VAL_362 ((unsigned) (KEY_NEXT))
 #define XLAT_STR_362 STRINGIFY(KEY_NEXT)
 [KEY_RESTART] = XLAT(KEY_RESTART),
 #define XLAT_VAL_363 ((unsigned) (KEY_RESTART))
 #define XLAT_STR_363 STRINGIFY(KEY_RESTART)
 [KEY_SLOW] = XLAT(KEY_SLOW),
 #define XLAT_VAL_364 ((unsigned) (KEY_SLOW))
 #define XLAT_STR_364 STRINGIFY(KEY_SLOW)
 [KEY_SHUFFLE] = XLAT(KEY_SHUFFLE),
 #define XLAT_VAL_365 ((unsigned) (KEY_SHUFFLE))
 #define XLAT_STR_365 STRINGIFY(KEY_SHUFFLE)
 [KEY_BREAK] = XLAT(KEY_BREAK),
 #define XLAT_VAL_366 ((unsigned) (KEY_BREAK))
 #define XLAT_STR_366 STRINGIFY(KEY_BREAK)
 [KEY_PREVIOUS] = XLAT(KEY_PREVIOUS),
 #define XLAT_VAL_367 ((unsigned) (KEY_PREVIOUS))
 #define XLAT_STR_367 STRINGIFY(KEY_PREVIOUS)
 [KEY_DIGITS] = XLAT(KEY_DIGITS),
 #define XLAT_VAL_368 ((unsigned) (KEY_DIGITS))
 #define XLAT_STR_368 STRINGIFY(KEY_DIGITS)
 [KEY_TEEN] = XLAT(KEY_TEEN),
 #define XLAT_VAL_369 ((unsigned) (KEY_TEEN))
 #define XLAT_STR_369 STRINGIFY(KEY_TEEN)
 [KEY_TWEN] = XLAT(KEY_TWEN),
 #define XLAT_VAL_370 ((unsigned) (KEY_TWEN))
 #define XLAT_STR_370 STRINGIFY(KEY_TWEN)
 [KEY_VIDEOPHONE] = XLAT(KEY_VIDEOPHONE),
 #define XLAT_VAL_371 ((unsigned) (KEY_VIDEOPHONE))
 #define XLAT_STR_371 STRINGIFY(KEY_VIDEOPHONE)
 [KEY_GAMES] = XLAT(KEY_GAMES),
 #define XLAT_VAL_372 ((unsigned) (KEY_GAMES))
 #define XLAT_STR_372 STRINGIFY(KEY_GAMES)
 [KEY_ZOOMIN] = XLAT(KEY_ZOOMIN),
 #define XLAT_VAL_373 ((unsigned) (KEY_ZOOMIN))
 #define XLAT_STR_373 STRINGIFY(KEY_ZOOMIN)
 [KEY_ZOOMOUT] = XLAT(KEY_ZOOMOUT),
 #define XLAT_VAL_374 ((unsigned) (KEY_ZOOMOUT))
 #define XLAT_STR_374 STRINGIFY(KEY_ZOOMOUT)
 [KEY_ZOOMRESET] = XLAT(KEY_ZOOMRESET),
 #define XLAT_VAL_375 ((unsigned) (KEY_ZOOMRESET))
 #define XLAT_STR_375 STRINGIFY(KEY_ZOOMRESET)
 [KEY_WORDPROCESSOR] = XLAT(KEY_WORDPROCESSOR),
 #define XLAT_VAL_376 ((unsigned) (KEY_WORDPROCESSOR))
 #define XLAT_STR_376 STRINGIFY(KEY_WORDPROCESSOR)
 [KEY_EDITOR] = XLAT(KEY_EDITOR),
 #define XLAT_VAL_377 ((unsigned) (KEY_EDITOR))
 #define XLAT_STR_377 STRINGIFY(KEY_EDITOR)
 [KEY_SPREADSHEET] = XLAT(KEY_SPREADSHEET),
 #define XLAT_VAL_378 ((unsigned) (KEY_SPREADSHEET))
 #define XLAT_STR_378 STRINGIFY(KEY_SPREADSHEET)
 [KEY_GRAPHICSEDITOR] = XLAT(KEY_GRAPHICSEDITOR),
 #define XLAT_VAL_379 ((unsigned) (KEY_GRAPHICSEDITOR))
 #define XLAT_STR_379 STRINGIFY(KEY_GRAPHICSEDITOR)
 [KEY_PRESENTATION] = XLAT(KEY_PRESENTATION),
 #define XLAT_VAL_380 ((unsigned) (KEY_PRESENTATION))
 #define XLAT_STR_380 STRINGIFY(KEY_PRESENTATION)
 [KEY_DATABASE] = XLAT(KEY_DATABASE),
 #define XLAT_VAL_381 ((unsigned) (KEY_DATABASE))
 #define XLAT_STR_381 STRINGIFY(KEY_DATABASE)
 [KEY_NEWS] = XLAT(KEY_NEWS),
 #define XLAT_VAL_382 ((unsigned) (KEY_NEWS))
 #define XLAT_STR_382 STRINGIFY(KEY_NEWS)
 [KEY_VOICEMAIL] = XLAT(KEY_VOICEMAIL),
 #define XLAT_VAL_383 ((unsigned) (KEY_VOICEMAIL))
 #define XLAT_STR_383 STRINGIFY(KEY_VOICEMAIL)
 [KEY_ADDRESSBOOK] = XLAT(KEY_ADDRESSBOOK),
 #define XLAT_VAL_384 ((unsigned) (KEY_ADDRESSBOOK))
 #define XLAT_STR_384 STRINGIFY(KEY_ADDRESSBOOK)
 [KEY_MESSENGER] = XLAT(KEY_MESSENGER),
 #define XLAT_VAL_385 ((unsigned) (KEY_MESSENGER))
 #define XLAT_STR_385 STRINGIFY(KEY_MESSENGER)
 [KEY_DISPLAYTOGGLE] = XLAT(KEY_DISPLAYTOGGLE),
 #define XLAT_VAL_386 ((unsigned) (KEY_DISPLAYTOGGLE))
 #define XLAT_STR_386 STRINGIFY(KEY_DISPLAYTOGGLE)
 [KEY_SPELLCHECK] = XLAT(KEY_SPELLCHECK),
 #define XLAT_VAL_387 ((unsigned) (KEY_SPELLCHECK))
 #define XLAT_STR_387 STRINGIFY(KEY_SPELLCHECK)
 [KEY_LOGOFF] = XLAT(KEY_LOGOFF),
 #define XLAT_VAL_388 ((unsigned) (KEY_LOGOFF))
 #define XLAT_STR_388 STRINGIFY(KEY_LOGOFF)

 [KEY_DOLLAR] = XLAT(KEY_DOLLAR),
 #define XLAT_VAL_389 ((unsigned) (KEY_DOLLAR))
 #define XLAT_STR_389 STRINGIFY(KEY_DOLLAR)
 [KEY_EURO] = XLAT(KEY_EURO),
 #define XLAT_VAL_390 ((unsigned) (KEY_EURO))
 #define XLAT_STR_390 STRINGIFY(KEY_EURO)

 [KEY_FRAMEBACK] = XLAT(KEY_FRAMEBACK),
 #define XLAT_VAL_391 ((unsigned) (KEY_FRAMEBACK))
 #define XLAT_STR_391 STRINGIFY(KEY_FRAMEBACK)
 [KEY_FRAMEFORWARD] = XLAT(KEY_FRAMEFORWARD),
 #define XLAT_VAL_392 ((unsigned) (KEY_FRAMEFORWARD))
 #define XLAT_STR_392 STRINGIFY(KEY_FRAMEFORWARD)
 [KEY_CONTEXT_MENU] = XLAT(KEY_CONTEXT_MENU),
 #define XLAT_VAL_393 ((unsigned) (KEY_CONTEXT_MENU))
 #define XLAT_STR_393 STRINGIFY(KEY_CONTEXT_MENU)
 [KEY_MEDIA_REPEAT] = XLAT(KEY_MEDIA_REPEAT),
 #define XLAT_VAL_394 ((unsigned) (KEY_MEDIA_REPEAT))
 #define XLAT_STR_394 STRINGIFY(KEY_MEDIA_REPEAT)
 [KEY_10CHANNELSUP] = XLAT(KEY_10CHANNELSUP),
 #define XLAT_VAL_395 ((unsigned) (KEY_10CHANNELSUP))
 #define XLAT_STR_395 STRINGIFY(KEY_10CHANNELSUP)
 [KEY_10CHANNELSDOWN] = XLAT(KEY_10CHANNELSDOWN),
 #define XLAT_VAL_396 ((unsigned) (KEY_10CHANNELSDOWN))
 #define XLAT_STR_396 STRINGIFY(KEY_10CHANNELSDOWN)
 [KEY_IMAGES] = XLAT(KEY_IMAGES),
 #define XLAT_VAL_397 ((unsigned) (KEY_IMAGES))
 #define XLAT_STR_397 STRINGIFY(KEY_IMAGES)

 [KEY_DEL_EOL] = XLAT(KEY_DEL_EOL),
 #define XLAT_VAL_398 ((unsigned) (KEY_DEL_EOL))
 #define XLAT_STR_398 STRINGIFY(KEY_DEL_EOL)
 [KEY_DEL_EOS] = XLAT(KEY_DEL_EOS),
 #define XLAT_VAL_399 ((unsigned) (KEY_DEL_EOS))
 #define XLAT_STR_399 STRINGIFY(KEY_DEL_EOS)
 [KEY_INS_LINE] = XLAT(KEY_INS_LINE),
 #define XLAT_VAL_400 ((unsigned) (KEY_INS_LINE))
 #define XLAT_STR_400 STRINGIFY(KEY_INS_LINE)
 [KEY_DEL_LINE] = XLAT(KEY_DEL_LINE),
 #define XLAT_VAL_401 ((unsigned) (KEY_DEL_LINE))
 #define XLAT_STR_401 STRINGIFY(KEY_DEL_LINE)

 [KEY_FN] = XLAT(KEY_FN),
 #define XLAT_VAL_402 ((unsigned) (KEY_FN))
 #define XLAT_STR_402 STRINGIFY(KEY_FN)
 [KEY_FN_ESC] = XLAT(KEY_FN_ESC),
 #define XLAT_VAL_403 ((unsigned) (KEY_FN_ESC))
 #define XLAT_STR_403 STRINGIFY(KEY_FN_ESC)
 [KEY_FN_F1] = XLAT(KEY_FN_F1),
 #define XLAT_VAL_404 ((unsigned) (KEY_FN_F1))
 #define XLAT_STR_404 STRINGIFY(KEY_FN_F1)
 [KEY_FN_F2] = XLAT(KEY_FN_F2),
 #define XLAT_VAL_405 ((unsigned) (KEY_FN_F2))
 #define XLAT_STR_405 STRINGIFY(KEY_FN_F2)
 [KEY_FN_F3] = XLAT(KEY_FN_F3),
 #define XLAT_VAL_406 ((unsigned) (KEY_FN_F3))
 #define XLAT_STR_406 STRINGIFY(KEY_FN_F3)
 [KEY_FN_F4] = XLAT(KEY_FN_F4),
 #define XLAT_VAL_407 ((unsigned) (KEY_FN_F4))
 #define XLAT_STR_407 STRINGIFY(KEY_FN_F4)
 [KEY_FN_F5] = XLAT(KEY_FN_F5),
 #define XLAT_VAL_408 ((unsigned) (KEY_FN_F5))
 #define XLAT_STR_408 STRINGIFY(KEY_FN_F5)
 [KEY_FN_F6] = XLAT(KEY_FN_F6),
 #define XLAT_VAL_409 ((unsigned) (KEY_FN_F6))
 #define XLAT_STR_409 STRINGIFY(KEY_FN_F6)
 [KEY_FN_F7] = XLAT(KEY_FN_F7),
 #define XLAT_VAL_410 ((unsigned) (KEY_FN_F7))
 #define XLAT_STR_410 STRINGIFY(KEY_FN_F7)
 [KEY_FN_F8] = XLAT(KEY_FN_F8),
 #define XLAT_VAL_411 ((unsigned) (KEY_FN_F8))
 #define XLAT_STR_411 STRINGIFY(KEY_FN_F8)
 [KEY_FN_F9] = XLAT(KEY_FN_F9),
 #define XLAT_VAL_412 ((unsigned) (KEY_FN_F9))
 #define XLAT_STR_412 STRINGIFY(KEY_FN_F9)
 [KEY_FN_F10] = XLAT(KEY_FN_F10),
 #define XLAT_VAL_413 ((unsigned) (KEY_FN_F10))
 #define XLAT_STR_413 STRINGIFY(KEY_FN_F10)
 [KEY_FN_F11] = XLAT(KEY_FN_F11),
 #define XLAT_VAL_414 ((unsigned) (KEY_FN_F11))
 #define XLAT_STR_414 STRINGIFY(KEY_FN_F11)
 [KEY_FN_F12] = XLAT(KEY_FN_F12),
 #define XLAT_VAL_415 ((unsigned) (KEY_FN_F12))
 #define XLAT_STR_415 STRINGIFY(KEY_FN_F12)
 [KEY_FN_1] = XLAT(KEY_FN_1),
 #define XLAT_VAL_416 ((unsigned) (KEY_FN_1))
 #define XLAT_STR_416 STRINGIFY(KEY_FN_1)
 [KEY_FN_2] = XLAT(KEY_FN_2),
 #define XLAT_VAL_417 ((unsigned) (KEY_FN_2))
 #define XLAT_STR_417 STRINGIFY(KEY_FN_2)
 [KEY_FN_D] = XLAT(KEY_FN_D),
 #define XLAT_VAL_418 ((unsigned) (KEY_FN_D))
 #define XLAT_STR_418 STRINGIFY(KEY_FN_D)
 [KEY_FN_E] = XLAT(KEY_FN_E),
 #define XLAT_VAL_419 ((unsigned) (KEY_FN_E))
 #define XLAT_STR_419 STRINGIFY(KEY_FN_E)
 [KEY_FN_F] = XLAT(KEY_FN_F),
 #define XLAT_VAL_420 ((unsigned) (KEY_FN_F))
 #define XLAT_STR_420 STRINGIFY(KEY_FN_F)
 [KEY_FN_S] = XLAT(KEY_FN_S),
 #define XLAT_VAL_421 ((unsigned) (KEY_FN_S))
 #define XLAT_STR_421 STRINGIFY(KEY_FN_S)
 [KEY_FN_B] = XLAT(KEY_FN_B),
 #define XLAT_VAL_422 ((unsigned) (KEY_FN_B))
 #define XLAT_STR_422 STRINGIFY(KEY_FN_B)

 [KEY_BRL_DOT1] = XLAT(KEY_BRL_DOT1),
 #define XLAT_VAL_423 ((unsigned) (KEY_BRL_DOT1))
 #define XLAT_STR_423 STRINGIFY(KEY_BRL_DOT1)
 [KEY_BRL_DOT2] = XLAT(KEY_BRL_DOT2),
 #define XLAT_VAL_424 ((unsigned) (KEY_BRL_DOT2))
 #define XLAT_STR_424 STRINGIFY(KEY_BRL_DOT2)
 [KEY_BRL_DOT3] = XLAT(KEY_BRL_DOT3),
 #define XLAT_VAL_425 ((unsigned) (KEY_BRL_DOT3))
 #define XLAT_STR_425 STRINGIFY(KEY_BRL_DOT3)
 [KEY_BRL_DOT4] = XLAT(KEY_BRL_DOT4),
 #define XLAT_VAL_426 ((unsigned) (KEY_BRL_DOT4))
 #define XLAT_STR_426 STRINGIFY(KEY_BRL_DOT4)
 [KEY_BRL_DOT5] = XLAT(KEY_BRL_DOT5),
 #define XLAT_VAL_427 ((unsigned) (KEY_BRL_DOT5))
 #define XLAT_STR_427 STRINGIFY(KEY_BRL_DOT5)
 [KEY_BRL_DOT6] = XLAT(KEY_BRL_DOT6),
 #define XLAT_VAL_428 ((unsigned) (KEY_BRL_DOT6))
 #define XLAT_STR_428 STRINGIFY(KEY_BRL_DOT6)
 [KEY_BRL_DOT7] = XLAT(KEY_BRL_DOT7),
 #define XLAT_VAL_429 ((unsigned) (KEY_BRL_DOT7))
 #define XLAT_STR_429 STRINGIFY(KEY_BRL_DOT7)
 [KEY_BRL_DOT8] = XLAT(KEY_BRL_DOT8),
 #define XLAT_VAL_430 ((unsigned) (KEY_BRL_DOT8))
 #define XLAT_STR_430 STRINGIFY(KEY_BRL_DOT8)
 [KEY_BRL_DOT9] = XLAT(KEY_BRL_DOT9),
 #define XLAT_VAL_431 ((unsigned) (KEY_BRL_DOT9))
 #define XLAT_STR_431 STRINGIFY(KEY_BRL_DOT9)
 [KEY_BRL_DOT10] = XLAT(KEY_BRL_DOT10),
 #define XLAT_VAL_432 ((unsigned) (KEY_BRL_DOT10))
 #define XLAT_STR_432 STRINGIFY(KEY_BRL_DOT10)

 [KEY_NUMERIC_0] = XLAT(KEY_NUMERIC_0),
 #define XLAT_VAL_433 ((unsigned) (KEY_NUMERIC_0))
 #define XLAT_STR_433 STRINGIFY(KEY_NUMERIC_0)
 [KEY_NUMERIC_1] = XLAT(KEY_NUMERIC_1),
 #define XLAT_VAL_434 ((unsigned) (KEY_NUMERIC_1))
 #define XLAT_STR_434 STRINGIFY(KEY_NUMERIC_1)
 [KEY_NUMERIC_2] = XLAT(KEY_NUMERIC_2),
 #define XLAT_VAL_435 ((unsigned) (KEY_NUMERIC_2))
 #define XLAT_STR_435 STRINGIFY(KEY_NUMERIC_2)
 [KEY_NUMERIC_3] = XLAT(KEY_NUMERIC_3),
 #define XLAT_VAL_436 ((unsigned) (KEY_NUMERIC_3))
 #define XLAT_STR_436 STRINGIFY(KEY_NUMERIC_3)
 [KEY_NUMERIC_4] = XLAT(KEY_NUMERIC_4),
 #define XLAT_VAL_437 ((unsigned) (KEY_NUMERIC_4))
 #define XLAT_STR_437 STRINGIFY(KEY_NUMERIC_4)
 [KEY_NUMERIC_5] = XLAT(KEY_NUMERIC_5),
 #define XLAT_VAL_438 ((unsigned) (KEY_NUMERIC_5))
 #define XLAT_STR_438 STRINGIFY(KEY_NUMERIC_5)
 [KEY_NUMERIC_6] = XLAT(KEY_NUMERIC_6),
 #define XLAT_VAL_439 ((unsigned) (KEY_NUMERIC_6))
 #define XLAT_STR_439 STRINGIFY(KEY_NUMERIC_6)
 [KEY_NUMERIC_7] = XLAT(KEY_NUMERIC_7),
 #define XLAT_VAL_440 ((unsigned) (KEY_NUMERIC_7))
 #define XLAT_STR_440 STRINGIFY(KEY_NUMERIC_7)
 [KEY_NUMERIC_8] = XLAT(KEY_NUMERIC_8),
 #define XLAT_VAL_441 ((unsigned) (KEY_NUMERIC_8))
 #define XLAT_STR_441 STRINGIFY(KEY_NUMERIC_8)
 [KEY_NUMERIC_9] = XLAT(KEY_NUMERIC_9),
 #define XLAT_VAL_442 ((unsigned) (KEY_NUMERIC_9))
 #define XLAT_STR_442 STRINGIFY(KEY_NUMERIC_9)
 [KEY_NUMERIC_STAR] = XLAT(KEY_NUMERIC_STAR),
 #define XLAT_VAL_443 ((unsigned) (KEY_NUMERIC_STAR))
 #define XLAT_STR_443 STRINGIFY(KEY_NUMERIC_STAR)
 [KEY_NUMERIC_POUND] = XLAT(KEY_NUMERIC_POUND),
 #define XLAT_VAL_444 ((unsigned) (KEY_NUMERIC_POUND))
 #define XLAT_STR_444 STRINGIFY(KEY_NUMERIC_POUND)
 [KEY_NUMERIC_A] = XLAT(KEY_NUMERIC_A),
 #define XLAT_VAL_445 ((unsigned) (KEY_NUMERIC_A))
 #define XLAT_STR_445 STRINGIFY(KEY_NUMERIC_A)
 [KEY_NUMERIC_B] = XLAT(KEY_NUMERIC_B),
 #define XLAT_VAL_446 ((unsigned) (KEY_NUMERIC_B))
 #define XLAT_STR_446 STRINGIFY(KEY_NUMERIC_B)
 [KEY_NUMERIC_C] = XLAT(KEY_NUMERIC_C),
 #define XLAT_VAL_447 ((unsigned) (KEY_NUMERIC_C))
 #define XLAT_STR_447 STRINGIFY(KEY_NUMERIC_C)
 [KEY_NUMERIC_D] = XLAT(KEY_NUMERIC_D),
 #define XLAT_VAL_448 ((unsigned) (KEY_NUMERIC_D))
 #define XLAT_STR_448 STRINGIFY(KEY_NUMERIC_D)

 [KEY_CAMERA_FOCUS] = XLAT(KEY_CAMERA_FOCUS),
 #define XLAT_VAL_449 ((unsigned) (KEY_CAMERA_FOCUS))
 #define XLAT_STR_449 STRINGIFY(KEY_CAMERA_FOCUS)
 [KEY_WPS_BUTTON] = XLAT(KEY_WPS_BUTTON),
 #define XLAT_VAL_450 ((unsigned) (KEY_WPS_BUTTON))
 #define XLAT_STR_450 STRINGIFY(KEY_WPS_BUTTON)

 [KEY_TOUCHPAD_TOGGLE] = XLAT(KEY_TOUCHPAD_TOGGLE),
 #define XLAT_VAL_451 ((unsigned) (KEY_TOUCHPAD_TOGGLE))
 #define XLAT_STR_451 STRINGIFY(KEY_TOUCHPAD_TOGGLE)
 [KEY_TOUCHPAD_ON] = XLAT(KEY_TOUCHPAD_ON),
 #define XLAT_VAL_452 ((unsigned) (KEY_TOUCHPAD_ON))
 #define XLAT_STR_452 STRINGIFY(KEY_TOUCHPAD_ON)
 [KEY_TOUCHPAD_OFF] = XLAT(KEY_TOUCHPAD_OFF),
 #define XLAT_VAL_453 ((unsigned) (KEY_TOUCHPAD_OFF))
 #define XLAT_STR_453 STRINGIFY(KEY_TOUCHPAD_OFF)

 [KEY_CAMERA_ZOOMIN] = XLAT(KEY_CAMERA_ZOOMIN),
 #define XLAT_VAL_454 ((unsigned) (KEY_CAMERA_ZOOMIN))
 #define XLAT_STR_454 STRINGIFY(KEY_CAMERA_ZOOMIN)
 [KEY_CAMERA_ZOOMOUT] = XLAT(KEY_CAMERA_ZOOMOUT),
 #define XLAT_VAL_455 ((unsigned) (KEY_CAMERA_ZOOMOUT))
 #define XLAT_STR_455 STRINGIFY(KEY_CAMERA_ZOOMOUT)
 [KEY_CAMERA_UP] = XLAT(KEY_CAMERA_UP),
 #define XLAT_VAL_456 ((unsigned) (KEY_CAMERA_UP))
 #define XLAT_STR_456 STRINGIFY(KEY_CAMERA_UP)
 [KEY_CAMERA_DOWN] = XLAT(KEY_CAMERA_DOWN),
 #define XLAT_VAL_457 ((unsigned) (KEY_CAMERA_DOWN))
 #define XLAT_STR_457 STRINGIFY(KEY_CAMERA_DOWN)
 [KEY_CAMERA_LEFT] = XLAT(KEY_CAMERA_LEFT),
 #define XLAT_VAL_458 ((unsigned) (KEY_CAMERA_LEFT))
 #define XLAT_STR_458 STRINGIFY(KEY_CAMERA_LEFT)
 [KEY_CAMERA_RIGHT] = XLAT(KEY_CAMERA_RIGHT),
 #define XLAT_VAL_459 ((unsigned) (KEY_CAMERA_RIGHT))
 #define XLAT_STR_459 STRINGIFY(KEY_CAMERA_RIGHT)

 [KEY_ATTENDANT_ON] = XLAT(KEY_ATTENDANT_ON),
 #define XLAT_VAL_460 ((unsigned) (KEY_ATTENDANT_ON))
 #define XLAT_STR_460 STRINGIFY(KEY_ATTENDANT_ON)
 [KEY_ATTENDANT_OFF] = XLAT(KEY_ATTENDANT_OFF),
 #define XLAT_VAL_461 ((unsigned) (KEY_ATTENDANT_OFF))
 #define XLAT_STR_461 STRINGIFY(KEY_ATTENDANT_OFF)
 [KEY_ATTENDANT_TOGGLE] = XLAT(KEY_ATTENDANT_TOGGLE),
 #define XLAT_VAL_462 ((unsigned) (KEY_ATTENDANT_TOGGLE))
 #define XLAT_STR_462 STRINGIFY(KEY_ATTENDANT_TOGGLE)
 [KEY_LIGHTS_TOGGLE] = XLAT(KEY_LIGHTS_TOGGLE),
 #define XLAT_VAL_463 ((unsigned) (KEY_LIGHTS_TOGGLE))
 #define XLAT_STR_463 STRINGIFY(KEY_LIGHTS_TOGGLE)

 [BTN_DPAD_UP] = XLAT(BTN_DPAD_UP),
 #define XLAT_VAL_464 ((unsigned) (BTN_DPAD_UP))
 #define XLAT_STR_464 STRINGIFY(BTN_DPAD_UP)
 [BTN_DPAD_DOWN] = XLAT(BTN_DPAD_DOWN),
 #define XLAT_VAL_465 ((unsigned) (BTN_DPAD_DOWN))
 #define XLAT_STR_465 STRINGIFY(BTN_DPAD_DOWN)
 [BTN_DPAD_LEFT] = XLAT(BTN_DPAD_LEFT),
 #define XLAT_VAL_466 ((unsigned) (BTN_DPAD_LEFT))
 #define XLAT_STR_466 STRINGIFY(BTN_DPAD_LEFT)
 [BTN_DPAD_RIGHT] = XLAT(BTN_DPAD_RIGHT),
 #define XLAT_VAL_467 ((unsigned) (BTN_DPAD_RIGHT))
 #define XLAT_STR_467 STRINGIFY(BTN_DPAD_RIGHT)

 [KEY_ALS_TOGGLE] = XLAT(KEY_ALS_TOGGLE),
 #define XLAT_VAL_468 ((unsigned) (KEY_ALS_TOGGLE))
 #define XLAT_STR_468 STRINGIFY(KEY_ALS_TOGGLE)
 [KEY_ROTATE_LOCK_TOGGLE] = XLAT(KEY_ROTATE_LOCK_TOGGLE),
 #define XLAT_VAL_469 ((unsigned) (KEY_ROTATE_LOCK_TOGGLE))
 #define XLAT_STR_469 STRINGIFY(KEY_ROTATE_LOCK_TOGGLE)

 [KEY_BUTTONCONFIG] = XLAT(KEY_BUTTONCONFIG),
 #define XLAT_VAL_470 ((unsigned) (KEY_BUTTONCONFIG))
 #define XLAT_STR_470 STRINGIFY(KEY_BUTTONCONFIG)
 [KEY_TASKMANAGER] = XLAT(KEY_TASKMANAGER),
 #define XLAT_VAL_471 ((unsigned) (KEY_TASKMANAGER))
 #define XLAT_STR_471 STRINGIFY(KEY_TASKMANAGER)
 [KEY_JOURNAL] = XLAT(KEY_JOURNAL),
 #define XLAT_VAL_472 ((unsigned) (KEY_JOURNAL))
 #define XLAT_STR_472 STRINGIFY(KEY_JOURNAL)
 [KEY_CONTROLPANEL] = XLAT(KEY_CONTROLPANEL),
 #define XLAT_VAL_473 ((unsigned) (KEY_CONTROLPANEL))
 #define XLAT_STR_473 STRINGIFY(KEY_CONTROLPANEL)
 [KEY_APPSELECT] = XLAT(KEY_APPSELECT),
 #define XLAT_VAL_474 ((unsigned) (KEY_APPSELECT))
 #define XLAT_STR_474 STRINGIFY(KEY_APPSELECT)
 [KEY_SCREENSAVER] = XLAT(KEY_SCREENSAVER),
 #define XLAT_VAL_475 ((unsigned) (KEY_SCREENSAVER))
 #define XLAT_STR_475 STRINGIFY(KEY_SCREENSAVER)
 [KEY_VOICECOMMAND] = XLAT(KEY_VOICECOMMAND),
 #define XLAT_VAL_476 ((unsigned) (KEY_VOICECOMMAND))
 #define XLAT_STR_476 STRINGIFY(KEY_VOICECOMMAND)
 [KEY_ASSISTANT] = XLAT(KEY_ASSISTANT),
 #define XLAT_VAL_477 ((unsigned) (KEY_ASSISTANT))
 #define XLAT_STR_477 STRINGIFY(KEY_ASSISTANT)
 [KEY_KBD_LAYOUT_NEXT] = XLAT(KEY_KBD_LAYOUT_NEXT),
 #define XLAT_VAL_478 ((unsigned) (KEY_KBD_LAYOUT_NEXT))
 #define XLAT_STR_478 STRINGIFY(KEY_KBD_LAYOUT_NEXT)

#ifndef STRACE_WORKAROUND_FOR_KEY_BRIGHTNESS_MIN
# define STRACE_WORKAROUND_FOR_KEY_BRIGHTNESS_MIN
/*
* KEY_BRIGHTNESS_MIN and KEY_BRIGHTNESS_MAX constants were introduced
* by Linux kernel commit v3.16-rc1~30^2~6^2~1^2~7.
* Apparently, RHEL7 introduced an alternative KEY_BRIGHTNESS_MIN constant
* with the same value as upstream KEY_BRIGHTNESS_MAX.
* Downstream vendors are *not* allowed to do this.
* Ignore the system value of KEY_BRIGHTNESS_MIN.
*/
# undef KEY_BRIGHTNESS_MIN
#endif
 [KEY_BRIGHTNESS_MIN] = XLAT(KEY_BRIGHTNESS_MIN),
 #define XLAT_VAL_479 ((unsigned) (KEY_BRIGHTNESS_MIN))
 #define XLAT_STR_479 STRINGIFY(KEY_BRIGHTNESS_MIN)

 [KEY_BRIGHTNESS_MAX] = XLAT(KEY_BRIGHTNESS_MAX),
 #define XLAT_VAL_480 ((unsigned) (KEY_BRIGHTNESS_MAX))
 #define XLAT_STR_480 STRINGIFY(KEY_BRIGHTNESS_MAX)

 [KEY_KBDINPUTASSIST_PREV] = XLAT(KEY_KBDINPUTASSIST_PREV),
 #define XLAT_VAL_481 ((unsigned) (KEY_KBDINPUTASSIST_PREV))
 #define XLAT_STR_481 STRINGIFY(KEY_KBDINPUTASSIST_PREV)
 [KEY_KBDINPUTASSIST_NEXT] = XLAT(KEY_KBDINPUTASSIST_NEXT),
 #define XLAT_VAL_482 ((unsigned) (KEY_KBDINPUTASSIST_NEXT))
 #define XLAT_STR_482 STRINGIFY(KEY_KBDINPUTASSIST_NEXT)
 [KEY_KBDINPUTASSIST_PREVGROUP] = XLAT(KEY_KBDINPUTASSIST_PREVGROUP),
 #define XLAT_VAL_483 ((unsigned) (KEY_KBDINPUTASSIST_PREVGROUP))
 #define XLAT_STR_483 STRINGIFY(KEY_KBDINPUTASSIST_PREVGROUP)
 [KEY_KBDINPUTASSIST_NEXTGROUP] = XLAT(KEY_KBDINPUTASSIST_NEXTGROUP),
 #define XLAT_VAL_484 ((unsigned) (KEY_KBDINPUTASSIST_NEXTGROUP))
 #define XLAT_STR_484 STRINGIFY(KEY_KBDINPUTASSIST_NEXTGROUP)
 [KEY_KBDINPUTASSIST_ACCEPT] = XLAT(KEY_KBDINPUTASSIST_ACCEPT),
 #define XLAT_VAL_485 ((unsigned) (KEY_KBDINPUTASSIST_ACCEPT))
 #define XLAT_STR_485 STRINGIFY(KEY_KBDINPUTASSIST_ACCEPT)
 [KEY_KBDINPUTASSIST_CANCEL] = XLAT(KEY_KBDINPUTASSIST_CANCEL),
 #define XLAT_VAL_486 ((unsigned) (KEY_KBDINPUTASSIST_CANCEL))
 #define XLAT_STR_486 STRINGIFY(KEY_KBDINPUTASSIST_CANCEL)

 [KEY_RIGHT_UP] = XLAT(KEY_RIGHT_UP),
 #define XLAT_VAL_487 ((unsigned) (KEY_RIGHT_UP))
 #define XLAT_STR_487 STRINGIFY(KEY_RIGHT_UP)
 [KEY_RIGHT_DOWN] = XLAT(KEY_RIGHT_DOWN),
 #define XLAT_VAL_488 ((unsigned) (KEY_RIGHT_DOWN))
 #define XLAT_STR_488 STRINGIFY(KEY_RIGHT_DOWN)
 [KEY_LEFT_UP] = XLAT(KEY_LEFT_UP),
 #define XLAT_VAL_489 ((unsigned) (KEY_LEFT_UP))
 #define XLAT_STR_489 STRINGIFY(KEY_LEFT_UP)
 [KEY_LEFT_DOWN] = XLAT(KEY_LEFT_DOWN),
 #define XLAT_VAL_490 ((unsigned) (KEY_LEFT_DOWN))
 #define XLAT_STR_490 STRINGIFY(KEY_LEFT_DOWN)

 [KEY_ROOT_MENU] = XLAT(KEY_ROOT_MENU),
 #define XLAT_VAL_491 ((unsigned) (KEY_ROOT_MENU))
 #define XLAT_STR_491 STRINGIFY(KEY_ROOT_MENU)
 [KEY_MEDIA_TOP_MENU] = XLAT(KEY_MEDIA_TOP_MENU),
 #define XLAT_VAL_492 ((unsigned) (KEY_MEDIA_TOP_MENU))
 #define XLAT_STR_492 STRINGIFY(KEY_MEDIA_TOP_MENU)
 [KEY_NUMERIC_11] = XLAT(KEY_NUMERIC_11),
 #define XLAT_VAL_493 ((unsigned) (KEY_NUMERIC_11))
 #define XLAT_STR_493 STRINGIFY(KEY_NUMERIC_11)
 [KEY_NUMERIC_12] = XLAT(KEY_NUMERIC_12),
 #define XLAT_VAL_494 ((unsigned) (KEY_NUMERIC_12))
 #define XLAT_STR_494 STRINGIFY(KEY_NUMERIC_12)

 [KEY_AUDIO_DESC] = XLAT(KEY_AUDIO_DESC),
 #define XLAT_VAL_495 ((unsigned) (KEY_AUDIO_DESC))
 #define XLAT_STR_495 STRINGIFY(KEY_AUDIO_DESC)
 [KEY_3D_MODE] = XLAT(KEY_3D_MODE),
 #define XLAT_VAL_496 ((unsigned) (KEY_3D_MODE))
 #define XLAT_STR_496 STRINGIFY(KEY_3D_MODE)
 [KEY_NEXT_FAVORITE] = XLAT(KEY_NEXT_FAVORITE),
 #define XLAT_VAL_497 ((unsigned) (KEY_NEXT_FAVORITE))
 #define XLAT_STR_497 STRINGIFY(KEY_NEXT_FAVORITE)
 [KEY_STOP_RECORD] = XLAT(KEY_STOP_RECORD),
 #define XLAT_VAL_498 ((unsigned) (KEY_STOP_RECORD))
 #define XLAT_STR_498 STRINGIFY(KEY_STOP_RECORD)
 [KEY_PAUSE_RECORD] = XLAT(KEY_PAUSE_RECORD),
 #define XLAT_VAL_499 ((unsigned) (KEY_PAUSE_RECORD))
 #define XLAT_STR_499 STRINGIFY(KEY_PAUSE_RECORD)
 [KEY_VOD] = XLAT(KEY_VOD),
 #define XLAT_VAL_500 ((unsigned) (KEY_VOD))
 #define XLAT_STR_500 STRINGIFY(KEY_VOD)
 [KEY_UNMUTE] = XLAT(KEY_UNMUTE),
 #define XLAT_VAL_501 ((unsigned) (KEY_UNMUTE))
 #define XLAT_STR_501 STRINGIFY(KEY_UNMUTE)
 [KEY_FASTREVERSE] = XLAT(KEY_FASTREVERSE),
 #define XLAT_VAL_502 ((unsigned) (KEY_FASTREVERSE))
 #define XLAT_STR_502 STRINGIFY(KEY_FASTREVERSE)
 [KEY_SLOWREVERSE] = XLAT(KEY_SLOWREVERSE),
 #define XLAT_VAL_503 ((unsigned) (KEY_SLOWREVERSE))
 #define XLAT_STR_503 STRINGIFY(KEY_SLOWREVERSE)

#ifndef STRACE_WORKAROUND_FOR_KEY_DATA
# define STRACE_WORKAROUND_FOR_KEY_DATA
/*
* Linux kernel commit v4.9-rc8~12^2 has changed the value of KEY_DATA
* constant introduced by commit v4.7-rc6~32^2~6^2 because the old value
* was already used by KEY_FASTREVERSE.
* Looks like the best way to handle this situation is to pretend that
* the old value of KEY_DATA didn't exist.
*/
# undef KEY_DATA
#endif
 [KEY_DATA] = XLAT(KEY_DATA),
 #define XLAT_VAL_504 ((unsigned) (KEY_DATA))
 #define XLAT_STR_504 STRINGIFY(KEY_DATA)

 [KEY_ONSCREEN_KEYBOARD] = XLAT(KEY_ONSCREEN_KEYBOARD),
 #define XLAT_VAL_505 ((unsigned) (KEY_ONSCREEN_KEYBOARD))
 #define XLAT_STR_505 STRINGIFY(KEY_ONSCREEN_KEYBOARD)
 [KEY_PRIVACY_SCREEN_TOGGLE] = XLAT(KEY_PRIVACY_SCREEN_TOGGLE),
 #define XLAT_VAL_506 ((unsigned) (KEY_PRIVACY_SCREEN_TOGGLE))
 #define XLAT_STR_506 STRINGIFY(KEY_PRIVACY_SCREEN_TOGGLE)

 [KEY_SELECTIVE_SCREENSHOT] = XLAT(KEY_SELECTIVE_SCREENSHOT),
 #define XLAT_VAL_507 ((unsigned) (KEY_SELECTIVE_SCREENSHOT))
 #define XLAT_STR_507 STRINGIFY(KEY_SELECTIVE_SCREENSHOT)

 [KEY_MACRO1] = XLAT(KEY_MACRO1),
 #define XLAT_VAL_508 ((unsigned) (KEY_MACRO1))
 #define XLAT_STR_508 STRINGIFY(KEY_MACRO1)
 [KEY_MACRO2] = XLAT(KEY_MACRO2),
 #define XLAT_VAL_509 ((unsigned) (KEY_MACRO2))
 #define XLAT_STR_509 STRINGIFY(KEY_MACRO2)
 [KEY_MACRO3] = XLAT(KEY_MACRO3),
 #define XLAT_VAL_510 ((unsigned) (KEY_MACRO3))
 #define XLAT_STR_510 STRINGIFY(KEY_MACRO3)
 [KEY_MACRO4] = XLAT(KEY_MACRO4),
 #define XLAT_VAL_511 ((unsigned) (KEY_MACRO4))
 #define XLAT_STR_511 STRINGIFY(KEY_MACRO4)
 [KEY_MACRO5] = XLAT(KEY_MACRO5),
 #define XLAT_VAL_512 ((unsigned) (KEY_MACRO5))
 #define XLAT_STR_512 STRINGIFY(KEY_MACRO5)
 [KEY_MACRO6] = XLAT(KEY_MACRO6),
 #define XLAT_VAL_513 ((unsigned) (KEY_MACRO6))
 #define XLAT_STR_513 STRINGIFY(KEY_MACRO6)
 [KEY_MACRO7] = XLAT(KEY_MACRO7),
 #define XLAT_VAL_514 ((unsigned) (KEY_MACRO7))
 #define XLAT_STR_514 STRINGIFY(KEY_MACRO7)
 [KEY_MACRO8] = XLAT(KEY_MACRO8),
 #define XLAT_VAL_515 ((unsigned) (KEY_MACRO8))
 #define XLAT_STR_515 STRINGIFY(KEY_MACRO8)
 [KEY_MACRO9] = XLAT(KEY_MACRO9),
 #define XLAT_VAL_516 ((unsigned) (KEY_MACRO9))
 #define XLAT_STR_516 STRINGIFY(KEY_MACRO9)
 [KEY_MACRO10] = XLAT(KEY_MACRO10),
 #define XLAT_VAL_517 ((unsigned) (KEY_MACRO10))
 #define XLAT_STR_517 STRINGIFY(KEY_MACRO10)
 [KEY_MACRO11] = XLAT(KEY_MACRO11),
 #define XLAT_VAL_518 ((unsigned) (KEY_MACRO11))
 #define XLAT_STR_518 STRINGIFY(KEY_MACRO11)
 [KEY_MACRO12] = XLAT(KEY_MACRO12),
 #define XLAT_VAL_519 ((unsigned) (KEY_MACRO12))
 #define XLAT_STR_519 STRINGIFY(KEY_MACRO12)
 [KEY_MACRO13] = XLAT(KEY_MACRO13),
 #define XLAT_VAL_520 ((unsigned) (KEY_MACRO13))
 #define XLAT_STR_520 STRINGIFY(KEY_MACRO13)
 [KEY_MACRO14] = XLAT(KEY_MACRO14),
 #define XLAT_VAL_521 ((unsigned) (KEY_MACRO14))
 #define XLAT_STR_521 STRINGIFY(KEY_MACRO14)
 [KEY_MACRO15] = XLAT(KEY_MACRO15),
 #define XLAT_VAL_522 ((unsigned) (KEY_MACRO15))
 #define XLAT_STR_522 STRINGIFY(KEY_MACRO15)
 [KEY_MACRO16] = XLAT(KEY_MACRO16),
 #define XLAT_VAL_523 ((unsigned) (KEY_MACRO16))
 #define XLAT_STR_523 STRINGIFY(KEY_MACRO16)
 [KEY_MACRO17] = XLAT(KEY_MACRO17),
 #define XLAT_VAL_524 ((unsigned) (KEY_MACRO17))
 #define XLAT_STR_524 STRINGIFY(KEY_MACRO17)
 [KEY_MACRO18] = XLAT(KEY_MACRO18),
 #define XLAT_VAL_525 ((unsigned) (KEY_MACRO18))
 #define XLAT_STR_525 STRINGIFY(KEY_MACRO18)
 [KEY_MACRO19] = XLAT(KEY_MACRO19),
 #define XLAT_VAL_526 ((unsigned) (KEY_MACRO19))
 #define XLAT_STR_526 STRINGIFY(KEY_MACRO19)
 [KEY_MACRO20] = XLAT(KEY_MACRO20),
 #define XLAT_VAL_527 ((unsigned) (KEY_MACRO20))
 #define XLAT_STR_527 STRINGIFY(KEY_MACRO20)
 [KEY_MACRO21] = XLAT(KEY_MACRO21),
 #define XLAT_VAL_528 ((unsigned) (KEY_MACRO21))
 #define XLAT_STR_528 STRINGIFY(KEY_MACRO21)
 [KEY_MACRO22] = XLAT(KEY_MACRO22),
 #define XLAT_VAL_529 ((unsigned) (KEY_MACRO22))
 #define XLAT_STR_529 STRINGIFY(KEY_MACRO22)
 [KEY_MACRO23] = XLAT(KEY_MACRO23),
 #define XLAT_VAL_530 ((unsigned) (KEY_MACRO23))
 #define XLAT_STR_530 STRINGIFY(KEY_MACRO23)
 [KEY_MACRO24] = XLAT(KEY_MACRO24),
 #define XLAT_VAL_531 ((unsigned) (KEY_MACRO24))
 #define XLAT_STR_531 STRINGIFY(KEY_MACRO24)
 [KEY_MACRO25] = XLAT(KEY_MACRO25),
 #define XLAT_VAL_532 ((unsigned) (KEY_MACRO25))
 #define XLAT_STR_532 STRINGIFY(KEY_MACRO25)
 [KEY_MACRO26] = XLAT(KEY_MACRO26),
 #define XLAT_VAL_533 ((unsigned) (KEY_MACRO26))
 #define XLAT_STR_533 STRINGIFY(KEY_MACRO26)
 [KEY_MACRO27] = XLAT(KEY_MACRO27),
 #define XLAT_VAL_534 ((unsigned) (KEY_MACRO27))
 #define XLAT_STR_534 STRINGIFY(KEY_MACRO27)
 [KEY_MACRO28] = XLAT(KEY_MACRO28),
 #define XLAT_VAL_535 ((unsigned) (KEY_MACRO28))
 #define XLAT_STR_535 STRINGIFY(KEY_MACRO28)
 [KEY_MACRO29] = XLAT(KEY_MACRO29),
 #define XLAT_VAL_536 ((unsigned) (KEY_MACRO29))
 #define XLAT_STR_536 STRINGIFY(KEY_MACRO29)
 [KEY_MACRO30] = XLAT(KEY_MACRO30),
 #define XLAT_VAL_537 ((unsigned) (KEY_MACRO30))
 #define XLAT_STR_537 STRINGIFY(KEY_MACRO30)

 [KEY_MACRO_RECORD_START] = XLAT(KEY_MACRO_RECORD_START),
 #define XLAT_VAL_538 ((unsigned) (KEY_MACRO_RECORD_START))
 #define XLAT_STR_538 STRINGIFY(KEY_MACRO_RECORD_START)
 [KEY_MACRO_RECORD_STOP] = XLAT(KEY_MACRO_RECORD_STOP),
 #define XLAT_VAL_539 ((unsigned) (KEY_MACRO_RECORD_STOP))
 #define XLAT_STR_539 STRINGIFY(KEY_MACRO_RECORD_STOP)
 [KEY_MACRO_PRESET_CYCLE] = XLAT(KEY_MACRO_PRESET_CYCLE),
 #define XLAT_VAL_540 ((unsigned) (KEY_MACRO_PRESET_CYCLE))
 #define XLAT_STR_540 STRINGIFY(KEY_MACRO_PRESET_CYCLE)
 [KEY_MACRO_PRESET1] = XLAT(KEY_MACRO_PRESET1),
 #define XLAT_VAL_541 ((unsigned) (KEY_MACRO_PRESET1))
 #define XLAT_STR_541 STRINGIFY(KEY_MACRO_PRESET1)
 [KEY_MACRO_PRESET2] = XLAT(KEY_MACRO_PRESET2),
 #define XLAT_VAL_542 ((unsigned) (KEY_MACRO_PRESET2))
 #define XLAT_STR_542 STRINGIFY(KEY_MACRO_PRESET2)
 [KEY_MACRO_PRESET3] = XLAT(KEY_MACRO_PRESET3),
 #define XLAT_VAL_543 ((unsigned) (KEY_MACRO_PRESET3))
 #define XLAT_STR_543 STRINGIFY(KEY_MACRO_PRESET3)

 [KEY_KBD_LCD_MENU1] = XLAT(KEY_KBD_LCD_MENU1),
 #define XLAT_VAL_544 ((unsigned) (KEY_KBD_LCD_MENU1))
 #define XLAT_STR_544 STRINGIFY(KEY_KBD_LCD_MENU1)
 [KEY_KBD_LCD_MENU2] = XLAT(KEY_KBD_LCD_MENU2),
 #define XLAT_VAL_545 ((unsigned) (KEY_KBD_LCD_MENU2))
 #define XLAT_STR_545 STRINGIFY(KEY_KBD_LCD_MENU2)
 [KEY_KBD_LCD_MENU3] = XLAT(KEY_KBD_LCD_MENU3),
 #define XLAT_VAL_546 ((unsigned) (KEY_KBD_LCD_MENU3))
 #define XLAT_STR_546 STRINGIFY(KEY_KBD_LCD_MENU3)
 [KEY_KBD_LCD_MENU4] = XLAT(KEY_KBD_LCD_MENU4),
 #define XLAT_VAL_547 ((unsigned) (KEY_KBD_LCD_MENU4))
 #define XLAT_STR_547 STRINGIFY(KEY_KBD_LCD_MENU4)
 [KEY_KBD_LCD_MENU5] = XLAT(KEY_KBD_LCD_MENU5),
 #define XLAT_VAL_548 ((unsigned) (KEY_KBD_LCD_MENU5))
 #define XLAT_STR_548 STRINGIFY(KEY_KBD_LCD_MENU5)

 [BTN_TRIGGER_HAPPY1] = XLAT(BTN_TRIGGER_HAPPY1),
 #define XLAT_VAL_549 ((unsigned) (BTN_TRIGGER_HAPPY1))
 #define XLAT_STR_549 STRINGIFY(BTN_TRIGGER_HAPPY1)
 [BTN_TRIGGER_HAPPY2] = XLAT(BTN_TRIGGER_HAPPY2),
 #define XLAT_VAL_550 ((unsigned) (BTN_TRIGGER_HAPPY2))
 #define XLAT_STR_550 STRINGIFY(BTN_TRIGGER_HAPPY2)
 [BTN_TRIGGER_HAPPY3] = XLAT(BTN_TRIGGER_HAPPY3),
 #define XLAT_VAL_551 ((unsigned) (BTN_TRIGGER_HAPPY3))
 #define XLAT_STR_551 STRINGIFY(BTN_TRIGGER_HAPPY3)
 [BTN_TRIGGER_HAPPY4] = XLAT(BTN_TRIGGER_HAPPY4),
 #define XLAT_VAL_552 ((unsigned) (BTN_TRIGGER_HAPPY4))
 #define XLAT_STR_552 STRINGIFY(BTN_TRIGGER_HAPPY4)
 [BTN_TRIGGER_HAPPY5] = XLAT(BTN_TRIGGER_HAPPY5),
 #define XLAT_VAL_553 ((unsigned) (BTN_TRIGGER_HAPPY5))
 #define XLAT_STR_553 STRINGIFY(BTN_TRIGGER_HAPPY5)
 [BTN_TRIGGER_HAPPY6] = XLAT(BTN_TRIGGER_HAPPY6),
 #define XLAT_VAL_554 ((unsigned) (BTN_TRIGGER_HAPPY6))
 #define XLAT_STR_554 STRINGIFY(BTN_TRIGGER_HAPPY6)
 [BTN_TRIGGER_HAPPY7] = XLAT(BTN_TRIGGER_HAPPY7),
 #define XLAT_VAL_555 ((unsigned) (BTN_TRIGGER_HAPPY7))
 #define XLAT_STR_555 STRINGIFY(BTN_TRIGGER_HAPPY7)
 [BTN_TRIGGER_HAPPY8] = XLAT(BTN_TRIGGER_HAPPY8),
 #define XLAT_VAL_556 ((unsigned) (BTN_TRIGGER_HAPPY8))
 #define XLAT_STR_556 STRINGIFY(BTN_TRIGGER_HAPPY8)
 [BTN_TRIGGER_HAPPY9] = XLAT(BTN_TRIGGER_HAPPY9),
 #define XLAT_VAL_557 ((unsigned) (BTN_TRIGGER_HAPPY9))
 #define XLAT_STR_557 STRINGIFY(BTN_TRIGGER_HAPPY9)
 [BTN_TRIGGER_HAPPY10] = XLAT(BTN_TRIGGER_HAPPY10),
 #define XLAT_VAL_558 ((unsigned) (BTN_TRIGGER_HAPPY10))
 #define XLAT_STR_558 STRINGIFY(BTN_TRIGGER_HAPPY10)
 [BTN_TRIGGER_HAPPY11] = XLAT(BTN_TRIGGER_HAPPY11),
 #define XLAT_VAL_559 ((unsigned) (BTN_TRIGGER_HAPPY11))
 #define XLAT_STR_559 STRINGIFY(BTN_TRIGGER_HAPPY11)
 [BTN_TRIGGER_HAPPY12] = XLAT(BTN_TRIGGER_HAPPY12),
 #define XLAT_VAL_560 ((unsigned) (BTN_TRIGGER_HAPPY12))
 #define XLAT_STR_560 STRINGIFY(BTN_TRIGGER_HAPPY12)
 [BTN_TRIGGER_HAPPY13] = XLAT(BTN_TRIGGER_HAPPY13),
 #define XLAT_VAL_561 ((unsigned) (BTN_TRIGGER_HAPPY13))
 #define XLAT_STR_561 STRINGIFY(BTN_TRIGGER_HAPPY13)
 [BTN_TRIGGER_HAPPY14] = XLAT(BTN_TRIGGER_HAPPY14),
 #define XLAT_VAL_562 ((unsigned) (BTN_TRIGGER_HAPPY14))
 #define XLAT_STR_562 STRINGIFY(BTN_TRIGGER_HAPPY14)
 [BTN_TRIGGER_HAPPY15] = XLAT(BTN_TRIGGER_HAPPY15),
 #define XLAT_VAL_563 ((unsigned) (BTN_TRIGGER_HAPPY15))
 #define XLAT_STR_563 STRINGIFY(BTN_TRIGGER_HAPPY15)
 [BTN_TRIGGER_HAPPY16] = XLAT(BTN_TRIGGER_HAPPY16),
 #define XLAT_VAL_564 ((unsigned) (BTN_TRIGGER_HAPPY16))
 #define XLAT_STR_564 STRINGIFY(BTN_TRIGGER_HAPPY16)
 [BTN_TRIGGER_HAPPY17] = XLAT(BTN_TRIGGER_HAPPY17),
 #define XLAT_VAL_565 ((unsigned) (BTN_TRIGGER_HAPPY17))
 #define XLAT_STR_565 STRINGIFY(BTN_TRIGGER_HAPPY17)
 [BTN_TRIGGER_HAPPY18] = XLAT(BTN_TRIGGER_HAPPY18),
 #define XLAT_VAL_566 ((unsigned) (BTN_TRIGGER_HAPPY18))
 #define XLAT_STR_566 STRINGIFY(BTN_TRIGGER_HAPPY18)
 [BTN_TRIGGER_HAPPY19] = XLAT(BTN_TRIGGER_HAPPY19),
 #define XLAT_VAL_567 ((unsigned) (BTN_TRIGGER_HAPPY19))
 #define XLAT_STR_567 STRINGIFY(BTN_TRIGGER_HAPPY19)
 [BTN_TRIGGER_HAPPY20] = XLAT(BTN_TRIGGER_HAPPY20),
 #define XLAT_VAL_568 ((unsigned) (BTN_TRIGGER_HAPPY20))
 #define XLAT_STR_568 STRINGIFY(BTN_TRIGGER_HAPPY20)
 [BTN_TRIGGER_HAPPY21] = XLAT(BTN_TRIGGER_HAPPY21),
 #define XLAT_VAL_569 ((unsigned) (BTN_TRIGGER_HAPPY21))
 #define XLAT_STR_569 STRINGIFY(BTN_TRIGGER_HAPPY21)
 [BTN_TRIGGER_HAPPY22] = XLAT(BTN_TRIGGER_HAPPY22),
 #define XLAT_VAL_570 ((unsigned) (BTN_TRIGGER_HAPPY22))
 #define XLAT_STR_570 STRINGIFY(BTN_TRIGGER_HAPPY22)
 [BTN_TRIGGER_HAPPY23] = XLAT(BTN_TRIGGER_HAPPY23),
 #define XLAT_VAL_571 ((unsigned) (BTN_TRIGGER_HAPPY23))
 #define XLAT_STR_571 STRINGIFY(BTN_TRIGGER_HAPPY23)
 [BTN_TRIGGER_HAPPY24] = XLAT(BTN_TRIGGER_HAPPY24),
 #define XLAT_VAL_572 ((unsigned) (BTN_TRIGGER_HAPPY24))
 #define XLAT_STR_572 STRINGIFY(BTN_TRIGGER_HAPPY24)
 [BTN_TRIGGER_HAPPY25] = XLAT(BTN_TRIGGER_HAPPY25),
 #define XLAT_VAL_573 ((unsigned) (BTN_TRIGGER_HAPPY25))
 #define XLAT_STR_573 STRINGIFY(BTN_TRIGGER_HAPPY25)
 [BTN_TRIGGER_HAPPY26] = XLAT(BTN_TRIGGER_HAPPY26),
 #define XLAT_VAL_574 ((unsigned) (BTN_TRIGGER_HAPPY26))
 #define XLAT_STR_574 STRINGIFY(BTN_TRIGGER_HAPPY26)
 [BTN_TRIGGER_HAPPY27] = XLAT(BTN_TRIGGER_HAPPY27),
 #define XLAT_VAL_575 ((unsigned) (BTN_TRIGGER_HAPPY27))
 #define XLAT_STR_575 STRINGIFY(BTN_TRIGGER_HAPPY27)
 [BTN_TRIGGER_HAPPY28] = XLAT(BTN_TRIGGER_HAPPY28),
 #define XLAT_VAL_576 ((unsigned) (BTN_TRIGGER_HAPPY28))
 #define XLAT_STR_576 STRINGIFY(BTN_TRIGGER_HAPPY28)
 [BTN_TRIGGER_HAPPY29] = XLAT(BTN_TRIGGER_HAPPY29),
 #define XLAT_VAL_577 ((unsigned) (BTN_TRIGGER_HAPPY29))
 #define XLAT_STR_577 STRINGIFY(BTN_TRIGGER_HAPPY29)
 [BTN_TRIGGER_HAPPY30] = XLAT(BTN_TRIGGER_HAPPY30),
 #define XLAT_VAL_578 ((unsigned) (BTN_TRIGGER_HAPPY30))
 #define XLAT_STR_578 STRINGIFY(BTN_TRIGGER_HAPPY30)
 [BTN_TRIGGER_HAPPY31] = XLAT(BTN_TRIGGER_HAPPY31),
 #define XLAT_VAL_579 ((unsigned) (BTN_TRIGGER_HAPPY31))
 #define XLAT_STR_579 STRINGIFY(BTN_TRIGGER_HAPPY31)
 [BTN_TRIGGER_HAPPY32] = XLAT(BTN_TRIGGER_HAPPY32),
 #define XLAT_VAL_580 ((unsigned) (BTN_TRIGGER_HAPPY32))
 #define XLAT_STR_580 STRINGIFY(BTN_TRIGGER_HAPPY32)
 [BTN_TRIGGER_HAPPY33] = XLAT(BTN_TRIGGER_HAPPY33),
 #define XLAT_VAL_581 ((unsigned) (BTN_TRIGGER_HAPPY33))
 #define XLAT_STR_581 STRINGIFY(BTN_TRIGGER_HAPPY33)
 [BTN_TRIGGER_HAPPY34] = XLAT(BTN_TRIGGER_HAPPY34),
 #define XLAT_VAL_582 ((unsigned) (BTN_TRIGGER_HAPPY34))
 #define XLAT_STR_582 STRINGIFY(BTN_TRIGGER_HAPPY34)
 [BTN_TRIGGER_HAPPY35] = XLAT(BTN_TRIGGER_HAPPY35),
 #define XLAT_VAL_583 ((unsigned) (BTN_TRIGGER_HAPPY35))
 #define XLAT_STR_583 STRINGIFY(BTN_TRIGGER_HAPPY35)
 [BTN_TRIGGER_HAPPY36] = XLAT(BTN_TRIGGER_HAPPY36),
 #define XLAT_VAL_584 ((unsigned) (BTN_TRIGGER_HAPPY36))
 #define XLAT_STR_584 STRINGIFY(BTN_TRIGGER_HAPPY36)
 [BTN_TRIGGER_HAPPY37] = XLAT(BTN_TRIGGER_HAPPY37),
 #define XLAT_VAL_585 ((unsigned) (BTN_TRIGGER_HAPPY37))
 #define XLAT_STR_585 STRINGIFY(BTN_TRIGGER_HAPPY37)
 [BTN_TRIGGER_HAPPY38] = XLAT(BTN_TRIGGER_HAPPY38),
 #define XLAT_VAL_586 ((unsigned) (BTN_TRIGGER_HAPPY38))
 #define XLAT_STR_586 STRINGIFY(BTN_TRIGGER_HAPPY38)
 [BTN_TRIGGER_HAPPY39] = XLAT(BTN_TRIGGER_HAPPY39),
 #define XLAT_VAL_587 ((unsigned) (BTN_TRIGGER_HAPPY39))
 #define XLAT_STR_587 STRINGIFY(BTN_TRIGGER_HAPPY39)
 [BTN_TRIGGER_HAPPY40] = XLAT(BTN_TRIGGER_HAPPY40),
 #define XLAT_VAL_588 ((unsigned) (BTN_TRIGGER_HAPPY40))
 #define XLAT_STR_588 STRINGIFY(BTN_TRIGGER_HAPPY40)
};
static
const struct xlat evdev_keycode[1] = { {
 .data = evdev_keycode_xdata,
 .size = ARRAY_SIZE(evdev_keycode_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
#  ifdef XLAT_VAL_78
  | XLAT_VAL_78
#  endif
#  ifdef XLAT_VAL_79
  | XLAT_VAL_79
#  endif
#  ifdef XLAT_VAL_80
  | XLAT_VAL_80
#  endif
#  ifdef XLAT_VAL_81
  | XLAT_VAL_81
#  endif
#  ifdef XLAT_VAL_82
  | XLAT_VAL_82
#  endif
#  ifdef XLAT_VAL_83
  | XLAT_VAL_83
#  endif
#  ifdef XLAT_VAL_84
  | XLAT_VAL_84
#  endif
#  ifdef XLAT_VAL_85
  | XLAT_VAL_85
#  endif
#  ifdef XLAT_VAL_86
  | XLAT_VAL_86
#  endif
#  ifdef XLAT_VAL_87
  | XLAT_VAL_87
#  endif
#  ifdef XLAT_VAL_88
  | XLAT_VAL_88
#  endif
#  ifdef XLAT_VAL_89
  | XLAT_VAL_89
#  endif
#  ifdef XLAT_VAL_90
  | XLAT_VAL_90
#  endif
#  ifdef XLAT_VAL_91
  | XLAT_VAL_91
#  endif
#  ifdef XLAT_VAL_92
  | XLAT_VAL_92
#  endif
#  ifdef XLAT_VAL_93
  | XLAT_VAL_93
#  endif
#  ifdef XLAT_VAL_94
  | XLAT_VAL_94
#  endif
#  ifdef XLAT_VAL_95
  | XLAT_VAL_95
#  endif
#  ifdef XLAT_VAL_96
  | XLAT_VAL_96
#  endif
#  ifdef XLAT_VAL_97
  | XLAT_VAL_97
#  endif
#  ifdef XLAT_VAL_98
  | XLAT_VAL_98
#  endif
#  ifdef XLAT_VAL_99
  | XLAT_VAL_99
#  endif
#  ifdef XLAT_VAL_100
  | XLAT_VAL_100
#  endif
#  ifdef XLAT_VAL_101
  | XLAT_VAL_101
#  endif
#  ifdef XLAT_VAL_102
  | XLAT_VAL_102
#  endif
#  ifdef XLAT_VAL_103
  | XLAT_VAL_103
#  endif
#  ifdef XLAT_VAL_104
  | XLAT_VAL_104
#  endif
#  ifdef XLAT_VAL_105
  | XLAT_VAL_105
#  endif
#  ifdef XLAT_VAL_106
  | XLAT_VAL_106
#  endif
#  ifdef XLAT_VAL_107
  | XLAT_VAL_107
#  endif
#  ifdef XLAT_VAL_108
  | XLAT_VAL_108
#  endif
#  ifdef XLAT_VAL_109
  | XLAT_VAL_109
#  endif
#  ifdef XLAT_VAL_110
  | XLAT_VAL_110
#  endif
#  ifdef XLAT_VAL_111
  | XLAT_VAL_111
#  endif
#  ifdef XLAT_VAL_112
  | XLAT_VAL_112
#  endif
#  ifdef XLAT_VAL_113
  | XLAT_VAL_113
#  endif
#  ifdef XLAT_VAL_114
  | XLAT_VAL_114
#  endif
#  ifdef XLAT_VAL_115
  | XLAT_VAL_115
#  endif
#  ifdef XLAT_VAL_116
  | XLAT_VAL_116
#  endif
#  ifdef XLAT_VAL_117
  | XLAT_VAL_117
#  endif
#  ifdef XLAT_VAL_118
  | XLAT_VAL_118
#  endif
#  ifdef XLAT_VAL_119
  | XLAT_VAL_119
#  endif
#  ifdef XLAT_VAL_120
  | XLAT_VAL_120
#  endif
#  ifdef XLAT_VAL_121
  | XLAT_VAL_121
#  endif
#  ifdef XLAT_VAL_122
  | XLAT_VAL_122
#  endif
#  ifdef XLAT_VAL_123
  | XLAT_VAL_123
#  endif
#  ifdef XLAT_VAL_124
  | XLAT_VAL_124
#  endif
#  ifdef XLAT_VAL_125
  | XLAT_VAL_125
#  endif
#  ifdef XLAT_VAL_126
  | XLAT_VAL_126
#  endif
#  ifdef XLAT_VAL_127
  | XLAT_VAL_127
#  endif
#  ifdef XLAT_VAL_128
  | XLAT_VAL_128
#  endif
#  ifdef XLAT_VAL_129
  | XLAT_VAL_129
#  endif
#  ifdef XLAT_VAL_130
  | XLAT_VAL_130
#  endif
#  ifdef XLAT_VAL_131
  | XLAT_VAL_131
#  endif
#  ifdef XLAT_VAL_132
  | XLAT_VAL_132
#  endif
#  ifdef XLAT_VAL_133
  | XLAT_VAL_133
#  endif
#  ifdef XLAT_VAL_134
  | XLAT_VAL_134
#  endif
#  ifdef XLAT_VAL_135
  | XLAT_VAL_135
#  endif
#  ifdef XLAT_VAL_136
  | XLAT_VAL_136
#  endif
#  ifdef XLAT_VAL_137
  | XLAT_VAL_137
#  endif
#  ifdef XLAT_VAL_138
  | XLAT_VAL_138
#  endif
#  ifdef XLAT_VAL_139
  | XLAT_VAL_139
#  endif
#  ifdef XLAT_VAL_140
  | XLAT_VAL_140
#  endif
#  ifdef XLAT_VAL_141
  | XLAT_VAL_141
#  endif
#  ifdef XLAT_VAL_142
  | XLAT_VAL_142
#  endif
#  ifdef XLAT_VAL_143
  | XLAT_VAL_143
#  endif
#  ifdef XLAT_VAL_144
  | XLAT_VAL_144
#  endif
#  ifdef XLAT_VAL_145
  | XLAT_VAL_145
#  endif
#  ifdef XLAT_VAL_146
  | XLAT_VAL_146
#  endif
#  ifdef XLAT_VAL_147
  | XLAT_VAL_147
#  endif
#  ifdef XLAT_VAL_148
  | XLAT_VAL_148
#  endif
#  ifdef XLAT_VAL_149
  | XLAT_VAL_149
#  endif
#  ifdef XLAT_VAL_150
  | XLAT_VAL_150
#  endif
#  ifdef XLAT_VAL_151
  | XLAT_VAL_151
#  endif
#  ifdef XLAT_VAL_152
  | XLAT_VAL_152
#  endif
#  ifdef XLAT_VAL_153
  | XLAT_VAL_153
#  endif
#  ifdef XLAT_VAL_154
  | XLAT_VAL_154
#  endif
#  ifdef XLAT_VAL_155
  | XLAT_VAL_155
#  endif
#  ifdef XLAT_VAL_156
  | XLAT_VAL_156
#  endif
#  ifdef XLAT_VAL_157
  | XLAT_VAL_157
#  endif
#  ifdef XLAT_VAL_158
  | XLAT_VAL_158
#  endif
#  ifdef XLAT_VAL_159
  | XLAT_VAL_159
#  endif
#  ifdef XLAT_VAL_160
  | XLAT_VAL_160
#  endif
#  ifdef XLAT_VAL_161
  | XLAT_VAL_161
#  endif
#  ifdef XLAT_VAL_162
  | XLAT_VAL_162
#  endif
#  ifdef XLAT_VAL_163
  | XLAT_VAL_163
#  endif
#  ifdef XLAT_VAL_164
  | XLAT_VAL_164
#  endif
#  ifdef XLAT_VAL_165
  | XLAT_VAL_165
#  endif
#  ifdef XLAT_VAL_166
  | XLAT_VAL_166
#  endif
#  ifdef XLAT_VAL_167
  | XLAT_VAL_167
#  endif
#  ifdef XLAT_VAL_168
  | XLAT_VAL_168
#  endif
#  ifdef XLAT_VAL_169
  | XLAT_VAL_169
#  endif
#  ifdef XLAT_VAL_170
  | XLAT_VAL_170
#  endif
#  ifdef XLAT_VAL_171
  | XLAT_VAL_171
#  endif
#  ifdef XLAT_VAL_172
  | XLAT_VAL_172
#  endif
#  ifdef XLAT_VAL_173
  | XLAT_VAL_173
#  endif
#  ifdef XLAT_VAL_174
  | XLAT_VAL_174
#  endif
#  ifdef XLAT_VAL_175
  | XLAT_VAL_175
#  endif
#  ifdef XLAT_VAL_176
  | XLAT_VAL_176
#  endif
#  ifdef XLAT_VAL_177
  | XLAT_VAL_177
#  endif
#  ifdef XLAT_VAL_178
  | XLAT_VAL_178
#  endif
#  ifdef XLAT_VAL_179
  | XLAT_VAL_179
#  endif
#  ifdef XLAT_VAL_180
  | XLAT_VAL_180
#  endif
#  ifdef XLAT_VAL_181
  | XLAT_VAL_181
#  endif
#  ifdef XLAT_VAL_182
  | XLAT_VAL_182
#  endif
#  ifdef XLAT_VAL_183
  | XLAT_VAL_183
#  endif
#  ifdef XLAT_VAL_184
  | XLAT_VAL_184
#  endif
#  ifdef XLAT_VAL_185
  | XLAT_VAL_185
#  endif
#  ifdef XLAT_VAL_186
  | XLAT_VAL_186
#  endif
#  ifdef XLAT_VAL_187
  | XLAT_VAL_187
#  endif
#  ifdef XLAT_VAL_188
  | XLAT_VAL_188
#  endif
#  ifdef XLAT_VAL_189
  | XLAT_VAL_189
#  endif
#  ifdef XLAT_VAL_190
  | XLAT_VAL_190
#  endif
#  ifdef XLAT_VAL_191
  | XLAT_VAL_191
#  endif
#  ifdef XLAT_VAL_192
  | XLAT_VAL_192
#  endif
#  ifdef XLAT_VAL_193
  | XLAT_VAL_193
#  endif
#  ifdef XLAT_VAL_194
  | XLAT_VAL_194
#  endif
#  ifdef XLAT_VAL_195
  | XLAT_VAL_195
#  endif
#  ifdef XLAT_VAL_196
  | XLAT_VAL_196
#  endif
#  ifdef XLAT_VAL_197
  | XLAT_VAL_197
#  endif
#  ifdef XLAT_VAL_198
  | XLAT_VAL_198
#  endif
#  ifdef XLAT_VAL_199
  | XLAT_VAL_199
#  endif
#  ifdef XLAT_VAL_200
  | XLAT_VAL_200
#  endif
#  ifdef XLAT_VAL_201
  | XLAT_VAL_201
#  endif
#  ifdef XLAT_VAL_202
  | XLAT_VAL_202
#  endif
#  ifdef XLAT_VAL_203
  | XLAT_VAL_203
#  endif
#  ifdef XLAT_VAL_204
  | XLAT_VAL_204
#  endif
#  ifdef XLAT_VAL_205
  | XLAT_VAL_205
#  endif
#  ifdef XLAT_VAL_206
  | XLAT_VAL_206
#  endif
#  ifdef XLAT_VAL_207
  | XLAT_VAL_207
#  endif
#  ifdef XLAT_VAL_208
  | XLAT_VAL_208
#  endif
#  ifdef XLAT_VAL_209
  | XLAT_VAL_209
#  endif
#  ifdef XLAT_VAL_210
  | XLAT_VAL_210
#  endif
#  ifdef XLAT_VAL_211
  | XLAT_VAL_211
#  endif
#  ifdef XLAT_VAL_212
  | XLAT_VAL_212
#  endif
#  ifdef XLAT_VAL_213
  | XLAT_VAL_213
#  endif
#  ifdef XLAT_VAL_214
  | XLAT_VAL_214
#  endif
#  ifdef XLAT_VAL_215
  | XLAT_VAL_215
#  endif
#  ifdef XLAT_VAL_216
  | XLAT_VAL_216
#  endif
#  ifdef XLAT_VAL_217
  | XLAT_VAL_217
#  endif
#  ifdef XLAT_VAL_218
  | XLAT_VAL_218
#  endif
#  ifdef XLAT_VAL_219
  | XLAT_VAL_219
#  endif
#  ifdef XLAT_VAL_220
  | XLAT_VAL_220
#  endif
#  ifdef XLAT_VAL_221
  | XLAT_VAL_221
#  endif
#  ifdef XLAT_VAL_222
  | XLAT_VAL_222
#  endif
#  ifdef XLAT_VAL_223
  | XLAT_VAL_223
#  endif
#  ifdef XLAT_VAL_224
  | XLAT_VAL_224
#  endif
#  ifdef XLAT_VAL_225
  | XLAT_VAL_225
#  endif
#  ifdef XLAT_VAL_226
  | XLAT_VAL_226
#  endif
#  ifdef XLAT_VAL_227
  | XLAT_VAL_227
#  endif
#  ifdef XLAT_VAL_228
  | XLAT_VAL_228
#  endif
#  ifdef XLAT_VAL_229
  | XLAT_VAL_229
#  endif
#  ifdef XLAT_VAL_230
  | XLAT_VAL_230
#  endif
#  ifdef XLAT_VAL_231
  | XLAT_VAL_231
#  endif
#  ifdef XLAT_VAL_232
  | XLAT_VAL_232
#  endif
#  ifdef XLAT_VAL_233
  | XLAT_VAL_233
#  endif
#  ifdef XLAT_VAL_234
  | XLAT_VAL_234
#  endif
#  ifdef XLAT_VAL_235
  | XLAT_VAL_235
#  endif
#  ifdef XLAT_VAL_236
  | XLAT_VAL_236
#  endif
#  ifdef XLAT_VAL_237
  | XLAT_VAL_237
#  endif
#  ifdef XLAT_VAL_238
  | XLAT_VAL_238
#  endif
#  ifdef XLAT_VAL_239
  | XLAT_VAL_239
#  endif
#  ifdef XLAT_VAL_240
  | XLAT_VAL_240
#  endif
#  ifdef XLAT_VAL_241
  | XLAT_VAL_241
#  endif
#  ifdef XLAT_VAL_242
  | XLAT_VAL_242
#  endif
#  ifdef XLAT_VAL_243
  | XLAT_VAL_243
#  endif
#  ifdef XLAT_VAL_244
  | XLAT_VAL_244
#  endif
#  ifdef XLAT_VAL_245
  | XLAT_VAL_245
#  endif
#  ifdef XLAT_VAL_246
  | XLAT_VAL_246
#  endif
#  ifdef XLAT_VAL_247
  | XLAT_VAL_247
#  endif
#  ifdef XLAT_VAL_248
  | XLAT_VAL_248
#  endif
#  ifdef XLAT_VAL_249
  | XLAT_VAL_249
#  endif
#  ifdef XLAT_VAL_250
  | XLAT_VAL_250
#  endif
#  ifdef XLAT_VAL_251
  | XLAT_VAL_251
#  endif
#  ifdef XLAT_VAL_252
  | XLAT_VAL_252
#  endif
#  ifdef XLAT_VAL_253
  | XLAT_VAL_253
#  endif
#  ifdef XLAT_VAL_254
  | XLAT_VAL_254
#  endif
#  ifdef XLAT_VAL_255
  | XLAT_VAL_255
#  endif
#  ifdef XLAT_VAL_256
  | XLAT_VAL_256
#  endif
#  ifdef XLAT_VAL_257
  | XLAT_VAL_257
#  endif
#  ifdef XLAT_VAL_258
  | XLAT_VAL_258
#  endif
#  ifdef XLAT_VAL_259
  | XLAT_VAL_259
#  endif
#  ifdef XLAT_VAL_260
  | XLAT_VAL_260
#  endif
#  ifdef XLAT_VAL_261
  | XLAT_VAL_261
#  endif
#  ifdef XLAT_VAL_262
  | XLAT_VAL_262
#  endif
#  ifdef XLAT_VAL_263
  | XLAT_VAL_263
#  endif
#  ifdef XLAT_VAL_264
  | XLAT_VAL_264
#  endif
#  ifdef XLAT_VAL_265
  | XLAT_VAL_265
#  endif
#  ifdef XLAT_VAL_266
  | XLAT_VAL_266
#  endif
#  ifdef XLAT_VAL_267
  | XLAT_VAL_267
#  endif
#  ifdef XLAT_VAL_268
  | XLAT_VAL_268
#  endif
#  ifdef XLAT_VAL_269
  | XLAT_VAL_269
#  endif
#  ifdef XLAT_VAL_270
  | XLAT_VAL_270
#  endif
#  ifdef XLAT_VAL_271
  | XLAT_VAL_271
#  endif
#  ifdef XLAT_VAL_272
  | XLAT_VAL_272
#  endif
#  ifdef XLAT_VAL_273
  | XLAT_VAL_273
#  endif
#  ifdef XLAT_VAL_274
  | XLAT_VAL_274
#  endif
#  ifdef XLAT_VAL_275
  | XLAT_VAL_275
#  endif
#  ifdef XLAT_VAL_276
  | XLAT_VAL_276
#  endif
#  ifdef XLAT_VAL_277
  | XLAT_VAL_277
#  endif
#  ifdef XLAT_VAL_278
  | XLAT_VAL_278
#  endif
#  ifdef XLAT_VAL_279
  | XLAT_VAL_279
#  endif
#  ifdef XLAT_VAL_280
  | XLAT_VAL_280
#  endif
#  ifdef XLAT_VAL_281
  | XLAT_VAL_281
#  endif
#  ifdef XLAT_VAL_282
  | XLAT_VAL_282
#  endif
#  ifdef XLAT_VAL_283
  | XLAT_VAL_283
#  endif
#  ifdef XLAT_VAL_284
  | XLAT_VAL_284
#  endif
#  ifdef XLAT_VAL_285
  | XLAT_VAL_285
#  endif
#  ifdef XLAT_VAL_286
  | XLAT_VAL_286
#  endif
#  ifdef XLAT_VAL_287
  | XLAT_VAL_287
#  endif
#  ifdef XLAT_VAL_288
  | XLAT_VAL_288
#  endif
#  ifdef XLAT_VAL_289
  | XLAT_VAL_289
#  endif
#  ifdef XLAT_VAL_290
  | XLAT_VAL_290
#  endif
#  ifdef XLAT_VAL_291
  | XLAT_VAL_291
#  endif
#  ifdef XLAT_VAL_292
  | XLAT_VAL_292
#  endif
#  ifdef XLAT_VAL_293
  | XLAT_VAL_293
#  endif
#  ifdef XLAT_VAL_294
  | XLAT_VAL_294
#  endif
#  ifdef XLAT_VAL_295
  | XLAT_VAL_295
#  endif
#  ifdef XLAT_VAL_296
  | XLAT_VAL_296
#  endif
#  ifdef XLAT_VAL_297
  | XLAT_VAL_297
#  endif
#  ifdef XLAT_VAL_298
  | XLAT_VAL_298
#  endif
#  ifdef XLAT_VAL_299
  | XLAT_VAL_299
#  endif
#  ifdef XLAT_VAL_300
  | XLAT_VAL_300
#  endif
#  ifdef XLAT_VAL_301
  | XLAT_VAL_301
#  endif
#  ifdef XLAT_VAL_302
  | XLAT_VAL_302
#  endif
#  ifdef XLAT_VAL_303
  | XLAT_VAL_303
#  endif
#  ifdef XLAT_VAL_304
  | XLAT_VAL_304
#  endif
#  ifdef XLAT_VAL_305
  | XLAT_VAL_305
#  endif
#  ifdef XLAT_VAL_306
  | XLAT_VAL_306
#  endif
#  ifdef XLAT_VAL_307
  | XLAT_VAL_307
#  endif
#  ifdef XLAT_VAL_308
  | XLAT_VAL_308
#  endif
#  ifdef XLAT_VAL_309
  | XLAT_VAL_309
#  endif
#  ifdef XLAT_VAL_310
  | XLAT_VAL_310
#  endif
#  ifdef XLAT_VAL_311
  | XLAT_VAL_311
#  endif
#  ifdef XLAT_VAL_312
  | XLAT_VAL_312
#  endif
#  ifdef XLAT_VAL_313
  | XLAT_VAL_313
#  endif
#  ifdef XLAT_VAL_314
  | XLAT_VAL_314
#  endif
#  ifdef XLAT_VAL_315
  | XLAT_VAL_315
#  endif
#  ifdef XLAT_VAL_316
  | XLAT_VAL_316
#  endif
#  ifdef XLAT_VAL_317
  | XLAT_VAL_317
#  endif
#  ifdef XLAT_VAL_318
  | XLAT_VAL_318
#  endif
#  ifdef XLAT_VAL_319
  | XLAT_VAL_319
#  endif
#  ifdef XLAT_VAL_320
  | XLAT_VAL_320
#  endif
#  ifdef XLAT_VAL_321
  | XLAT_VAL_321
#  endif
#  ifdef XLAT_VAL_322
  | XLAT_VAL_322
#  endif
#  ifdef XLAT_VAL_323
  | XLAT_VAL_323
#  endif
#  ifdef XLAT_VAL_324
  | XLAT_VAL_324
#  endif
#  ifdef XLAT_VAL_325
  | XLAT_VAL_325
#  endif
#  ifdef XLAT_VAL_326
  | XLAT_VAL_326
#  endif
#  ifdef XLAT_VAL_327
  | XLAT_VAL_327
#  endif
#  ifdef XLAT_VAL_328
  | XLAT_VAL_328
#  endif
#  ifdef XLAT_VAL_329
  | XLAT_VAL_329
#  endif
#  ifdef XLAT_VAL_330
  | XLAT_VAL_330
#  endif
#  ifdef XLAT_VAL_331
  | XLAT_VAL_331
#  endif
#  ifdef XLAT_VAL_332
  | XLAT_VAL_332
#  endif
#  ifdef XLAT_VAL_333
  | XLAT_VAL_333
#  endif
#  ifdef XLAT_VAL_334
  | XLAT_VAL_334
#  endif
#  ifdef XLAT_VAL_335
  | XLAT_VAL_335
#  endif
#  ifdef XLAT_VAL_336
  | XLAT_VAL_336
#  endif
#  ifdef XLAT_VAL_337
  | XLAT_VAL_337
#  endif
#  ifdef XLAT_VAL_338
  | XLAT_VAL_338
#  endif
#  ifdef XLAT_VAL_339
  | XLAT_VAL_339
#  endif
#  ifdef XLAT_VAL_340
  | XLAT_VAL_340
#  endif
#  ifdef XLAT_VAL_341
  | XLAT_VAL_341
#  endif
#  ifdef XLAT_VAL_342
  | XLAT_VAL_342
#  endif
#  ifdef XLAT_VAL_343
  | XLAT_VAL_343
#  endif
#  ifdef XLAT_VAL_344
  | XLAT_VAL_344
#  endif
#  ifdef XLAT_VAL_345
  | XLAT_VAL_345
#  endif
#  ifdef XLAT_VAL_346
  | XLAT_VAL_346
#  endif
#  ifdef XLAT_VAL_347
  | XLAT_VAL_347
#  endif
#  ifdef XLAT_VAL_348
  | XLAT_VAL_348
#  endif
#  ifdef XLAT_VAL_349
  | XLAT_VAL_349
#  endif
#  ifdef XLAT_VAL_350
  | XLAT_VAL_350
#  endif
#  ifdef XLAT_VAL_351
  | XLAT_VAL_351
#  endif
#  ifdef XLAT_VAL_352
  | XLAT_VAL_352
#  endif
#  ifdef XLAT_VAL_353
  | XLAT_VAL_353
#  endif
#  ifdef XLAT_VAL_354
  | XLAT_VAL_354
#  endif
#  ifdef XLAT_VAL_355
  | XLAT_VAL_355
#  endif
#  ifdef XLAT_VAL_356
  | XLAT_VAL_356
#  endif
#  ifdef XLAT_VAL_357
  | XLAT_VAL_357
#  endif
#  ifdef XLAT_VAL_358
  | XLAT_VAL_358
#  endif
#  ifdef XLAT_VAL_359
  | XLAT_VAL_359
#  endif
#  ifdef XLAT_VAL_360
  | XLAT_VAL_360
#  endif
#  ifdef XLAT_VAL_361
  | XLAT_VAL_361
#  endif
#  ifdef XLAT_VAL_362
  | XLAT_VAL_362
#  endif
#  ifdef XLAT_VAL_363
  | XLAT_VAL_363
#  endif
#  ifdef XLAT_VAL_364
  | XLAT_VAL_364
#  endif
#  ifdef XLAT_VAL_365
  | XLAT_VAL_365
#  endif
#  ifdef XLAT_VAL_366
  | XLAT_VAL_366
#  endif
#  ifdef XLAT_VAL_367
  | XLAT_VAL_367
#  endif
#  ifdef XLAT_VAL_368
  | XLAT_VAL_368
#  endif
#  ifdef XLAT_VAL_369
  | XLAT_VAL_369
#  endif
#  ifdef XLAT_VAL_370
  | XLAT_VAL_370
#  endif
#  ifdef XLAT_VAL_371
  | XLAT_VAL_371
#  endif
#  ifdef XLAT_VAL_372
  | XLAT_VAL_372
#  endif
#  ifdef XLAT_VAL_373
  | XLAT_VAL_373
#  endif
#  ifdef XLAT_VAL_374
  | XLAT_VAL_374
#  endif
#  ifdef XLAT_VAL_375
  | XLAT_VAL_375
#  endif
#  ifdef XLAT_VAL_376
  | XLAT_VAL_376
#  endif
#  ifdef XLAT_VAL_377
  | XLAT_VAL_377
#  endif
#  ifdef XLAT_VAL_378
  | XLAT_VAL_378
#  endif
#  ifdef XLAT_VAL_379
  | XLAT_VAL_379
#  endif
#  ifdef XLAT_VAL_380
  | XLAT_VAL_380
#  endif
#  ifdef XLAT_VAL_381
  | XLAT_VAL_381
#  endif
#  ifdef XLAT_VAL_382
  | XLAT_VAL_382
#  endif
#  ifdef XLAT_VAL_383
  | XLAT_VAL_383
#  endif
#  ifdef XLAT_VAL_384
  | XLAT_VAL_384
#  endif
#  ifdef XLAT_VAL_385
  | XLAT_VAL_385
#  endif
#  ifdef XLAT_VAL_386
  | XLAT_VAL_386
#  endif
#  ifdef XLAT_VAL_387
  | XLAT_VAL_387
#  endif
#  ifdef XLAT_VAL_388
  | XLAT_VAL_388
#  endif
#  ifdef XLAT_VAL_389
  | XLAT_VAL_389
#  endif
#  ifdef XLAT_VAL_390
  | XLAT_VAL_390
#  endif
#  ifdef XLAT_VAL_391
  | XLAT_VAL_391
#  endif
#  ifdef XLAT_VAL_392
  | XLAT_VAL_392
#  endif
#  ifdef XLAT_VAL_393
  | XLAT_VAL_393
#  endif
#  ifdef XLAT_VAL_394
  | XLAT_VAL_394
#  endif
#  ifdef XLAT_VAL_395
  | XLAT_VAL_395
#  endif
#  ifdef XLAT_VAL_396
  | XLAT_VAL_396
#  endif
#  ifdef XLAT_VAL_397
  | XLAT_VAL_397
#  endif
#  ifdef XLAT_VAL_398
  | XLAT_VAL_398
#  endif
#  ifdef XLAT_VAL_399
  | XLAT_VAL_399
#  endif
#  ifdef XLAT_VAL_400
  | XLAT_VAL_400
#  endif
#  ifdef XLAT_VAL_401
  | XLAT_VAL_401
#  endif
#  ifdef XLAT_VAL_402
  | XLAT_VAL_402
#  endif
#  ifdef XLAT_VAL_403
  | XLAT_VAL_403
#  endif
#  ifdef XLAT_VAL_404
  | XLAT_VAL_404
#  endif
#  ifdef XLAT_VAL_405
  | XLAT_VAL_405
#  endif
#  ifdef XLAT_VAL_406
  | XLAT_VAL_406
#  endif
#  ifdef XLAT_VAL_407
  | XLAT_VAL_407
#  endif
#  ifdef XLAT_VAL_408
  | XLAT_VAL_408
#  endif
#  ifdef XLAT_VAL_409
  | XLAT_VAL_409
#  endif
#  ifdef XLAT_VAL_410
  | XLAT_VAL_410
#  endif
#  ifdef XLAT_VAL_411
  | XLAT_VAL_411
#  endif
#  ifdef XLAT_VAL_412
  | XLAT_VAL_412
#  endif
#  ifdef XLAT_VAL_413
  | XLAT_VAL_413
#  endif
#  ifdef XLAT_VAL_414
  | XLAT_VAL_414
#  endif
#  ifdef XLAT_VAL_415
  | XLAT_VAL_415
#  endif
#  ifdef XLAT_VAL_416
  | XLAT_VAL_416
#  endif
#  ifdef XLAT_VAL_417
  | XLAT_VAL_417
#  endif
#  ifdef XLAT_VAL_418
  | XLAT_VAL_418
#  endif
#  ifdef XLAT_VAL_419
  | XLAT_VAL_419
#  endif
#  ifdef XLAT_VAL_420
  | XLAT_VAL_420
#  endif
#  ifdef XLAT_VAL_421
  | XLAT_VAL_421
#  endif
#  ifdef XLAT_VAL_422
  | XLAT_VAL_422
#  endif
#  ifdef XLAT_VAL_423
  | XLAT_VAL_423
#  endif
#  ifdef XLAT_VAL_424
  | XLAT_VAL_424
#  endif
#  ifdef XLAT_VAL_425
  | XLAT_VAL_425
#  endif
#  ifdef XLAT_VAL_426
  | XLAT_VAL_426
#  endif
#  ifdef XLAT_VAL_427
  | XLAT_VAL_427
#  endif
#  ifdef XLAT_VAL_428
  | XLAT_VAL_428
#  endif
#  ifdef XLAT_VAL_429
  | XLAT_VAL_429
#  endif
#  ifdef XLAT_VAL_430
  | XLAT_VAL_430
#  endif
#  ifdef XLAT_VAL_431
  | XLAT_VAL_431
#  endif
#  ifdef XLAT_VAL_432
  | XLAT_VAL_432
#  endif
#  ifdef XLAT_VAL_433
  | XLAT_VAL_433
#  endif
#  ifdef XLAT_VAL_434
  | XLAT_VAL_434
#  endif
#  ifdef XLAT_VAL_435
  | XLAT_VAL_435
#  endif
#  ifdef XLAT_VAL_436
  | XLAT_VAL_436
#  endif
#  ifdef XLAT_VAL_437
  | XLAT_VAL_437
#  endif
#  ifdef XLAT_VAL_438
  | XLAT_VAL_438
#  endif
#  ifdef XLAT_VAL_439
  | XLAT_VAL_439
#  endif
#  ifdef XLAT_VAL_440
  | XLAT_VAL_440
#  endif
#  ifdef XLAT_VAL_441
  | XLAT_VAL_441
#  endif
#  ifdef XLAT_VAL_442
  | XLAT_VAL_442
#  endif
#  ifdef XLAT_VAL_443
  | XLAT_VAL_443
#  endif
#  ifdef XLAT_VAL_444
  | XLAT_VAL_444
#  endif
#  ifdef XLAT_VAL_445
  | XLAT_VAL_445
#  endif
#  ifdef XLAT_VAL_446
  | XLAT_VAL_446
#  endif
#  ifdef XLAT_VAL_447
  | XLAT_VAL_447
#  endif
#  ifdef XLAT_VAL_448
  | XLAT_VAL_448
#  endif
#  ifdef XLAT_VAL_449
  | XLAT_VAL_449
#  endif
#  ifdef XLAT_VAL_450
  | XLAT_VAL_450
#  endif
#  ifdef XLAT_VAL_451
  | XLAT_VAL_451
#  endif
#  ifdef XLAT_VAL_452
  | XLAT_VAL_452
#  endif
#  ifdef XLAT_VAL_453
  | XLAT_VAL_453
#  endif
#  ifdef XLAT_VAL_454
  | XLAT_VAL_454
#  endif
#  ifdef XLAT_VAL_455
  | XLAT_VAL_455
#  endif
#  ifdef XLAT_VAL_456
  | XLAT_VAL_456
#  endif
#  ifdef XLAT_VAL_457
  | XLAT_VAL_457
#  endif
#  ifdef XLAT_VAL_458
  | XLAT_VAL_458
#  endif
#  ifdef XLAT_VAL_459
  | XLAT_VAL_459
#  endif
#  ifdef XLAT_VAL_460
  | XLAT_VAL_460
#  endif
#  ifdef XLAT_VAL_461
  | XLAT_VAL_461
#  endif
#  ifdef XLAT_VAL_462
  | XLAT_VAL_462
#  endif
#  ifdef XLAT_VAL_463
  | XLAT_VAL_463
#  endif
#  ifdef XLAT_VAL_464
  | XLAT_VAL_464
#  endif
#  ifdef XLAT_VAL_465
  | XLAT_VAL_465
#  endif
#  ifdef XLAT_VAL_466
  | XLAT_VAL_466
#  endif
#  ifdef XLAT_VAL_467
  | XLAT_VAL_467
#  endif
#  ifdef XLAT_VAL_468
  | XLAT_VAL_468
#  endif
#  ifdef XLAT_VAL_469
  | XLAT_VAL_469
#  endif
#  ifdef XLAT_VAL_470
  | XLAT_VAL_470
#  endif
#  ifdef XLAT_VAL_471
  | XLAT_VAL_471
#  endif
#  ifdef XLAT_VAL_472
  | XLAT_VAL_472
#  endif
#  ifdef XLAT_VAL_473
  | XLAT_VAL_473
#  endif
#  ifdef XLAT_VAL_474
  | XLAT_VAL_474
#  endif
#  ifdef XLAT_VAL_475
  | XLAT_VAL_475
#  endif
#  ifdef XLAT_VAL_476
  | XLAT_VAL_476
#  endif
#  ifdef XLAT_VAL_477
  | XLAT_VAL_477
#  endif
#  ifdef XLAT_VAL_478
  | XLAT_VAL_478
#  endif
#  ifdef XLAT_VAL_479
  | XLAT_VAL_479
#  endif
#  ifdef XLAT_VAL_480
  | XLAT_VAL_480
#  endif
#  ifdef XLAT_VAL_481
  | XLAT_VAL_481
#  endif
#  ifdef XLAT_VAL_482
  | XLAT_VAL_482
#  endif
#  ifdef XLAT_VAL_483
  | XLAT_VAL_483
#  endif
#  ifdef XLAT_VAL_484
  | XLAT_VAL_484
#  endif
#  ifdef XLAT_VAL_485
  | XLAT_VAL_485
#  endif
#  ifdef XLAT_VAL_486
  | XLAT_VAL_486
#  endif
#  ifdef XLAT_VAL_487
  | XLAT_VAL_487
#  endif
#  ifdef XLAT_VAL_488
  | XLAT_VAL_488
#  endif
#  ifdef XLAT_VAL_489
  | XLAT_VAL_489
#  endif
#  ifdef XLAT_VAL_490
  | XLAT_VAL_490
#  endif
#  ifdef XLAT_VAL_491
  | XLAT_VAL_491
#  endif
#  ifdef XLAT_VAL_492
  | XLAT_VAL_492
#  endif
#  ifdef XLAT_VAL_493
  | XLAT_VAL_493
#  endif
#  ifdef XLAT_VAL_494
  | XLAT_VAL_494
#  endif
#  ifdef XLAT_VAL_495
  | XLAT_VAL_495
#  endif
#  ifdef XLAT_VAL_496
  | XLAT_VAL_496
#  endif
#  ifdef XLAT_VAL_497
  | XLAT_VAL_497
#  endif
#  ifdef XLAT_VAL_498
  | XLAT_VAL_498
#  endif
#  ifdef XLAT_VAL_499
  | XLAT_VAL_499
#  endif
#  ifdef XLAT_VAL_500
  | XLAT_VAL_500
#  endif
#  ifdef XLAT_VAL_501
  | XLAT_VAL_501
#  endif
#  ifdef XLAT_VAL_502
  | XLAT_VAL_502
#  endif
#  ifdef XLAT_VAL_503
  | XLAT_VAL_503
#  endif
#  ifdef XLAT_VAL_504
  | XLAT_VAL_504
#  endif
#  ifdef XLAT_VAL_505
  | XLAT_VAL_505
#  endif
#  ifdef XLAT_VAL_506
  | XLAT_VAL_506
#  endif
#  ifdef XLAT_VAL_507
  | XLAT_VAL_507
#  endif
#  ifdef XLAT_VAL_508
  | XLAT_VAL_508
#  endif
#  ifdef XLAT_VAL_509
  | XLAT_VAL_509
#  endif
#  ifdef XLAT_VAL_510
  | XLAT_VAL_510
#  endif
#  ifdef XLAT_VAL_511
  | XLAT_VAL_511
#  endif
#  ifdef XLAT_VAL_512
  | XLAT_VAL_512
#  endif
#  ifdef XLAT_VAL_513
  | XLAT_VAL_513
#  endif
#  ifdef XLAT_VAL_514
  | XLAT_VAL_514
#  endif
#  ifdef XLAT_VAL_515
  | XLAT_VAL_515
#  endif
#  ifdef XLAT_VAL_516
  | XLAT_VAL_516
#  endif
#  ifdef XLAT_VAL_517
  | XLAT_VAL_517
#  endif
#  ifdef XLAT_VAL_518
  | XLAT_VAL_518
#  endif
#  ifdef XLAT_VAL_519
  | XLAT_VAL_519
#  endif
#  ifdef XLAT_VAL_520
  | XLAT_VAL_520
#  endif
#  ifdef XLAT_VAL_521
  | XLAT_VAL_521
#  endif
#  ifdef XLAT_VAL_522
  | XLAT_VAL_522
#  endif
#  ifdef XLAT_VAL_523
  | XLAT_VAL_523
#  endif
#  ifdef XLAT_VAL_524
  | XLAT_VAL_524
#  endif
#  ifdef XLAT_VAL_525
  | XLAT_VAL_525
#  endif
#  ifdef XLAT_VAL_526
  | XLAT_VAL_526
#  endif
#  ifdef XLAT_VAL_527
  | XLAT_VAL_527
#  endif
#  ifdef XLAT_VAL_528
  | XLAT_VAL_528
#  endif
#  ifdef XLAT_VAL_529
  | XLAT_VAL_529
#  endif
#  ifdef XLAT_VAL_530
  | XLAT_VAL_530
#  endif
#  ifdef XLAT_VAL_531
  | XLAT_VAL_531
#  endif
#  ifdef XLAT_VAL_532
  | XLAT_VAL_532
#  endif
#  ifdef XLAT_VAL_533
  | XLAT_VAL_533
#  endif
#  ifdef XLAT_VAL_534
  | XLAT_VAL_534
#  endif
#  ifdef XLAT_VAL_535
  | XLAT_VAL_535
#  endif
#  ifdef XLAT_VAL_536
  | XLAT_VAL_536
#  endif
#  ifdef XLAT_VAL_537
  | XLAT_VAL_537
#  endif
#  ifdef XLAT_VAL_538
  | XLAT_VAL_538
#  endif
#  ifdef XLAT_VAL_539
  | XLAT_VAL_539
#  endif
#  ifdef XLAT_VAL_540
  | XLAT_VAL_540
#  endif
#  ifdef XLAT_VAL_541
  | XLAT_VAL_541
#  endif
#  ifdef XLAT_VAL_542
  | XLAT_VAL_542
#  endif
#  ifdef XLAT_VAL_543
  | XLAT_VAL_543
#  endif
#  ifdef XLAT_VAL_544
  | XLAT_VAL_544
#  endif
#  ifdef XLAT_VAL_545
  | XLAT_VAL_545
#  endif
#  ifdef XLAT_VAL_546
  | XLAT_VAL_546
#  endif
#  ifdef XLAT_VAL_547
  | XLAT_VAL_547
#  endif
#  ifdef XLAT_VAL_548
  | XLAT_VAL_548
#  endif
#  ifdef XLAT_VAL_549
  | XLAT_VAL_549
#  endif
#  ifdef XLAT_VAL_550
  | XLAT_VAL_550
#  endif
#  ifdef XLAT_VAL_551
  | XLAT_VAL_551
#  endif
#  ifdef XLAT_VAL_552
  | XLAT_VAL_552
#  endif
#  ifdef XLAT_VAL_553
  | XLAT_VAL_553
#  endif
#  ifdef XLAT_VAL_554
  | XLAT_VAL_554
#  endif
#  ifdef XLAT_VAL_555
  | XLAT_VAL_555
#  endif
#  ifdef XLAT_VAL_556
  | XLAT_VAL_556
#  endif
#  ifdef XLAT_VAL_557
  | XLAT_VAL_557
#  endif
#  ifdef XLAT_VAL_558
  | XLAT_VAL_558
#  endif
#  ifdef XLAT_VAL_559
  | XLAT_VAL_559
#  endif
#  ifdef XLAT_VAL_560
  | XLAT_VAL_560
#  endif
#  ifdef XLAT_VAL_561
  | XLAT_VAL_561
#  endif
#  ifdef XLAT_VAL_562
  | XLAT_VAL_562
#  endif
#  ifdef XLAT_VAL_563
  | XLAT_VAL_563
#  endif
#  ifdef XLAT_VAL_564
  | XLAT_VAL_564
#  endif
#  ifdef XLAT_VAL_565
  | XLAT_VAL_565
#  endif
#  ifdef XLAT_VAL_566
  | XLAT_VAL_566
#  endif
#  ifdef XLAT_VAL_567
  | XLAT_VAL_567
#  endif
#  ifdef XLAT_VAL_568
  | XLAT_VAL_568
#  endif
#  ifdef XLAT_VAL_569
  | XLAT_VAL_569
#  endif
#  ifdef XLAT_VAL_570
  | XLAT_VAL_570
#  endif
#  ifdef XLAT_VAL_571
  | XLAT_VAL_571
#  endif
#  ifdef XLAT_VAL_572
  | XLAT_VAL_572
#  endif
#  ifdef XLAT_VAL_573
  | XLAT_VAL_573
#  endif
#  ifdef XLAT_VAL_574
  | XLAT_VAL_574
#  endif
#  ifdef XLAT_VAL_575
  | XLAT_VAL_575
#  endif
#  ifdef XLAT_VAL_576
  | XLAT_VAL_576
#  endif
#  ifdef XLAT_VAL_577
  | XLAT_VAL_577
#  endif
#  ifdef XLAT_VAL_578
  | XLAT_VAL_578
#  endif
#  ifdef XLAT_VAL_579
  | XLAT_VAL_579
#  endif
#  ifdef XLAT_VAL_580
  | XLAT_VAL_580
#  endif
#  ifdef XLAT_VAL_581
  | XLAT_VAL_581
#  endif
#  ifdef XLAT_VAL_582
  | XLAT_VAL_582
#  endif
#  ifdef XLAT_VAL_583
  | XLAT_VAL_583
#  endif
#  ifdef XLAT_VAL_584
  | XLAT_VAL_584
#  endif
#  ifdef XLAT_VAL_585
  | XLAT_VAL_585
#  endif
#  ifdef XLAT_VAL_586
  | XLAT_VAL_586
#  endif
#  ifdef XLAT_VAL_587
  | XLAT_VAL_587
#  endif
#  ifdef XLAT_VAL_588
  | XLAT_VAL_588
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
#  ifdef XLAT_STR_78
  + sizeof(XLAT_STR_78)
#  endif
#  ifdef XLAT_STR_79
  + sizeof(XLAT_STR_79)
#  endif
#  ifdef XLAT_STR_80
  + sizeof(XLAT_STR_80)
#  endif
#  ifdef XLAT_STR_81
  + sizeof(XLAT_STR_81)
#  endif
#  ifdef XLAT_STR_82
  + sizeof(XLAT_STR_82)
#  endif
#  ifdef XLAT_STR_83
  + sizeof(XLAT_STR_83)
#  endif
#  ifdef XLAT_STR_84
  + sizeof(XLAT_STR_84)
#  endif
#  ifdef XLAT_STR_85
  + sizeof(XLAT_STR_85)
#  endif
#  ifdef XLAT_STR_86
  + sizeof(XLAT_STR_86)
#  endif
#  ifdef XLAT_STR_87
  + sizeof(XLAT_STR_87)
#  endif
#  ifdef XLAT_STR_88
  + sizeof(XLAT_STR_88)
#  endif
#  ifdef XLAT_STR_89
  + sizeof(XLAT_STR_89)
#  endif
#  ifdef XLAT_STR_90
  + sizeof(XLAT_STR_90)
#  endif
#  ifdef XLAT_STR_91
  + sizeof(XLAT_STR_91)
#  endif
#  ifdef XLAT_STR_92
  + sizeof(XLAT_STR_92)
#  endif
#  ifdef XLAT_STR_93
  + sizeof(XLAT_STR_93)
#  endif
#  ifdef XLAT_STR_94
  + sizeof(XLAT_STR_94)
#  endif
#  ifdef XLAT_STR_95
  + sizeof(XLAT_STR_95)
#  endif
#  ifdef XLAT_STR_96
  + sizeof(XLAT_STR_96)
#  endif
#  ifdef XLAT_STR_97
  + sizeof(XLAT_STR_97)
#  endif
#  ifdef XLAT_STR_98
  + sizeof(XLAT_STR_98)
#  endif
#  ifdef XLAT_STR_99
  + sizeof(XLAT_STR_99)
#  endif
#  ifdef XLAT_STR_100
  + sizeof(XLAT_STR_100)
#  endif
#  ifdef XLAT_STR_101
  + sizeof(XLAT_STR_101)
#  endif
#  ifdef XLAT_STR_102
  + sizeof(XLAT_STR_102)
#  endif
#  ifdef XLAT_STR_103
  + sizeof(XLAT_STR_103)
#  endif
#  ifdef XLAT_STR_104
  + sizeof(XLAT_STR_104)
#  endif
#  ifdef XLAT_STR_105
  + sizeof(XLAT_STR_105)
#  endif
#  ifdef XLAT_STR_106
  + sizeof(XLAT_STR_106)
#  endif
#  ifdef XLAT_STR_107
  + sizeof(XLAT_STR_107)
#  endif
#  ifdef XLAT_STR_108
  + sizeof(XLAT_STR_108)
#  endif
#  ifdef XLAT_STR_109
  + sizeof(XLAT_STR_109)
#  endif
#  ifdef XLAT_STR_110
  + sizeof(XLAT_STR_110)
#  endif
#  ifdef XLAT_STR_111
  + sizeof(XLAT_STR_111)
#  endif
#  ifdef XLAT_STR_112
  + sizeof(XLAT_STR_112)
#  endif
#  ifdef XLAT_STR_113
  + sizeof(XLAT_STR_113)
#  endif
#  ifdef XLAT_STR_114
  + sizeof(XLAT_STR_114)
#  endif
#  ifdef XLAT_STR_115
  + sizeof(XLAT_STR_115)
#  endif
#  ifdef XLAT_STR_116
  + sizeof(XLAT_STR_116)
#  endif
#  ifdef XLAT_STR_117
  + sizeof(XLAT_STR_117)
#  endif
#  ifdef XLAT_STR_118
  + sizeof(XLAT_STR_118)
#  endif
#  ifdef XLAT_STR_119
  + sizeof(XLAT_STR_119)
#  endif
#  ifdef XLAT_STR_120
  + sizeof(XLAT_STR_120)
#  endif
#  ifdef XLAT_STR_121
  + sizeof(XLAT_STR_121)
#  endif
#  ifdef XLAT_STR_122
  + sizeof(XLAT_STR_122)
#  endif
#  ifdef XLAT_STR_123
  + sizeof(XLAT_STR_123)
#  endif
#  ifdef XLAT_STR_124
  + sizeof(XLAT_STR_124)
#  endif
#  ifdef XLAT_STR_125
  + sizeof(XLAT_STR_125)
#  endif
#  ifdef XLAT_STR_126
  + sizeof(XLAT_STR_126)
#  endif
#  ifdef XLAT_STR_127
  + sizeof(XLAT_STR_127)
#  endif
#  ifdef XLAT_STR_128
  + sizeof(XLAT_STR_128)
#  endif
#  ifdef XLAT_STR_129
  + sizeof(XLAT_STR_129)
#  endif
#  ifdef XLAT_STR_130
  + sizeof(XLAT_STR_130)
#  endif
#  ifdef XLAT_STR_131
  + sizeof(XLAT_STR_131)
#  endif
#  ifdef XLAT_STR_132
  + sizeof(XLAT_STR_132)
#  endif
#  ifdef XLAT_STR_133
  + sizeof(XLAT_STR_133)
#  endif
#  ifdef XLAT_STR_134
  + sizeof(XLAT_STR_134)
#  endif
#  ifdef XLAT_STR_135
  + sizeof(XLAT_STR_135)
#  endif
#  ifdef XLAT_STR_136
  + sizeof(XLAT_STR_136)
#  endif
#  ifdef XLAT_STR_137
  + sizeof(XLAT_STR_137)
#  endif
#  ifdef XLAT_STR_138
  + sizeof(XLAT_STR_138)
#  endif
#  ifdef XLAT_STR_139
  + sizeof(XLAT_STR_139)
#  endif
#  ifdef XLAT_STR_140
  + sizeof(XLAT_STR_140)
#  endif
#  ifdef XLAT_STR_141
  + sizeof(XLAT_STR_141)
#  endif
#  ifdef XLAT_STR_142
  + sizeof(XLAT_STR_142)
#  endif
#  ifdef XLAT_STR_143
  + sizeof(XLAT_STR_143)
#  endif
#  ifdef XLAT_STR_144
  + sizeof(XLAT_STR_144)
#  endif
#  ifdef XLAT_STR_145
  + sizeof(XLAT_STR_145)
#  endif
#  ifdef XLAT_STR_146
  + sizeof(XLAT_STR_146)
#  endif
#  ifdef XLAT_STR_147
  + sizeof(XLAT_STR_147)
#  endif
#  ifdef XLAT_STR_148
  + sizeof(XLAT_STR_148)
#  endif
#  ifdef XLAT_STR_149
  + sizeof(XLAT_STR_149)
#  endif
#  ifdef XLAT_STR_150
  + sizeof(XLAT_STR_150)
#  endif
#  ifdef XLAT_STR_151
  + sizeof(XLAT_STR_151)
#  endif
#  ifdef XLAT_STR_152
  + sizeof(XLAT_STR_152)
#  endif
#  ifdef XLAT_STR_153
  + sizeof(XLAT_STR_153)
#  endif
#  ifdef XLAT_STR_154
  + sizeof(XLAT_STR_154)
#  endif
#  ifdef XLAT_STR_155
  + sizeof(XLAT_STR_155)
#  endif
#  ifdef XLAT_STR_156
  + sizeof(XLAT_STR_156)
#  endif
#  ifdef XLAT_STR_157
  + sizeof(XLAT_STR_157)
#  endif
#  ifdef XLAT_STR_158
  + sizeof(XLAT_STR_158)
#  endif
#  ifdef XLAT_STR_159
  + sizeof(XLAT_STR_159)
#  endif
#  ifdef XLAT_STR_160
  + sizeof(XLAT_STR_160)
#  endif
#  ifdef XLAT_STR_161
  + sizeof(XLAT_STR_161)
#  endif
#  ifdef XLAT_STR_162
  + sizeof(XLAT_STR_162)
#  endif
#  ifdef XLAT_STR_163
  + sizeof(XLAT_STR_163)
#  endif
#  ifdef XLAT_STR_164
  + sizeof(XLAT_STR_164)
#  endif
#  ifdef XLAT_STR_165
  + sizeof(XLAT_STR_165)
#  endif
#  ifdef XLAT_STR_166
  + sizeof(XLAT_STR_166)
#  endif
#  ifdef XLAT_STR_167
  + sizeof(XLAT_STR_167)
#  endif
#  ifdef XLAT_STR_168
  + sizeof(XLAT_STR_168)
#  endif
#  ifdef XLAT_STR_169
  + sizeof(XLAT_STR_169)
#  endif
#  ifdef XLAT_STR_170
  + sizeof(XLAT_STR_170)
#  endif
#  ifdef XLAT_STR_171
  + sizeof(XLAT_STR_171)
#  endif
#  ifdef XLAT_STR_172
  + sizeof(XLAT_STR_172)
#  endif
#  ifdef XLAT_STR_173
  + sizeof(XLAT_STR_173)
#  endif
#  ifdef XLAT_STR_174
  + sizeof(XLAT_STR_174)
#  endif
#  ifdef XLAT_STR_175
  + sizeof(XLAT_STR_175)
#  endif
#  ifdef XLAT_STR_176
  + sizeof(XLAT_STR_176)
#  endif
#  ifdef XLAT_STR_177
  + sizeof(XLAT_STR_177)
#  endif
#  ifdef XLAT_STR_178
  + sizeof(XLAT_STR_178)
#  endif
#  ifdef XLAT_STR_179
  + sizeof(XLAT_STR_179)
#  endif
#  ifdef XLAT_STR_180
  + sizeof(XLAT_STR_180)
#  endif
#  ifdef XLAT_STR_181
  + sizeof(XLAT_STR_181)
#  endif
#  ifdef XLAT_STR_182
  + sizeof(XLAT_STR_182)
#  endif
#  ifdef XLAT_STR_183
  + sizeof(XLAT_STR_183)
#  endif
#  ifdef XLAT_STR_184
  + sizeof(XLAT_STR_184)
#  endif
#  ifdef XLAT_STR_185
  + sizeof(XLAT_STR_185)
#  endif
#  ifdef XLAT_STR_186
  + sizeof(XLAT_STR_186)
#  endif
#  ifdef XLAT_STR_187
  + sizeof(XLAT_STR_187)
#  endif
#  ifdef XLAT_STR_188
  + sizeof(XLAT_STR_188)
#  endif
#  ifdef XLAT_STR_189
  + sizeof(XLAT_STR_189)
#  endif
#  ifdef XLAT_STR_190
  + sizeof(XLAT_STR_190)
#  endif
#  ifdef XLAT_STR_191
  + sizeof(XLAT_STR_191)
#  endif
#  ifdef XLAT_STR_192
  + sizeof(XLAT_STR_192)
#  endif
#  ifdef XLAT_STR_193
  + sizeof(XLAT_STR_193)
#  endif
#  ifdef XLAT_STR_194
  + sizeof(XLAT_STR_194)
#  endif
#  ifdef XLAT_STR_195
  + sizeof(XLAT_STR_195)
#  endif
#  ifdef XLAT_STR_196
  + sizeof(XLAT_STR_196)
#  endif
#  ifdef XLAT_STR_197
  + sizeof(XLAT_STR_197)
#  endif
#  ifdef XLAT_STR_198
  + sizeof(XLAT_STR_198)
#  endif
#  ifdef XLAT_STR_199
  + sizeof(XLAT_STR_199)
#  endif
#  ifdef XLAT_STR_200
  + sizeof(XLAT_STR_200)
#  endif
#  ifdef XLAT_STR_201
  + sizeof(XLAT_STR_201)
#  endif
#  ifdef XLAT_STR_202
  + sizeof(XLAT_STR_202)
#  endif
#  ifdef XLAT_STR_203
  + sizeof(XLAT_STR_203)
#  endif
#  ifdef XLAT_STR_204
  + sizeof(XLAT_STR_204)
#  endif
#  ifdef XLAT_STR_205
  + sizeof(XLAT_STR_205)
#  endif
#  ifdef XLAT_STR_206
  + sizeof(XLAT_STR_206)
#  endif
#  ifdef XLAT_STR_207
  + sizeof(XLAT_STR_207)
#  endif
#  ifdef XLAT_STR_208
  + sizeof(XLAT_STR_208)
#  endif
#  ifdef XLAT_STR_209
  + sizeof(XLAT_STR_209)
#  endif
#  ifdef XLAT_STR_210
  + sizeof(XLAT_STR_210)
#  endif
#  ifdef XLAT_STR_211
  + sizeof(XLAT_STR_211)
#  endif
#  ifdef XLAT_STR_212
  + sizeof(XLAT_STR_212)
#  endif
#  ifdef XLAT_STR_213
  + sizeof(XLAT_STR_213)
#  endif
#  ifdef XLAT_STR_214
  + sizeof(XLAT_STR_214)
#  endif
#  ifdef XLAT_STR_215
  + sizeof(XLAT_STR_215)
#  endif
#  ifdef XLAT_STR_216
  + sizeof(XLAT_STR_216)
#  endif
#  ifdef XLAT_STR_217
  + sizeof(XLAT_STR_217)
#  endif
#  ifdef XLAT_STR_218
  + sizeof(XLAT_STR_218)
#  endif
#  ifdef XLAT_STR_219
  + sizeof(XLAT_STR_219)
#  endif
#  ifdef XLAT_STR_220
  + sizeof(XLAT_STR_220)
#  endif
#  ifdef XLAT_STR_221
  + sizeof(XLAT_STR_221)
#  endif
#  ifdef XLAT_STR_222
  + sizeof(XLAT_STR_222)
#  endif
#  ifdef XLAT_STR_223
  + sizeof(XLAT_STR_223)
#  endif
#  ifdef XLAT_STR_224
  + sizeof(XLAT_STR_224)
#  endif
#  ifdef XLAT_STR_225
  + sizeof(XLAT_STR_225)
#  endif
#  ifdef XLAT_STR_226
  + sizeof(XLAT_STR_226)
#  endif
#  ifdef XLAT_STR_227
  + sizeof(XLAT_STR_227)
#  endif
#  ifdef XLAT_STR_228
  + sizeof(XLAT_STR_228)
#  endif
#  ifdef XLAT_STR_229
  + sizeof(XLAT_STR_229)
#  endif
#  ifdef XLAT_STR_230
  + sizeof(XLAT_STR_230)
#  endif
#  ifdef XLAT_STR_231
  + sizeof(XLAT_STR_231)
#  endif
#  ifdef XLAT_STR_232
  + sizeof(XLAT_STR_232)
#  endif
#  ifdef XLAT_STR_233
  + sizeof(XLAT_STR_233)
#  endif
#  ifdef XLAT_STR_234
  + sizeof(XLAT_STR_234)
#  endif
#  ifdef XLAT_STR_235
  + sizeof(XLAT_STR_235)
#  endif
#  ifdef XLAT_STR_236
  + sizeof(XLAT_STR_236)
#  endif
#  ifdef XLAT_STR_237
  + sizeof(XLAT_STR_237)
#  endif
#  ifdef XLAT_STR_238
  + sizeof(XLAT_STR_238)
#  endif
#  ifdef XLAT_STR_239
  + sizeof(XLAT_STR_239)
#  endif
#  ifdef XLAT_STR_240
  + sizeof(XLAT_STR_240)
#  endif
#  ifdef XLAT_STR_241
  + sizeof(XLAT_STR_241)
#  endif
#  ifdef XLAT_STR_242
  + sizeof(XLAT_STR_242)
#  endif
#  ifdef XLAT_STR_243
  + sizeof(XLAT_STR_243)
#  endif
#  ifdef XLAT_STR_244
  + sizeof(XLAT_STR_244)
#  endif
#  ifdef XLAT_STR_245
  + sizeof(XLAT_STR_245)
#  endif
#  ifdef XLAT_STR_246
  + sizeof(XLAT_STR_246)
#  endif
#  ifdef XLAT_STR_247
  + sizeof(XLAT_STR_247)
#  endif
#  ifdef XLAT_STR_248
  + sizeof(XLAT_STR_248)
#  endif
#  ifdef XLAT_STR_249
  + sizeof(XLAT_STR_249)
#  endif
#  ifdef XLAT_STR_250
  + sizeof(XLAT_STR_250)
#  endif
#  ifdef XLAT_STR_251
  + sizeof(XLAT_STR_251)
#  endif
#  ifdef XLAT_STR_252
  + sizeof(XLAT_STR_252)
#  endif
#  ifdef XLAT_STR_253
  + sizeof(XLAT_STR_253)
#  endif
#  ifdef XLAT_STR_254
  + sizeof(XLAT_STR_254)
#  endif
#  ifdef XLAT_STR_255
  + sizeof(XLAT_STR_255)
#  endif
#  ifdef XLAT_STR_256
  + sizeof(XLAT_STR_256)
#  endif
#  ifdef XLAT_STR_257
  + sizeof(XLAT_STR_257)
#  endif
#  ifdef XLAT_STR_258
  + sizeof(XLAT_STR_258)
#  endif
#  ifdef XLAT_STR_259
  + sizeof(XLAT_STR_259)
#  endif
#  ifdef XLAT_STR_260
  + sizeof(XLAT_STR_260)
#  endif
#  ifdef XLAT_STR_261
  + sizeof(XLAT_STR_261)
#  endif
#  ifdef XLAT_STR_262
  + sizeof(XLAT_STR_262)
#  endif
#  ifdef XLAT_STR_263
  + sizeof(XLAT_STR_263)
#  endif
#  ifdef XLAT_STR_264
  + sizeof(XLAT_STR_264)
#  endif
#  ifdef XLAT_STR_265
  + sizeof(XLAT_STR_265)
#  endif
#  ifdef XLAT_STR_266
  + sizeof(XLAT_STR_266)
#  endif
#  ifdef XLAT_STR_267
  + sizeof(XLAT_STR_267)
#  endif
#  ifdef XLAT_STR_268
  + sizeof(XLAT_STR_268)
#  endif
#  ifdef XLAT_STR_269
  + sizeof(XLAT_STR_269)
#  endif
#  ifdef XLAT_STR_270
  + sizeof(XLAT_STR_270)
#  endif
#  ifdef XLAT_STR_271
  + sizeof(XLAT_STR_271)
#  endif
#  ifdef XLAT_STR_272
  + sizeof(XLAT_STR_272)
#  endif
#  ifdef XLAT_STR_273
  + sizeof(XLAT_STR_273)
#  endif
#  ifdef XLAT_STR_274
  + sizeof(XLAT_STR_274)
#  endif
#  ifdef XLAT_STR_275
  + sizeof(XLAT_STR_275)
#  endif
#  ifdef XLAT_STR_276
  + sizeof(XLAT_STR_276)
#  endif
#  ifdef XLAT_STR_277
  + sizeof(XLAT_STR_277)
#  endif
#  ifdef XLAT_STR_278
  + sizeof(XLAT_STR_278)
#  endif
#  ifdef XLAT_STR_279
  + sizeof(XLAT_STR_279)
#  endif
#  ifdef XLAT_STR_280
  + sizeof(XLAT_STR_280)
#  endif
#  ifdef XLAT_STR_281
  + sizeof(XLAT_STR_281)
#  endif
#  ifdef XLAT_STR_282
  + sizeof(XLAT_STR_282)
#  endif
#  ifdef XLAT_STR_283
  + sizeof(XLAT_STR_283)
#  endif
#  ifdef XLAT_STR_284
  + sizeof(XLAT_STR_284)
#  endif
#  ifdef XLAT_STR_285
  + sizeof(XLAT_STR_285)
#  endif
#  ifdef XLAT_STR_286
  + sizeof(XLAT_STR_286)
#  endif
#  ifdef XLAT_STR_287
  + sizeof(XLAT_STR_287)
#  endif
#  ifdef XLAT_STR_288
  + sizeof(XLAT_STR_288)
#  endif
#  ifdef XLAT_STR_289
  + sizeof(XLAT_STR_289)
#  endif
#  ifdef XLAT_STR_290
  + sizeof(XLAT_STR_290)
#  endif
#  ifdef XLAT_STR_291
  + sizeof(XLAT_STR_291)
#  endif
#  ifdef XLAT_STR_292
  + sizeof(XLAT_STR_292)
#  endif
#  ifdef XLAT_STR_293
  + sizeof(XLAT_STR_293)
#  endif
#  ifdef XLAT_STR_294
  + sizeof(XLAT_STR_294)
#  endif
#  ifdef XLAT_STR_295
  + sizeof(XLAT_STR_295)
#  endif
#  ifdef XLAT_STR_296
  + sizeof(XLAT_STR_296)
#  endif
#  ifdef XLAT_STR_297
  + sizeof(XLAT_STR_297)
#  endif
#  ifdef XLAT_STR_298
  + sizeof(XLAT_STR_298)
#  endif
#  ifdef XLAT_STR_299
  + sizeof(XLAT_STR_299)
#  endif
#  ifdef XLAT_STR_300
  + sizeof(XLAT_STR_300)
#  endif
#  ifdef XLAT_STR_301
  + sizeof(XLAT_STR_301)
#  endif
#  ifdef XLAT_STR_302
  + sizeof(XLAT_STR_302)
#  endif
#  ifdef XLAT_STR_303
  + sizeof(XLAT_STR_303)
#  endif
#  ifdef XLAT_STR_304
  + sizeof(XLAT_STR_304)
#  endif
#  ifdef XLAT_STR_305
  + sizeof(XLAT_STR_305)
#  endif
#  ifdef XLAT_STR_306
  + sizeof(XLAT_STR_306)
#  endif
#  ifdef XLAT_STR_307
  + sizeof(XLAT_STR_307)
#  endif
#  ifdef XLAT_STR_308
  + sizeof(XLAT_STR_308)
#  endif
#  ifdef XLAT_STR_309
  + sizeof(XLAT_STR_309)
#  endif
#  ifdef XLAT_STR_310
  + sizeof(XLAT_STR_310)
#  endif
#  ifdef XLAT_STR_311
  + sizeof(XLAT_STR_311)
#  endif
#  ifdef XLAT_STR_312
  + sizeof(XLAT_STR_312)
#  endif
#  ifdef XLAT_STR_313
  + sizeof(XLAT_STR_313)
#  endif
#  ifdef XLAT_STR_314
  + sizeof(XLAT_STR_314)
#  endif
#  ifdef XLAT_STR_315
  + sizeof(XLAT_STR_315)
#  endif
#  ifdef XLAT_STR_316
  + sizeof(XLAT_STR_316)
#  endif
#  ifdef XLAT_STR_317
  + sizeof(XLAT_STR_317)
#  endif
#  ifdef XLAT_STR_318
  + sizeof(XLAT_STR_318)
#  endif
#  ifdef XLAT_STR_319
  + sizeof(XLAT_STR_319)
#  endif
#  ifdef XLAT_STR_320
  + sizeof(XLAT_STR_320)
#  endif
#  ifdef XLAT_STR_321
  + sizeof(XLAT_STR_321)
#  endif
#  ifdef XLAT_STR_322
  + sizeof(XLAT_STR_322)
#  endif
#  ifdef XLAT_STR_323
  + sizeof(XLAT_STR_323)
#  endif
#  ifdef XLAT_STR_324
  + sizeof(XLAT_STR_324)
#  endif
#  ifdef XLAT_STR_325
  + sizeof(XLAT_STR_325)
#  endif
#  ifdef XLAT_STR_326
  + sizeof(XLAT_STR_326)
#  endif
#  ifdef XLAT_STR_327
  + sizeof(XLAT_STR_327)
#  endif
#  ifdef XLAT_STR_328
  + sizeof(XLAT_STR_328)
#  endif
#  ifdef XLAT_STR_329
  + sizeof(XLAT_STR_329)
#  endif
#  ifdef XLAT_STR_330
  + sizeof(XLAT_STR_330)
#  endif
#  ifdef XLAT_STR_331
  + sizeof(XLAT_STR_331)
#  endif
#  ifdef XLAT_STR_332
  + sizeof(XLAT_STR_332)
#  endif
#  ifdef XLAT_STR_333
  + sizeof(XLAT_STR_333)
#  endif
#  ifdef XLAT_STR_334
  + sizeof(XLAT_STR_334)
#  endif
#  ifdef XLAT_STR_335
  + sizeof(XLAT_STR_335)
#  endif
#  ifdef XLAT_STR_336
  + sizeof(XLAT_STR_336)
#  endif
#  ifdef XLAT_STR_337
  + sizeof(XLAT_STR_337)
#  endif
#  ifdef XLAT_STR_338
  + sizeof(XLAT_STR_338)
#  endif
#  ifdef XLAT_STR_339
  + sizeof(XLAT_STR_339)
#  endif
#  ifdef XLAT_STR_340
  + sizeof(XLAT_STR_340)
#  endif
#  ifdef XLAT_STR_341
  + sizeof(XLAT_STR_341)
#  endif
#  ifdef XLAT_STR_342
  + sizeof(XLAT_STR_342)
#  endif
#  ifdef XLAT_STR_343
  + sizeof(XLAT_STR_343)
#  endif
#  ifdef XLAT_STR_344
  + sizeof(XLAT_STR_344)
#  endif
#  ifdef XLAT_STR_345
  + sizeof(XLAT_STR_345)
#  endif
#  ifdef XLAT_STR_346
  + sizeof(XLAT_STR_346)
#  endif
#  ifdef XLAT_STR_347
  + sizeof(XLAT_STR_347)
#  endif
#  ifdef XLAT_STR_348
  + sizeof(XLAT_STR_348)
#  endif
#  ifdef XLAT_STR_349
  + sizeof(XLAT_STR_349)
#  endif
#  ifdef XLAT_STR_350
  + sizeof(XLAT_STR_350)
#  endif
#  ifdef XLAT_STR_351
  + sizeof(XLAT_STR_351)
#  endif
#  ifdef XLAT_STR_352
  + sizeof(XLAT_STR_352)
#  endif
#  ifdef XLAT_STR_353
  + sizeof(XLAT_STR_353)
#  endif
#  ifdef XLAT_STR_354
  + sizeof(XLAT_STR_354)
#  endif
#  ifdef XLAT_STR_355
  + sizeof(XLAT_STR_355)
#  endif
#  ifdef XLAT_STR_356
  + sizeof(XLAT_STR_356)
#  endif
#  ifdef XLAT_STR_357
  + sizeof(XLAT_STR_357)
#  endif
#  ifdef XLAT_STR_358
  + sizeof(XLAT_STR_358)
#  endif
#  ifdef XLAT_STR_359
  + sizeof(XLAT_STR_359)
#  endif
#  ifdef XLAT_STR_360
  + sizeof(XLAT_STR_360)
#  endif
#  ifdef XLAT_STR_361
  + sizeof(XLAT_STR_361)
#  endif
#  ifdef XLAT_STR_362
  + sizeof(XLAT_STR_362)
#  endif
#  ifdef XLAT_STR_363
  + sizeof(XLAT_STR_363)
#  endif
#  ifdef XLAT_STR_364
  + sizeof(XLAT_STR_364)
#  endif
#  ifdef XLAT_STR_365
  + sizeof(XLAT_STR_365)
#  endif
#  ifdef XLAT_STR_366
  + sizeof(XLAT_STR_366)
#  endif
#  ifdef XLAT_STR_367
  + sizeof(XLAT_STR_367)
#  endif
#  ifdef XLAT_STR_368
  + sizeof(XLAT_STR_368)
#  endif
#  ifdef XLAT_STR_369
  + sizeof(XLAT_STR_369)
#  endif
#  ifdef XLAT_STR_370
  + sizeof(XLAT_STR_370)
#  endif
#  ifdef XLAT_STR_371
  + sizeof(XLAT_STR_371)
#  endif
#  ifdef XLAT_STR_372
  + sizeof(XLAT_STR_372)
#  endif
#  ifdef XLAT_STR_373
  + sizeof(XLAT_STR_373)
#  endif
#  ifdef XLAT_STR_374
  + sizeof(XLAT_STR_374)
#  endif
#  ifdef XLAT_STR_375
  + sizeof(XLAT_STR_375)
#  endif
#  ifdef XLAT_STR_376
  + sizeof(XLAT_STR_376)
#  endif
#  ifdef XLAT_STR_377
  + sizeof(XLAT_STR_377)
#  endif
#  ifdef XLAT_STR_378
  + sizeof(XLAT_STR_378)
#  endif
#  ifdef XLAT_STR_379
  + sizeof(XLAT_STR_379)
#  endif
#  ifdef XLAT_STR_380
  + sizeof(XLAT_STR_380)
#  endif
#  ifdef XLAT_STR_381
  + sizeof(XLAT_STR_381)
#  endif
#  ifdef XLAT_STR_382
  + sizeof(XLAT_STR_382)
#  endif
#  ifdef XLAT_STR_383
  + sizeof(XLAT_STR_383)
#  endif
#  ifdef XLAT_STR_384
  + sizeof(XLAT_STR_384)
#  endif
#  ifdef XLAT_STR_385
  + sizeof(XLAT_STR_385)
#  endif
#  ifdef XLAT_STR_386
  + sizeof(XLAT_STR_386)
#  endif
#  ifdef XLAT_STR_387
  + sizeof(XLAT_STR_387)
#  endif
#  ifdef XLAT_STR_388
  + sizeof(XLAT_STR_388)
#  endif
#  ifdef XLAT_STR_389
  + sizeof(XLAT_STR_389)
#  endif
#  ifdef XLAT_STR_390
  + sizeof(XLAT_STR_390)
#  endif
#  ifdef XLAT_STR_391
  + sizeof(XLAT_STR_391)
#  endif
#  ifdef XLAT_STR_392
  + sizeof(XLAT_STR_392)
#  endif
#  ifdef XLAT_STR_393
  + sizeof(XLAT_STR_393)
#  endif
#  ifdef XLAT_STR_394
  + sizeof(XLAT_STR_394)
#  endif
#  ifdef XLAT_STR_395
  + sizeof(XLAT_STR_395)
#  endif
#  ifdef XLAT_STR_396
  + sizeof(XLAT_STR_396)
#  endif
#  ifdef XLAT_STR_397
  + sizeof(XLAT_STR_397)
#  endif
#  ifdef XLAT_STR_398
  + sizeof(XLAT_STR_398)
#  endif
#  ifdef XLAT_STR_399
  + sizeof(XLAT_STR_399)
#  endif
#  ifdef XLAT_STR_400
  + sizeof(XLAT_STR_400)
#  endif
#  ifdef XLAT_STR_401
  + sizeof(XLAT_STR_401)
#  endif
#  ifdef XLAT_STR_402
  + sizeof(XLAT_STR_402)
#  endif
#  ifdef XLAT_STR_403
  + sizeof(XLAT_STR_403)
#  endif
#  ifdef XLAT_STR_404
  + sizeof(XLAT_STR_404)
#  endif
#  ifdef XLAT_STR_405
  + sizeof(XLAT_STR_405)
#  endif
#  ifdef XLAT_STR_406
  + sizeof(XLAT_STR_406)
#  endif
#  ifdef XLAT_STR_407
  + sizeof(XLAT_STR_407)
#  endif
#  ifdef XLAT_STR_408
  + sizeof(XLAT_STR_408)
#  endif
#  ifdef XLAT_STR_409
  + sizeof(XLAT_STR_409)
#  endif
#  ifdef XLAT_STR_410
  + sizeof(XLAT_STR_410)
#  endif
#  ifdef XLAT_STR_411
  + sizeof(XLAT_STR_411)
#  endif
#  ifdef XLAT_STR_412
  + sizeof(XLAT_STR_412)
#  endif
#  ifdef XLAT_STR_413
  + sizeof(XLAT_STR_413)
#  endif
#  ifdef XLAT_STR_414
  + sizeof(XLAT_STR_414)
#  endif
#  ifdef XLAT_STR_415
  + sizeof(XLAT_STR_415)
#  endif
#  ifdef XLAT_STR_416
  + sizeof(XLAT_STR_416)
#  endif
#  ifdef XLAT_STR_417
  + sizeof(XLAT_STR_417)
#  endif
#  ifdef XLAT_STR_418
  + sizeof(XLAT_STR_418)
#  endif
#  ifdef XLAT_STR_419
  + sizeof(XLAT_STR_419)
#  endif
#  ifdef XLAT_STR_420
  + sizeof(XLAT_STR_420)
#  endif
#  ifdef XLAT_STR_421
  + sizeof(XLAT_STR_421)
#  endif
#  ifdef XLAT_STR_422
  + sizeof(XLAT_STR_422)
#  endif
#  ifdef XLAT_STR_423
  + sizeof(XLAT_STR_423)
#  endif
#  ifdef XLAT_STR_424
  + sizeof(XLAT_STR_424)
#  endif
#  ifdef XLAT_STR_425
  + sizeof(XLAT_STR_425)
#  endif
#  ifdef XLAT_STR_426
  + sizeof(XLAT_STR_426)
#  endif
#  ifdef XLAT_STR_427
  + sizeof(XLAT_STR_427)
#  endif
#  ifdef XLAT_STR_428
  + sizeof(XLAT_STR_428)
#  endif
#  ifdef XLAT_STR_429
  + sizeof(XLAT_STR_429)
#  endif
#  ifdef XLAT_STR_430
  + sizeof(XLAT_STR_430)
#  endif
#  ifdef XLAT_STR_431
  + sizeof(XLAT_STR_431)
#  endif
#  ifdef XLAT_STR_432
  + sizeof(XLAT_STR_432)
#  endif
#  ifdef XLAT_STR_433
  + sizeof(XLAT_STR_433)
#  endif
#  ifdef XLAT_STR_434
  + sizeof(XLAT_STR_434)
#  endif
#  ifdef XLAT_STR_435
  + sizeof(XLAT_STR_435)
#  endif
#  ifdef XLAT_STR_436
  + sizeof(XLAT_STR_436)
#  endif
#  ifdef XLAT_STR_437
  + sizeof(XLAT_STR_437)
#  endif
#  ifdef XLAT_STR_438
  + sizeof(XLAT_STR_438)
#  endif
#  ifdef XLAT_STR_439
  + sizeof(XLAT_STR_439)
#  endif
#  ifdef XLAT_STR_440
  + sizeof(XLAT_STR_440)
#  endif
#  ifdef XLAT_STR_441
  + sizeof(XLAT_STR_441)
#  endif
#  ifdef XLAT_STR_442
  + sizeof(XLAT_STR_442)
#  endif
#  ifdef XLAT_STR_443
  + sizeof(XLAT_STR_443)
#  endif
#  ifdef XLAT_STR_444
  + sizeof(XLAT_STR_444)
#  endif
#  ifdef XLAT_STR_445
  + sizeof(XLAT_STR_445)
#  endif
#  ifdef XLAT_STR_446
  + sizeof(XLAT_STR_446)
#  endif
#  ifdef XLAT_STR_447
  + sizeof(XLAT_STR_447)
#  endif
#  ifdef XLAT_STR_448
  + sizeof(XLAT_STR_448)
#  endif
#  ifdef XLAT_STR_449
  + sizeof(XLAT_STR_449)
#  endif
#  ifdef XLAT_STR_450
  + sizeof(XLAT_STR_450)
#  endif
#  ifdef XLAT_STR_451
  + sizeof(XLAT_STR_451)
#  endif
#  ifdef XLAT_STR_452
  + sizeof(XLAT_STR_452)
#  endif
#  ifdef XLAT_STR_453
  + sizeof(XLAT_STR_453)
#  endif
#  ifdef XLAT_STR_454
  + sizeof(XLAT_STR_454)
#  endif
#  ifdef XLAT_STR_455
  + sizeof(XLAT_STR_455)
#  endif
#  ifdef XLAT_STR_456
  + sizeof(XLAT_STR_456)
#  endif
#  ifdef XLAT_STR_457
  + sizeof(XLAT_STR_457)
#  endif
#  ifdef XLAT_STR_458
  + sizeof(XLAT_STR_458)
#  endif
#  ifdef XLAT_STR_459
  + sizeof(XLAT_STR_459)
#  endif
#  ifdef XLAT_STR_460
  + sizeof(XLAT_STR_460)
#  endif
#  ifdef XLAT_STR_461
  + sizeof(XLAT_STR_461)
#  endif
#  ifdef XLAT_STR_462
  + sizeof(XLAT_STR_462)
#  endif
#  ifdef XLAT_STR_463
  + sizeof(XLAT_STR_463)
#  endif
#  ifdef XLAT_STR_464
  + sizeof(XLAT_STR_464)
#  endif
#  ifdef XLAT_STR_465
  + sizeof(XLAT_STR_465)
#  endif
#  ifdef XLAT_STR_466
  + sizeof(XLAT_STR_466)
#  endif
#  ifdef XLAT_STR_467
  + sizeof(XLAT_STR_467)
#  endif
#  ifdef XLAT_STR_468
  + sizeof(XLAT_STR_468)
#  endif
#  ifdef XLAT_STR_469
  + sizeof(XLAT_STR_469)
#  endif
#  ifdef XLAT_STR_470
  + sizeof(XLAT_STR_470)
#  endif
#  ifdef XLAT_STR_471
  + sizeof(XLAT_STR_471)
#  endif
#  ifdef XLAT_STR_472
  + sizeof(XLAT_STR_472)
#  endif
#  ifdef XLAT_STR_473
  + sizeof(XLAT_STR_473)
#  endif
#  ifdef XLAT_STR_474
  + sizeof(XLAT_STR_474)
#  endif
#  ifdef XLAT_STR_475
  + sizeof(XLAT_STR_475)
#  endif
#  ifdef XLAT_STR_476
  + sizeof(XLAT_STR_476)
#  endif
#  ifdef XLAT_STR_477
  + sizeof(XLAT_STR_477)
#  endif
#  ifdef XLAT_STR_478
  + sizeof(XLAT_STR_478)
#  endif
#  ifdef XLAT_STR_479
  + sizeof(XLAT_STR_479)
#  endif
#  ifdef XLAT_STR_480
  + sizeof(XLAT_STR_480)
#  endif
#  ifdef XLAT_STR_481
  + sizeof(XLAT_STR_481)
#  endif
#  ifdef XLAT_STR_482
  + sizeof(XLAT_STR_482)
#  endif
#  ifdef XLAT_STR_483
  + sizeof(XLAT_STR_483)
#  endif
#  ifdef XLAT_STR_484
  + sizeof(XLAT_STR_484)
#  endif
#  ifdef XLAT_STR_485
  + sizeof(XLAT_STR_485)
#  endif
#  ifdef XLAT_STR_486
  + sizeof(XLAT_STR_486)
#  endif
#  ifdef XLAT_STR_487
  + sizeof(XLAT_STR_487)
#  endif
#  ifdef XLAT_STR_488
  + sizeof(XLAT_STR_488)
#  endif
#  ifdef XLAT_STR_489
  + sizeof(XLAT_STR_489)
#  endif
#  ifdef XLAT_STR_490
  + sizeof(XLAT_STR_490)
#  endif
#  ifdef XLAT_STR_491
  + sizeof(XLAT_STR_491)
#  endif
#  ifdef XLAT_STR_492
  + sizeof(XLAT_STR_492)
#  endif
#  ifdef XLAT_STR_493
  + sizeof(XLAT_STR_493)
#  endif
#  ifdef XLAT_STR_494
  + sizeof(XLAT_STR_494)
#  endif
#  ifdef XLAT_STR_495
  + sizeof(XLAT_STR_495)
#  endif
#  ifdef XLAT_STR_496
  + sizeof(XLAT_STR_496)
#  endif
#  ifdef XLAT_STR_497
  + sizeof(XLAT_STR_497)
#  endif
#  ifdef XLAT_STR_498
  + sizeof(XLAT_STR_498)
#  endif
#  ifdef XLAT_STR_499
  + sizeof(XLAT_STR_499)
#  endif
#  ifdef XLAT_STR_500
  + sizeof(XLAT_STR_500)
#  endif
#  ifdef XLAT_STR_501
  + sizeof(XLAT_STR_501)
#  endif
#  ifdef XLAT_STR_502
  + sizeof(XLAT_STR_502)
#  endif
#  ifdef XLAT_STR_503
  + sizeof(XLAT_STR_503)
#  endif
#  ifdef XLAT_STR_504
  + sizeof(XLAT_STR_504)
#  endif
#  ifdef XLAT_STR_505
  + sizeof(XLAT_STR_505)
#  endif
#  ifdef XLAT_STR_506
  + sizeof(XLAT_STR_506)
#  endif
#  ifdef XLAT_STR_507
  + sizeof(XLAT_STR_507)
#  endif
#  ifdef XLAT_STR_508
  + sizeof(XLAT_STR_508)
#  endif
#  ifdef XLAT_STR_509
  + sizeof(XLAT_STR_509)
#  endif
#  ifdef XLAT_STR_510
  + sizeof(XLAT_STR_510)
#  endif
#  ifdef XLAT_STR_511
  + sizeof(XLAT_STR_511)
#  endif
#  ifdef XLAT_STR_512
  + sizeof(XLAT_STR_512)
#  endif
#  ifdef XLAT_STR_513
  + sizeof(XLAT_STR_513)
#  endif
#  ifdef XLAT_STR_514
  + sizeof(XLAT_STR_514)
#  endif
#  ifdef XLAT_STR_515
  + sizeof(XLAT_STR_515)
#  endif
#  ifdef XLAT_STR_516
  + sizeof(XLAT_STR_516)
#  endif
#  ifdef XLAT_STR_517
  + sizeof(XLAT_STR_517)
#  endif
#  ifdef XLAT_STR_518
  + sizeof(XLAT_STR_518)
#  endif
#  ifdef XLAT_STR_519
  + sizeof(XLAT_STR_519)
#  endif
#  ifdef XLAT_STR_520
  + sizeof(XLAT_STR_520)
#  endif
#  ifdef XLAT_STR_521
  + sizeof(XLAT_STR_521)
#  endif
#  ifdef XLAT_STR_522
  + sizeof(XLAT_STR_522)
#  endif
#  ifdef XLAT_STR_523
  + sizeof(XLAT_STR_523)
#  endif
#  ifdef XLAT_STR_524
  + sizeof(XLAT_STR_524)
#  endif
#  ifdef XLAT_STR_525
  + sizeof(XLAT_STR_525)
#  endif
#  ifdef XLAT_STR_526
  + sizeof(XLAT_STR_526)
#  endif
#  ifdef XLAT_STR_527
  + sizeof(XLAT_STR_527)
#  endif
#  ifdef XLAT_STR_528
  + sizeof(XLAT_STR_528)
#  endif
#  ifdef XLAT_STR_529
  + sizeof(XLAT_STR_529)
#  endif
#  ifdef XLAT_STR_530
  + sizeof(XLAT_STR_530)
#  endif
#  ifdef XLAT_STR_531
  + sizeof(XLAT_STR_531)
#  endif
#  ifdef XLAT_STR_532
  + sizeof(XLAT_STR_532)
#  endif
#  ifdef XLAT_STR_533
  + sizeof(XLAT_STR_533)
#  endif
#  ifdef XLAT_STR_534
  + sizeof(XLAT_STR_534)
#  endif
#  ifdef XLAT_STR_535
  + sizeof(XLAT_STR_535)
#  endif
#  ifdef XLAT_STR_536
  + sizeof(XLAT_STR_536)
#  endif
#  ifdef XLAT_STR_537
  + sizeof(XLAT_STR_537)
#  endif
#  ifdef XLAT_STR_538
  + sizeof(XLAT_STR_538)
#  endif
#  ifdef XLAT_STR_539
  + sizeof(XLAT_STR_539)
#  endif
#  ifdef XLAT_STR_540
  + sizeof(XLAT_STR_540)
#  endif
#  ifdef XLAT_STR_541
  + sizeof(XLAT_STR_541)
#  endif
#  ifdef XLAT_STR_542
  + sizeof(XLAT_STR_542)
#  endif
#  ifdef XLAT_STR_543
  + sizeof(XLAT_STR_543)
#  endif
#  ifdef XLAT_STR_544
  + sizeof(XLAT_STR_544)
#  endif
#  ifdef XLAT_STR_545
  + sizeof(XLAT_STR_545)
#  endif
#  ifdef XLAT_STR_546
  + sizeof(XLAT_STR_546)
#  endif
#  ifdef XLAT_STR_547
  + sizeof(XLAT_STR_547)
#  endif
#  ifdef XLAT_STR_548
  + sizeof(XLAT_STR_548)
#  endif
#  ifdef XLAT_STR_549
  + sizeof(XLAT_STR_549)
#  endif
#  ifdef XLAT_STR_550
  + sizeof(XLAT_STR_550)
#  endif
#  ifdef XLAT_STR_551
  + sizeof(XLAT_STR_551)
#  endif
#  ifdef XLAT_STR_552
  + sizeof(XLAT_STR_552)
#  endif
#  ifdef XLAT_STR_553
  + sizeof(XLAT_STR_553)
#  endif
#  ifdef XLAT_STR_554
  + sizeof(XLAT_STR_554)
#  endif
#  ifdef XLAT_STR_555
  + sizeof(XLAT_STR_555)
#  endif
#  ifdef XLAT_STR_556
  + sizeof(XLAT_STR_556)
#  endif
#  ifdef XLAT_STR_557
  + sizeof(XLAT_STR_557)
#  endif
#  ifdef XLAT_STR_558
  + sizeof(XLAT_STR_558)
#  endif
#  ifdef XLAT_STR_559
  + sizeof(XLAT_STR_559)
#  endif
#  ifdef XLAT_STR_560
  + sizeof(XLAT_STR_560)
#  endif
#  ifdef XLAT_STR_561
  + sizeof(XLAT_STR_561)
#  endif
#  ifdef XLAT_STR_562
  + sizeof(XLAT_STR_562)
#  endif
#  ifdef XLAT_STR_563
  + sizeof(XLAT_STR_563)
#  endif
#  ifdef XLAT_STR_564
  + sizeof(XLAT_STR_564)
#  endif
#  ifdef XLAT_STR_565
  + sizeof(XLAT_STR_565)
#  endif
#  ifdef XLAT_STR_566
  + sizeof(XLAT_STR_566)
#  endif
#  ifdef XLAT_STR_567
  + sizeof(XLAT_STR_567)
#  endif
#  ifdef XLAT_STR_568
  + sizeof(XLAT_STR_568)
#  endif
#  ifdef XLAT_STR_569
  + sizeof(XLAT_STR_569)
#  endif
#  ifdef XLAT_STR_570
  + sizeof(XLAT_STR_570)
#  endif
#  ifdef XLAT_STR_571
  + sizeof(XLAT_STR_571)
#  endif
#  ifdef XLAT_STR_572
  + sizeof(XLAT_STR_572)
#  endif
#  ifdef XLAT_STR_573
  + sizeof(XLAT_STR_573)
#  endif
#  ifdef XLAT_STR_574
  + sizeof(XLAT_STR_574)
#  endif
#  ifdef XLAT_STR_575
  + sizeof(XLAT_STR_575)
#  endif
#  ifdef XLAT_STR_576
  + sizeof(XLAT_STR_576)
#  endif
#  ifdef XLAT_STR_577
  + sizeof(XLAT_STR_577)
#  endif
#  ifdef XLAT_STR_578
  + sizeof(XLAT_STR_578)
#  endif
#  ifdef XLAT_STR_579
  + sizeof(XLAT_STR_579)
#  endif
#  ifdef XLAT_STR_580
  + sizeof(XLAT_STR_580)
#  endif
#  ifdef XLAT_STR_581
  + sizeof(XLAT_STR_581)
#  endif
#  ifdef XLAT_STR_582
  + sizeof(XLAT_STR_582)
#  endif
#  ifdef XLAT_STR_583
  + sizeof(XLAT_STR_583)
#  endif
#  ifdef XLAT_STR_584
  + sizeof(XLAT_STR_584)
#  endif
#  ifdef XLAT_STR_585
  + sizeof(XLAT_STR_585)
#  endif
#  ifdef XLAT_STR_586
  + sizeof(XLAT_STR_586)
#  endif
#  ifdef XLAT_STR_587
  + sizeof(XLAT_STR_587)
#  endif
#  ifdef XLAT_STR_588
  + sizeof(XLAT_STR_588)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
#  undef XLAT_STR_78
#  undef XLAT_VAL_78
#  undef XLAT_STR_79
#  undef XLAT_VAL_79
#  undef XLAT_STR_80
#  undef XLAT_VAL_80
#  undef XLAT_STR_81
#  undef XLAT_VAL_81
#  undef XLAT_STR_82
#  undef XLAT_VAL_82
#  undef XLAT_STR_83
#  undef XLAT_VAL_83
#  undef XLAT_STR_84
#  undef XLAT_VAL_84
#  undef XLAT_STR_85
#  undef XLAT_VAL_85
#  undef XLAT_STR_86
#  undef XLAT_VAL_86
#  undef XLAT_STR_87
#  undef XLAT_VAL_87
#  undef XLAT_STR_88
#  undef XLAT_VAL_88
#  undef XLAT_STR_89
#  undef XLAT_VAL_89
#  undef XLAT_STR_90
#  undef XLAT_VAL_90
#  undef XLAT_STR_91
#  undef XLAT_VAL_91
#  undef XLAT_STR_92
#  undef XLAT_VAL_92
#  undef XLAT_STR_93
#  undef XLAT_VAL_93
#  undef XLAT_STR_94
#  undef XLAT_VAL_94
#  undef XLAT_STR_95
#  undef XLAT_VAL_95
#  undef XLAT_STR_96
#  undef XLAT_VAL_96
#  undef XLAT_STR_97
#  undef XLAT_VAL_97
#  undef XLAT_STR_98
#  undef XLAT_VAL_98
#  undef XLAT_STR_99
#  undef XLAT_VAL_99
#  undef XLAT_STR_100
#  undef XLAT_VAL_100
#  undef XLAT_STR_101
#  undef XLAT_VAL_101
#  undef XLAT_STR_102
#  undef XLAT_VAL_102
#  undef XLAT_STR_103
#  undef XLAT_VAL_103
#  undef XLAT_STR_104
#  undef XLAT_VAL_104
#  undef XLAT_STR_105
#  undef XLAT_VAL_105
#  undef XLAT_STR_106
#  undef XLAT_VAL_106
#  undef XLAT_STR_107
#  undef XLAT_VAL_107
#  undef XLAT_STR_108
#  undef XLAT_VAL_108
#  undef XLAT_STR_109
#  undef XLAT_VAL_109
#  undef XLAT_STR_110
#  undef XLAT_VAL_110
#  undef XLAT_STR_111
#  undef XLAT_VAL_111
#  undef XLAT_STR_112
#  undef XLAT_VAL_112
#  undef XLAT_STR_113
#  undef XLAT_VAL_113
#  undef XLAT_STR_114
#  undef XLAT_VAL_114
#  undef XLAT_STR_115
#  undef XLAT_VAL_115
#  undef XLAT_STR_116
#  undef XLAT_VAL_116
#  undef XLAT_STR_117
#  undef XLAT_VAL_117
#  undef XLAT_STR_118
#  undef XLAT_VAL_118
#  undef XLAT_STR_119
#  undef XLAT_VAL_119
#  undef XLAT_STR_120
#  undef XLAT_VAL_120
#  undef XLAT_STR_121
#  undef XLAT_VAL_121
#  undef XLAT_STR_122
#  undef XLAT_VAL_122
#  undef XLAT_STR_123
#  undef XLAT_VAL_123
#  undef XLAT_STR_124
#  undef XLAT_VAL_124
#  undef XLAT_STR_125
#  undef XLAT_VAL_125
#  undef XLAT_STR_126
#  undef XLAT_VAL_126
#  undef XLAT_STR_127
#  undef XLAT_VAL_127
#  undef XLAT_STR_128
#  undef XLAT_VAL_128
#  undef XLAT_STR_129
#  undef XLAT_VAL_129
#  undef XLAT_STR_130
#  undef XLAT_VAL_130
#  undef XLAT_STR_131
#  undef XLAT_VAL_131
#  undef XLAT_STR_132
#  undef XLAT_VAL_132
#  undef XLAT_STR_133
#  undef XLAT_VAL_133
#  undef XLAT_STR_134
#  undef XLAT_VAL_134
#  undef XLAT_STR_135
#  undef XLAT_VAL_135
#  undef XLAT_STR_136
#  undef XLAT_VAL_136
#  undef XLAT_STR_137
#  undef XLAT_VAL_137
#  undef XLAT_STR_138
#  undef XLAT_VAL_138
#  undef XLAT_STR_139
#  undef XLAT_VAL_139
#  undef XLAT_STR_140
#  undef XLAT_VAL_140
#  undef XLAT_STR_141
#  undef XLAT_VAL_141
#  undef XLAT_STR_142
#  undef XLAT_VAL_142
#  undef XLAT_STR_143
#  undef XLAT_VAL_143
#  undef XLAT_STR_144
#  undef XLAT_VAL_144
#  undef XLAT_STR_145
#  undef XLAT_VAL_145
#  undef XLAT_STR_146
#  undef XLAT_VAL_146
#  undef XLAT_STR_147
#  undef XLAT_VAL_147
#  undef XLAT_STR_148
#  undef XLAT_VAL_148
#  undef XLAT_STR_149
#  undef XLAT_VAL_149
#  undef XLAT_STR_150
#  undef XLAT_VAL_150
#  undef XLAT_STR_151
#  undef XLAT_VAL_151
#  undef XLAT_STR_152
#  undef XLAT_VAL_152
#  undef XLAT_STR_153
#  undef XLAT_VAL_153
#  undef XLAT_STR_154
#  undef XLAT_VAL_154
#  undef XLAT_STR_155
#  undef XLAT_VAL_155
#  undef XLAT_STR_156
#  undef XLAT_VAL_156
#  undef XLAT_STR_157
#  undef XLAT_VAL_157
#  undef XLAT_STR_158
#  undef XLAT_VAL_158
#  undef XLAT_STR_159
#  undef XLAT_VAL_159
#  undef XLAT_STR_160
#  undef XLAT_VAL_160
#  undef XLAT_STR_161
#  undef XLAT_VAL_161
#  undef XLAT_STR_162
#  undef XLAT_VAL_162
#  undef XLAT_STR_163
#  undef XLAT_VAL_163
#  undef XLAT_STR_164
#  undef XLAT_VAL_164
#  undef XLAT_STR_165
#  undef XLAT_VAL_165
#  undef XLAT_STR_166
#  undef XLAT_VAL_166
#  undef XLAT_STR_167
#  undef XLAT_VAL_167
#  undef XLAT_STR_168
#  undef XLAT_VAL_168
#  undef XLAT_STR_169
#  undef XLAT_VAL_169
#  undef XLAT_STR_170
#  undef XLAT_VAL_170
#  undef XLAT_STR_171
#  undef XLAT_VAL_171
#  undef XLAT_STR_172
#  undef XLAT_VAL_172
#  undef XLAT_STR_173
#  undef XLAT_VAL_173
#  undef XLAT_STR_174
#  undef XLAT_VAL_174
#  undef XLAT_STR_175
#  undef XLAT_VAL_175
#  undef XLAT_STR_176
#  undef XLAT_VAL_176
#  undef XLAT_STR_177
#  undef XLAT_VAL_177
#  undef XLAT_STR_178
#  undef XLAT_VAL_178
#  undef XLAT_STR_179
#  undef XLAT_VAL_179
#  undef XLAT_STR_180
#  undef XLAT_VAL_180
#  undef XLAT_STR_181
#  undef XLAT_VAL_181
#  undef XLAT_STR_182
#  undef XLAT_VAL_182
#  undef XLAT_STR_183
#  undef XLAT_VAL_183
#  undef XLAT_STR_184
#  undef XLAT_VAL_184
#  undef XLAT_STR_185
#  undef XLAT_VAL_185
#  undef XLAT_STR_186
#  undef XLAT_VAL_186
#  undef XLAT_STR_187
#  undef XLAT_VAL_187
#  undef XLAT_STR_188
#  undef XLAT_VAL_188
#  undef XLAT_STR_189
#  undef XLAT_VAL_189
#  undef XLAT_STR_190
#  undef XLAT_VAL_190
#  undef XLAT_STR_191
#  undef XLAT_VAL_191
#  undef XLAT_STR_192
#  undef XLAT_VAL_192
#  undef XLAT_STR_193
#  undef XLAT_VAL_193
#  undef XLAT_STR_194
#  undef XLAT_VAL_194
#  undef XLAT_STR_195
#  undef XLAT_VAL_195
#  undef XLAT_STR_196
#  undef XLAT_VAL_196
#  undef XLAT_STR_197
#  undef XLAT_VAL_197
#  undef XLAT_STR_198
#  undef XLAT_VAL_198
#  undef XLAT_STR_199
#  undef XLAT_VAL_199
#  undef XLAT_STR_200
#  undef XLAT_VAL_200
#  undef XLAT_STR_201
#  undef XLAT_VAL_201
#  undef XLAT_STR_202
#  undef XLAT_VAL_202
#  undef XLAT_STR_203
#  undef XLAT_VAL_203
#  undef XLAT_STR_204
#  undef XLAT_VAL_204
#  undef XLAT_STR_205
#  undef XLAT_VAL_205
#  undef XLAT_STR_206
#  undef XLAT_VAL_206
#  undef XLAT_STR_207
#  undef XLAT_VAL_207
#  undef XLAT_STR_208
#  undef XLAT_VAL_208
#  undef XLAT_STR_209
#  undef XLAT_VAL_209
#  undef XLAT_STR_210
#  undef XLAT_VAL_210
#  undef XLAT_STR_211
#  undef XLAT_VAL_211
#  undef XLAT_STR_212
#  undef XLAT_VAL_212
#  undef XLAT_STR_213
#  undef XLAT_VAL_213
#  undef XLAT_STR_214
#  undef XLAT_VAL_214
#  undef XLAT_STR_215
#  undef XLAT_VAL_215
#  undef XLAT_STR_216
#  undef XLAT_VAL_216
#  undef XLAT_STR_217
#  undef XLAT_VAL_217
#  undef XLAT_STR_218
#  undef XLAT_VAL_218
#  undef XLAT_STR_219
#  undef XLAT_VAL_219
#  undef XLAT_STR_220
#  undef XLAT_VAL_220
#  undef XLAT_STR_221
#  undef XLAT_VAL_221
#  undef XLAT_STR_222
#  undef XLAT_VAL_222
#  undef XLAT_STR_223
#  undef XLAT_VAL_223
#  undef XLAT_STR_224
#  undef XLAT_VAL_224
#  undef XLAT_STR_225
#  undef XLAT_VAL_225
#  undef XLAT_STR_226
#  undef XLAT_VAL_226
#  undef XLAT_STR_227
#  undef XLAT_VAL_227
#  undef XLAT_STR_228
#  undef XLAT_VAL_228
#  undef XLAT_STR_229
#  undef XLAT_VAL_229
#  undef XLAT_STR_230
#  undef XLAT_VAL_230
#  undef XLAT_STR_231
#  undef XLAT_VAL_231
#  undef XLAT_STR_232
#  undef XLAT_VAL_232
#  undef XLAT_STR_233
#  undef XLAT_VAL_233
#  undef XLAT_STR_234
#  undef XLAT_VAL_234
#  undef XLAT_STR_235
#  undef XLAT_VAL_235
#  undef XLAT_STR_236
#  undef XLAT_VAL_236
#  undef XLAT_STR_237
#  undef XLAT_VAL_237
#  undef XLAT_STR_238
#  undef XLAT_VAL_238
#  undef XLAT_STR_239
#  undef XLAT_VAL_239
#  undef XLAT_STR_240
#  undef XLAT_VAL_240
#  undef XLAT_STR_241
#  undef XLAT_VAL_241
#  undef XLAT_STR_242
#  undef XLAT_VAL_242
#  undef XLAT_STR_243
#  undef XLAT_VAL_243
#  undef XLAT_STR_244
#  undef XLAT_VAL_244
#  undef XLAT_STR_245
#  undef XLAT_VAL_245
#  undef XLAT_STR_246
#  undef XLAT_VAL_246
#  undef XLAT_STR_247
#  undef XLAT_VAL_247
#  undef XLAT_STR_248
#  undef XLAT_VAL_248
#  undef XLAT_STR_249
#  undef XLAT_VAL_249
#  undef XLAT_STR_250
#  undef XLAT_VAL_250
#  undef XLAT_STR_251
#  undef XLAT_VAL_251
#  undef XLAT_STR_252
#  undef XLAT_VAL_252
#  undef XLAT_STR_253
#  undef XLAT_VAL_253
#  undef XLAT_STR_254
#  undef XLAT_VAL_254
#  undef XLAT_STR_255
#  undef XLAT_VAL_255
#  undef XLAT_STR_256
#  undef XLAT_VAL_256
#  undef XLAT_STR_257
#  undef XLAT_VAL_257
#  undef XLAT_STR_258
#  undef XLAT_VAL_258
#  undef XLAT_STR_259
#  undef XLAT_VAL_259
#  undef XLAT_STR_260
#  undef XLAT_VAL_260
#  undef XLAT_STR_261
#  undef XLAT_VAL_261
#  undef XLAT_STR_262
#  undef XLAT_VAL_262
#  undef XLAT_STR_263
#  undef XLAT_VAL_263
#  undef XLAT_STR_264
#  undef XLAT_VAL_264
#  undef XLAT_STR_265
#  undef XLAT_VAL_265
#  undef XLAT_STR_266
#  undef XLAT_VAL_266
#  undef XLAT_STR_267
#  undef XLAT_VAL_267
#  undef XLAT_STR_268
#  undef XLAT_VAL_268
#  undef XLAT_STR_269
#  undef XLAT_VAL_269
#  undef XLAT_STR_270
#  undef XLAT_VAL_270
#  undef XLAT_STR_271
#  undef XLAT_VAL_271
#  undef XLAT_STR_272
#  undef XLAT_VAL_272
#  undef XLAT_STR_273
#  undef XLAT_VAL_273
#  undef XLAT_STR_274
#  undef XLAT_VAL_274
#  undef XLAT_STR_275
#  undef XLAT_VAL_275
#  undef XLAT_STR_276
#  undef XLAT_VAL_276
#  undef XLAT_STR_277
#  undef XLAT_VAL_277
#  undef XLAT_STR_278
#  undef XLAT_VAL_278
#  undef XLAT_STR_279
#  undef XLAT_VAL_279
#  undef XLAT_STR_280
#  undef XLAT_VAL_280
#  undef XLAT_STR_281
#  undef XLAT_VAL_281
#  undef XLAT_STR_282
#  undef XLAT_VAL_282
#  undef XLAT_STR_283
#  undef XLAT_VAL_283
#  undef XLAT_STR_284
#  undef XLAT_VAL_284
#  undef XLAT_STR_285
#  undef XLAT_VAL_285
#  undef XLAT_STR_286
#  undef XLAT_VAL_286
#  undef XLAT_STR_287
#  undef XLAT_VAL_287
#  undef XLAT_STR_288
#  undef XLAT_VAL_288
#  undef XLAT_STR_289
#  undef XLAT_VAL_289
#  undef XLAT_STR_290
#  undef XLAT_VAL_290
#  undef XLAT_STR_291
#  undef XLAT_VAL_291
#  undef XLAT_STR_292
#  undef XLAT_VAL_292
#  undef XLAT_STR_293
#  undef XLAT_VAL_293
#  undef XLAT_STR_294
#  undef XLAT_VAL_294
#  undef XLAT_STR_295
#  undef XLAT_VAL_295
#  undef XLAT_STR_296
#  undef XLAT_VAL_296
#  undef XLAT_STR_297
#  undef XLAT_VAL_297
#  undef XLAT_STR_298
#  undef XLAT_VAL_298
#  undef XLAT_STR_299
#  undef XLAT_VAL_299
#  undef XLAT_STR_300
#  undef XLAT_VAL_300
#  undef XLAT_STR_301
#  undef XLAT_VAL_301
#  undef XLAT_STR_302
#  undef XLAT_VAL_302
#  undef XLAT_STR_303
#  undef XLAT_VAL_303
#  undef XLAT_STR_304
#  undef XLAT_VAL_304
#  undef XLAT_STR_305
#  undef XLAT_VAL_305
#  undef XLAT_STR_306
#  undef XLAT_VAL_306
#  undef XLAT_STR_307
#  undef XLAT_VAL_307
#  undef XLAT_STR_308
#  undef XLAT_VAL_308
#  undef XLAT_STR_309
#  undef XLAT_VAL_309
#  undef XLAT_STR_310
#  undef XLAT_VAL_310
#  undef XLAT_STR_311
#  undef XLAT_VAL_311
#  undef XLAT_STR_312
#  undef XLAT_VAL_312
#  undef XLAT_STR_313
#  undef XLAT_VAL_313
#  undef XLAT_STR_314
#  undef XLAT_VAL_314
#  undef XLAT_STR_315
#  undef XLAT_VAL_315
#  undef XLAT_STR_316
#  undef XLAT_VAL_316
#  undef XLAT_STR_317
#  undef XLAT_VAL_317
#  undef XLAT_STR_318
#  undef XLAT_VAL_318
#  undef XLAT_STR_319
#  undef XLAT_VAL_319
#  undef XLAT_STR_320
#  undef XLAT_VAL_320
#  undef XLAT_STR_321
#  undef XLAT_VAL_321
#  undef XLAT_STR_322
#  undef XLAT_VAL_322
#  undef XLAT_STR_323
#  undef XLAT_VAL_323
#  undef XLAT_STR_324
#  undef XLAT_VAL_324
#  undef XLAT_STR_325
#  undef XLAT_VAL_325
#  undef XLAT_STR_326
#  undef XLAT_VAL_326
#  undef XLAT_STR_327
#  undef XLAT_VAL_327
#  undef XLAT_STR_328
#  undef XLAT_VAL_328
#  undef XLAT_STR_329
#  undef XLAT_VAL_329
#  undef XLAT_STR_330
#  undef XLAT_VAL_330
#  undef XLAT_STR_331
#  undef XLAT_VAL_331
#  undef XLAT_STR_332
#  undef XLAT_VAL_332
#  undef XLAT_STR_333
#  undef XLAT_VAL_333
#  undef XLAT_STR_334
#  undef XLAT_VAL_334
#  undef XLAT_STR_335
#  undef XLAT_VAL_335
#  undef XLAT_STR_336
#  undef XLAT_VAL_336
#  undef XLAT_STR_337
#  undef XLAT_VAL_337
#  undef XLAT_STR_338
#  undef XLAT_VAL_338
#  undef XLAT_STR_339
#  undef XLAT_VAL_339
#  undef XLAT_STR_340
#  undef XLAT_VAL_340
#  undef XLAT_STR_341
#  undef XLAT_VAL_341
#  undef XLAT_STR_342
#  undef XLAT_VAL_342
#  undef XLAT_STR_343
#  undef XLAT_VAL_343
#  undef XLAT_STR_344
#  undef XLAT_VAL_344
#  undef XLAT_STR_345
#  undef XLAT_VAL_345
#  undef XLAT_STR_346
#  undef XLAT_VAL_346
#  undef XLAT_STR_347
#  undef XLAT_VAL_347
#  undef XLAT_STR_348
#  undef XLAT_VAL_348
#  undef XLAT_STR_349
#  undef XLAT_VAL_349
#  undef XLAT_STR_350
#  undef XLAT_VAL_350
#  undef XLAT_STR_351
#  undef XLAT_VAL_351
#  undef XLAT_STR_352
#  undef XLAT_VAL_352
#  undef XLAT_STR_353
#  undef XLAT_VAL_353
#  undef XLAT_STR_354
#  undef XLAT_VAL_354
#  undef XLAT_STR_355
#  undef XLAT_VAL_355
#  undef XLAT_STR_356
#  undef XLAT_VAL_356
#  undef XLAT_STR_357
#  undef XLAT_VAL_357
#  undef XLAT_STR_358
#  undef XLAT_VAL_358
#  undef XLAT_STR_359
#  undef XLAT_VAL_359
#  undef XLAT_STR_360
#  undef XLAT_VAL_360
#  undef XLAT_STR_361
#  undef XLAT_VAL_361
#  undef XLAT_STR_362
#  undef XLAT_VAL_362
#  undef XLAT_STR_363
#  undef XLAT_VAL_363
#  undef XLAT_STR_364
#  undef XLAT_VAL_364
#  undef XLAT_STR_365
#  undef XLAT_VAL_365
#  undef XLAT_STR_366
#  undef XLAT_VAL_366
#  undef XLAT_STR_367
#  undef XLAT_VAL_367
#  undef XLAT_STR_368
#  undef XLAT_VAL_368
#  undef XLAT_STR_369
#  undef XLAT_VAL_369
#  undef XLAT_STR_370
#  undef XLAT_VAL_370
#  undef XLAT_STR_371
#  undef XLAT_VAL_371
#  undef XLAT_STR_372
#  undef XLAT_VAL_372
#  undef XLAT_STR_373
#  undef XLAT_VAL_373
#  undef XLAT_STR_374
#  undef XLAT_VAL_374
#  undef XLAT_STR_375
#  undef XLAT_VAL_375
#  undef XLAT_STR_376
#  undef XLAT_VAL_376
#  undef XLAT_STR_377
#  undef XLAT_VAL_377
#  undef XLAT_STR_378
#  undef XLAT_VAL_378
#  undef XLAT_STR_379
#  undef XLAT_VAL_379
#  undef XLAT_STR_380
#  undef XLAT_VAL_380
#  undef XLAT_STR_381
#  undef XLAT_VAL_381
#  undef XLAT_STR_382
#  undef XLAT_VAL_382
#  undef XLAT_STR_383
#  undef XLAT_VAL_383
#  undef XLAT_STR_384
#  undef XLAT_VAL_384
#  undef XLAT_STR_385
#  undef XLAT_VAL_385
#  undef XLAT_STR_386
#  undef XLAT_VAL_386
#  undef XLAT_STR_387
#  undef XLAT_VAL_387
#  undef XLAT_STR_388
#  undef XLAT_VAL_388
#  undef XLAT_STR_389
#  undef XLAT_VAL_389
#  undef XLAT_STR_390
#  undef XLAT_VAL_390
#  undef XLAT_STR_391
#  undef XLAT_VAL_391
#  undef XLAT_STR_392
#  undef XLAT_VAL_392
#  undef XLAT_STR_393
#  undef XLAT_VAL_393
#  undef XLAT_STR_394
#  undef XLAT_VAL_394
#  undef XLAT_STR_395
#  undef XLAT_VAL_395
#  undef XLAT_STR_396
#  undef XLAT_VAL_396
#  undef XLAT_STR_397
#  undef XLAT_VAL_397
#  undef XLAT_STR_398
#  undef XLAT_VAL_398
#  undef XLAT_STR_399
#  undef XLAT_VAL_399
#  undef XLAT_STR_400
#  undef XLAT_VAL_400
#  undef XLAT_STR_401
#  undef XLAT_VAL_401
#  undef XLAT_STR_402
#  undef XLAT_VAL_402
#  undef XLAT_STR_403
#  undef XLAT_VAL_403
#  undef XLAT_STR_404
#  undef XLAT_VAL_404
#  undef XLAT_STR_405
#  undef XLAT_VAL_405
#  undef XLAT_STR_406
#  undef XLAT_VAL_406
#  undef XLAT_STR_407
#  undef XLAT_VAL_407
#  undef XLAT_STR_408
#  undef XLAT_VAL_408
#  undef XLAT_STR_409
#  undef XLAT_VAL_409
#  undef XLAT_STR_410
#  undef XLAT_VAL_410
#  undef XLAT_STR_411
#  undef XLAT_VAL_411
#  undef XLAT_STR_412
#  undef XLAT_VAL_412
#  undef XLAT_STR_413
#  undef XLAT_VAL_413
#  undef XLAT_STR_414
#  undef XLAT_VAL_414
#  undef XLAT_STR_415
#  undef XLAT_VAL_415
#  undef XLAT_STR_416
#  undef XLAT_VAL_416
#  undef XLAT_STR_417
#  undef XLAT_VAL_417
#  undef XLAT_STR_418
#  undef XLAT_VAL_418
#  undef XLAT_STR_419
#  undef XLAT_VAL_419
#  undef XLAT_STR_420
#  undef XLAT_VAL_420
#  undef XLAT_STR_421
#  undef XLAT_VAL_421
#  undef XLAT_STR_422
#  undef XLAT_VAL_422
#  undef XLAT_STR_423
#  undef XLAT_VAL_423
#  undef XLAT_STR_424
#  undef XLAT_VAL_424
#  undef XLAT_STR_425
#  undef XLAT_VAL_425
#  undef XLAT_STR_426
#  undef XLAT_VAL_426
#  undef XLAT_STR_427
#  undef XLAT_VAL_427
#  undef XLAT_STR_428
#  undef XLAT_VAL_428
#  undef XLAT_STR_429
#  undef XLAT_VAL_429
#  undef XLAT_STR_430
#  undef XLAT_VAL_430
#  undef XLAT_STR_431
#  undef XLAT_VAL_431
#  undef XLAT_STR_432
#  undef XLAT_VAL_432
#  undef XLAT_STR_433
#  undef XLAT_VAL_433
#  undef XLAT_STR_434
#  undef XLAT_VAL_434
#  undef XLAT_STR_435
#  undef XLAT_VAL_435
#  undef XLAT_STR_436
#  undef XLAT_VAL_436
#  undef XLAT_STR_437
#  undef XLAT_VAL_437
#  undef XLAT_STR_438
#  undef XLAT_VAL_438
#  undef XLAT_STR_439
#  undef XLAT_VAL_439
#  undef XLAT_STR_440
#  undef XLAT_VAL_440
#  undef XLAT_STR_441
#  undef XLAT_VAL_441
#  undef XLAT_STR_442
#  undef XLAT_VAL_442
#  undef XLAT_STR_443
#  undef XLAT_VAL_443
#  undef XLAT_STR_444
#  undef XLAT_VAL_444
#  undef XLAT_STR_445
#  undef XLAT_VAL_445
#  undef XLAT_STR_446
#  undef XLAT_VAL_446
#  undef XLAT_STR_447
#  undef XLAT_VAL_447
#  undef XLAT_STR_448
#  undef XLAT_VAL_448
#  undef XLAT_STR_449
#  undef XLAT_VAL_449
#  undef XLAT_STR_450
#  undef XLAT_VAL_450
#  undef XLAT_STR_451
#  undef XLAT_VAL_451
#  undef XLAT_STR_452
#  undef XLAT_VAL_452
#  undef XLAT_STR_453
#  undef XLAT_VAL_453
#  undef XLAT_STR_454
#  undef XLAT_VAL_454
#  undef XLAT_STR_455
#  undef XLAT_VAL_455
#  undef XLAT_STR_456
#  undef XLAT_VAL_456
#  undef XLAT_STR_457
#  undef XLAT_VAL_457
#  undef XLAT_STR_458
#  undef XLAT_VAL_458
#  undef XLAT_STR_459
#  undef XLAT_VAL_459
#  undef XLAT_STR_460
#  undef XLAT_VAL_460
#  undef XLAT_STR_461
#  undef XLAT_VAL_461
#  undef XLAT_STR_462
#  undef XLAT_VAL_462
#  undef XLAT_STR_463
#  undef XLAT_VAL_463
#  undef XLAT_STR_464
#  undef XLAT_VAL_464
#  undef XLAT_STR_465
#  undef XLAT_VAL_465
#  undef XLAT_STR_466
#  undef XLAT_VAL_466
#  undef XLAT_STR_467
#  undef XLAT_VAL_467
#  undef XLAT_STR_468
#  undef XLAT_VAL_468
#  undef XLAT_STR_469
#  undef XLAT_VAL_469
#  undef XLAT_STR_470
#  undef XLAT_VAL_470
#  undef XLAT_STR_471
#  undef XLAT_VAL_471
#  undef XLAT_STR_472
#  undef XLAT_VAL_472
#  undef XLAT_STR_473
#  undef XLAT_VAL_473
#  undef XLAT_STR_474
#  undef XLAT_VAL_474
#  undef XLAT_STR_475
#  undef XLAT_VAL_475
#  undef XLAT_STR_476
#  undef XLAT_VAL_476
#  undef XLAT_STR_477
#  undef XLAT_VAL_477
#  undef XLAT_STR_478
#  undef XLAT_VAL_478
#  undef XLAT_STR_479
#  undef XLAT_VAL_479
#  undef XLAT_STR_480
#  undef XLAT_VAL_480
#  undef XLAT_STR_481
#  undef XLAT_VAL_481
#  undef XLAT_STR_482
#  undef XLAT_VAL_482
#  undef XLAT_STR_483
#  undef XLAT_VAL_483
#  undef XLAT_STR_484
#  undef XLAT_VAL_484
#  undef XLAT_STR_485
#  undef XLAT_VAL_485
#  undef XLAT_STR_486
#  undef XLAT_VAL_486
#  undef XLAT_STR_487
#  undef XLAT_VAL_487
#  undef XLAT_STR_488
#  undef XLAT_VAL_488
#  undef XLAT_STR_489
#  undef XLAT_VAL_489
#  undef XLAT_STR_490
#  undef XLAT_VAL_490
#  undef XLAT_STR_491
#  undef XLAT_VAL_491
#  undef XLAT_STR_492
#  undef XLAT_VAL_492
#  undef XLAT_STR_493
#  undef XLAT_VAL_493
#  undef XLAT_STR_494
#  undef XLAT_VAL_494
#  undef XLAT_STR_495
#  undef XLAT_VAL_495
#  undef XLAT_STR_496
#  undef XLAT_VAL_496
#  undef XLAT_STR_497
#  undef XLAT_VAL_497
#  undef XLAT_STR_498
#  undef XLAT_VAL_498
#  undef XLAT_STR_499
#  undef XLAT_VAL_499
#  undef XLAT_STR_500
#  undef XLAT_VAL_500
#  undef XLAT_STR_501
#  undef XLAT_VAL_501
#  undef XLAT_STR_502
#  undef XLAT_VAL_502
#  undef XLAT_STR_503
#  undef XLAT_VAL_503
#  undef XLAT_STR_504
#  undef XLAT_VAL_504
#  undef XLAT_STR_505
#  undef XLAT_VAL_505
#  undef XLAT_STR_506
#  undef XLAT_VAL_506
#  undef XLAT_STR_507
#  undef XLAT_VAL_507
#  undef XLAT_STR_508
#  undef XLAT_VAL_508
#  undef XLAT_STR_509
#  undef XLAT_VAL_509
#  undef XLAT_STR_510
#  undef XLAT_VAL_510
#  undef XLAT_STR_511
#  undef XLAT_VAL_511
#  undef XLAT_STR_512
#  undef XLAT_VAL_512
#  undef XLAT_STR_513
#  undef XLAT_VAL_513
#  undef XLAT_STR_514
#  undef XLAT_VAL_514
#  undef XLAT_STR_515
#  undef XLAT_VAL_515
#  undef XLAT_STR_516
#  undef XLAT_VAL_516
#  undef XLAT_STR_517
#  undef XLAT_VAL_517
#  undef XLAT_STR_518
#  undef XLAT_VAL_518
#  undef XLAT_STR_519
#  undef XLAT_VAL_519
#  undef XLAT_STR_520
#  undef XLAT_VAL_520
#  undef XLAT_STR_521
#  undef XLAT_VAL_521
#  undef XLAT_STR_522
#  undef XLAT_VAL_522
#  undef XLAT_STR_523
#  undef XLAT_VAL_523
#  undef XLAT_STR_524
#  undef XLAT_VAL_524
#  undef XLAT_STR_525
#  undef XLAT_VAL_525
#  undef XLAT_STR_526
#  undef XLAT_VAL_526
#  undef XLAT_STR_527
#  undef XLAT_VAL_527
#  undef XLAT_STR_528
#  undef XLAT_VAL_528
#  undef XLAT_STR_529
#  undef XLAT_VAL_529
#  undef XLAT_STR_530
#  undef XLAT_VAL_530
#  undef XLAT_STR_531
#  undef XLAT_VAL_531
#  undef XLAT_STR_532
#  undef XLAT_VAL_532
#  undef XLAT_STR_533
#  undef XLAT_VAL_533
#  undef XLAT_STR_534
#  undef XLAT_VAL_534
#  undef XLAT_STR_535
#  undef XLAT_VAL_535
#  undef XLAT_STR_536
#  undef XLAT_VAL_536
#  undef XLAT_STR_537
#  undef XLAT_VAL_537
#  undef XLAT_STR_538
#  undef XLAT_VAL_538
#  undef XLAT_STR_539
#  undef XLAT_VAL_539
#  undef XLAT_STR_540
#  undef XLAT_VAL_540
#  undef XLAT_STR_541
#  undef XLAT_VAL_541
#  undef XLAT_STR_542
#  undef XLAT_VAL_542
#  undef XLAT_STR_543
#  undef XLAT_VAL_543
#  undef XLAT_STR_544
#  undef XLAT_VAL_544
#  undef XLAT_STR_545
#  undef XLAT_VAL_545
#  undef XLAT_STR_546
#  undef XLAT_VAL_546
#  undef XLAT_STR_547
#  undef XLAT_VAL_547
#  undef XLAT_STR_548
#  undef XLAT_VAL_548
#  undef XLAT_STR_549
#  undef XLAT_VAL_549
#  undef XLAT_STR_550
#  undef XLAT_VAL_550
#  undef XLAT_STR_551
#  undef XLAT_VAL_551
#  undef XLAT_STR_552
#  undef XLAT_VAL_552
#  undef XLAT_STR_553
#  undef XLAT_VAL_553
#  undef XLAT_STR_554
#  undef XLAT_VAL_554
#  undef XLAT_STR_555
#  undef XLAT_VAL_555
#  undef XLAT_STR_556
#  undef XLAT_VAL_556
#  undef XLAT_STR_557
#  undef XLAT_VAL_557
#  undef XLAT_STR_558
#  undef XLAT_VAL_558
#  undef XLAT_STR_559
#  undef XLAT_VAL_559
#  undef XLAT_STR_560
#  undef XLAT_VAL_560
#  undef XLAT_STR_561
#  undef XLAT_VAL_561
#  undef XLAT_STR_562
#  undef XLAT_VAL_562
#  undef XLAT_STR_563
#  undef XLAT_VAL_563
#  undef XLAT_STR_564
#  undef XLAT_VAL_564
#  undef XLAT_STR_565
#  undef XLAT_VAL_565
#  undef XLAT_STR_566
#  undef XLAT_VAL_566
#  undef XLAT_STR_567
#  undef XLAT_VAL_567
#  undef XLAT_STR_568
#  undef XLAT_VAL_568
#  undef XLAT_STR_569
#  undef XLAT_VAL_569
#  undef XLAT_STR_570
#  undef XLAT_VAL_570
#  undef XLAT_STR_571
#  undef XLAT_VAL_571
#  undef XLAT_STR_572
#  undef XLAT_VAL_572
#  undef XLAT_STR_573
#  undef XLAT_VAL_573
#  undef XLAT_STR_574
#  undef XLAT_VAL_574
#  undef XLAT_STR_575
#  undef XLAT_VAL_575
#  undef XLAT_STR_576
#  undef XLAT_VAL_576
#  undef XLAT_STR_577
#  undef XLAT_VAL_577
#  undef XLAT_STR_578
#  undef XLAT_VAL_578
#  undef XLAT_STR_579
#  undef XLAT_VAL_579
#  undef XLAT_STR_580
#  undef XLAT_VAL_580
#  undef XLAT_STR_581
#  undef XLAT_VAL_581
#  undef XLAT_STR_582
#  undef XLAT_VAL_582
#  undef XLAT_STR_583
#  undef XLAT_VAL_583
#  undef XLAT_STR_584
#  undef XLAT_VAL_584
#  undef XLAT_STR_585
#  undef XLAT_VAL_585
#  undef XLAT_STR_586
#  undef XLAT_VAL_586
#  undef XLAT_STR_587
#  undef XLAT_VAL_587
#  undef XLAT_STR_588
#  undef XLAT_VAL_588
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
