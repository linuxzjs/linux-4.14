/* Generated by ./xlat/gen.sh from ./xlat/xfs_quota_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(XFS_QUOTA_UDQ_ACCT) || (defined(HAVE_DECL_XFS_QUOTA_UDQ_ACCT) && HAVE_DECL_XFS_QUOTA_UDQ_ACCT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XFS_QUOTA_UDQ_ACCT) == ((1<<0)), "XFS_QUOTA_UDQ_ACCT != (1<<0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XFS_QUOTA_UDQ_ACCT (1<<0)
#endif
#if defined(XFS_QUOTA_UDQ_ENFD) || (defined(HAVE_DECL_XFS_QUOTA_UDQ_ENFD) && HAVE_DECL_XFS_QUOTA_UDQ_ENFD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XFS_QUOTA_UDQ_ENFD) == ((1<<1)), "XFS_QUOTA_UDQ_ENFD != (1<<1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XFS_QUOTA_UDQ_ENFD (1<<1)
#endif
#if defined(XFS_QUOTA_GDQ_ACCT) || (defined(HAVE_DECL_XFS_QUOTA_GDQ_ACCT) && HAVE_DECL_XFS_QUOTA_GDQ_ACCT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XFS_QUOTA_GDQ_ACCT) == ((1<<2)), "XFS_QUOTA_GDQ_ACCT != (1<<2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XFS_QUOTA_GDQ_ACCT (1<<2)
#endif
#if defined(XFS_QUOTA_GDQ_ENFD) || (defined(HAVE_DECL_XFS_QUOTA_GDQ_ENFD) && HAVE_DECL_XFS_QUOTA_GDQ_ENFD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XFS_QUOTA_GDQ_ENFD) == ((1<<3)), "XFS_QUOTA_GDQ_ENFD != (1<<3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XFS_QUOTA_GDQ_ENFD (1<<3)
#endif
#if defined(XFS_QUOTA_PDQ_ACCT) || (defined(HAVE_DECL_XFS_QUOTA_PDQ_ACCT) && HAVE_DECL_XFS_QUOTA_PDQ_ACCT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XFS_QUOTA_PDQ_ACCT) == ((1<<4)), "XFS_QUOTA_PDQ_ACCT != (1<<4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XFS_QUOTA_PDQ_ACCT (1<<4)
#endif
#if defined(XFS_QUOTA_PDQ_ENFD) || (defined(HAVE_DECL_XFS_QUOTA_PDQ_ENFD) && HAVE_DECL_XFS_QUOTA_PDQ_ENFD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XFS_QUOTA_PDQ_ENFD) == ((1<<5)), "XFS_QUOTA_PDQ_ENFD != (1<<5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XFS_QUOTA_PDQ_ENFD (1<<5)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat xfs_quota_flags in mpers mode

# else

static const struct xlat_data xfs_quota_flags_xdata[] = {
 XLAT(XFS_QUOTA_UDQ_ACCT),
 #define XLAT_VAL_0 ((unsigned) (XFS_QUOTA_UDQ_ACCT))
 #define XLAT_STR_0 STRINGIFY(XFS_QUOTA_UDQ_ACCT)
 XLAT(XFS_QUOTA_UDQ_ENFD),
 #define XLAT_VAL_1 ((unsigned) (XFS_QUOTA_UDQ_ENFD))
 #define XLAT_STR_1 STRINGIFY(XFS_QUOTA_UDQ_ENFD)
 XLAT(XFS_QUOTA_GDQ_ACCT),
 #define XLAT_VAL_2 ((unsigned) (XFS_QUOTA_GDQ_ACCT))
 #define XLAT_STR_2 STRINGIFY(XFS_QUOTA_GDQ_ACCT)
 XLAT(XFS_QUOTA_GDQ_ENFD),
 #define XLAT_VAL_3 ((unsigned) (XFS_QUOTA_GDQ_ENFD))
 #define XLAT_STR_3 STRINGIFY(XFS_QUOTA_GDQ_ENFD)
 XLAT(XFS_QUOTA_PDQ_ACCT),
 #define XLAT_VAL_4 ((unsigned) (XFS_QUOTA_PDQ_ACCT))
 #define XLAT_STR_4 STRINGIFY(XFS_QUOTA_PDQ_ACCT)
 XLAT(XFS_QUOTA_PDQ_ENFD),
 #define XLAT_VAL_5 ((unsigned) (XFS_QUOTA_PDQ_ENFD))
 #define XLAT_STR_5 STRINGIFY(XFS_QUOTA_PDQ_ENFD)
};
static
const struct xlat xfs_quota_flags[1] = { {
 .data = xfs_quota_flags_xdata,
 .size = ARRAY_SIZE(xfs_quota_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
