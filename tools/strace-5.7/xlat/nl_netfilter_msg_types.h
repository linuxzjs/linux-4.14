/* Generated by ./xlat/gen.sh from ./xlat/nl_netfilter_msg_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NFNL_MSG_BATCH_BEGIN) || (defined(HAVE_DECL_NFNL_MSG_BATCH_BEGIN) && HAVE_DECL_NFNL_MSG_BATCH_BEGIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_MSG_BATCH_BEGIN) == (0x10), "NFNL_MSG_BATCH_BEGIN != 0x10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_MSG_BATCH_BEGIN 0x10
#endif
#if defined(NFNL_MSG_BATCH_END) || (defined(HAVE_DECL_NFNL_MSG_BATCH_END) && HAVE_DECL_NFNL_MSG_BATCH_END)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_MSG_BATCH_END) == (0x11), "NFNL_MSG_BATCH_END != 0x11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_MSG_BATCH_END 0x11
#endif

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

static const struct xlat_data nl_netfilter_msg_types_xdata[] = {
 XLAT(NFNL_MSG_BATCH_BEGIN),
 #define XLAT_VAL_0 ((unsigned) (NFNL_MSG_BATCH_BEGIN))
 #define XLAT_STR_0 STRINGIFY(NFNL_MSG_BATCH_BEGIN)
 XLAT(NFNL_MSG_BATCH_END),
 #define XLAT_VAL_1 ((unsigned) (NFNL_MSG_BATCH_END))
 #define XLAT_STR_1 STRINGIFY(NFNL_MSG_BATCH_END)
};
const struct xlat nl_netfilter_msg_types[1] = { {
 .data = nl_netfilter_msg_types_xdata,
 .size = ARRAY_SIZE(nl_netfilter_msg_types_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
