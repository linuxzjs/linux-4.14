/* Generated by ./xlat/gen.sh from ./xlat/open_mode_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined __hppa__ || defined __mips__
#if defined(O_CREAT) || (defined(HAVE_DECL_O_CREAT) && HAVE_DECL_O_CREAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_CREAT) == (0400), "O_CREAT != 0400");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_CREAT 0400
#endif
#elif defined __alpha__ || defined __sparc__
#if defined(O_CREAT) || (defined(HAVE_DECL_O_CREAT) && HAVE_DECL_O_CREAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_CREAT) == (01000), "O_CREAT != 01000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_CREAT 01000
#endif
#else
#if defined(O_CREAT) || (defined(HAVE_DECL_O_CREAT) && HAVE_DECL_O_CREAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_CREAT) == (0100), "O_CREAT != 0100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_CREAT 0100
#endif
#endif
#if defined __hppa__ || defined __mips__
#if defined(O_EXCL) || (defined(HAVE_DECL_O_EXCL) && HAVE_DECL_O_EXCL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_EXCL) == (02000), "O_EXCL != 02000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_EXCL 02000
#endif
#elif defined __alpha__ || defined __sparc__
#if defined(O_EXCL) || (defined(HAVE_DECL_O_EXCL) && HAVE_DECL_O_EXCL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_EXCL) == (04000), "O_EXCL != 04000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_EXCL 04000
#endif
#else
#if defined(O_EXCL) || (defined(HAVE_DECL_O_EXCL) && HAVE_DECL_O_EXCL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_EXCL) == (0200), "O_EXCL != 0200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_EXCL 0200
#endif
#endif
#if defined __mips__
#if defined(O_NOCTTY) || (defined(HAVE_DECL_O_NOCTTY) && HAVE_DECL_O_NOCTTY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOCTTY) == (04000), "O_NOCTTY != 04000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOCTTY 04000
#endif
#elif defined __alpha__
#if defined(O_NOCTTY) || (defined(HAVE_DECL_O_NOCTTY) && HAVE_DECL_O_NOCTTY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOCTTY) == (010000), "O_NOCTTY != 010000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOCTTY 010000
#endif
#elif defined __sparc__
#if defined(O_NOCTTY) || (defined(HAVE_DECL_O_NOCTTY) && HAVE_DECL_O_NOCTTY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOCTTY) == (0100000), "O_NOCTTY != 0100000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOCTTY 0100000
#endif
#elif defined __hppa__
#if defined(O_NOCTTY) || (defined(HAVE_DECL_O_NOCTTY) && HAVE_DECL_O_NOCTTY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOCTTY) == (0400000), "O_NOCTTY != 0400000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOCTTY 0400000
#endif
#else
#if defined(O_NOCTTY) || (defined(HAVE_DECL_O_NOCTTY) && HAVE_DECL_O_NOCTTY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOCTTY) == (0400), "O_NOCTTY != 0400");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOCTTY 0400
#endif
#endif
#if defined __alpha__ || defined __sparc__
#if defined(O_TRUNC) || (defined(HAVE_DECL_O_TRUNC) && HAVE_DECL_O_TRUNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_TRUNC) == (02000), "O_TRUNC != 02000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_TRUNC 02000
#endif
#else
#if defined(O_TRUNC) || (defined(HAVE_DECL_O_TRUNC) && HAVE_DECL_O_TRUNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_TRUNC) == (01000), "O_TRUNC != 01000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_TRUNC 01000
#endif
#endif
#if defined __alpha__ || defined __hppa__ || defined __mips__ || defined __sparc__
#if defined(O_APPEND) || (defined(HAVE_DECL_O_APPEND) && HAVE_DECL_O_APPEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_APPEND) == (010), "O_APPEND != 010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_APPEND 010
#endif
#else
#if defined(O_APPEND) || (defined(HAVE_DECL_O_APPEND) && HAVE_DECL_O_APPEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_APPEND) == (02000), "O_APPEND != 02000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_APPEND 02000
#endif
#endif
#if defined __alpha__
#if defined(O_NONBLOCK) || (defined(HAVE_DECL_O_NONBLOCK) && HAVE_DECL_O_NONBLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NONBLOCK) == (04), "O_NONBLOCK != 04");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NONBLOCK 04
#endif
#elif defined __mips__
#if defined(O_NONBLOCK) || (defined(HAVE_DECL_O_NONBLOCK) && HAVE_DECL_O_NONBLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NONBLOCK) == (0200), "O_NONBLOCK != 0200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NONBLOCK 0200
#endif
#elif defined __sparc__
#if defined(O_NONBLOCK) || (defined(HAVE_DECL_O_NONBLOCK) && HAVE_DECL_O_NONBLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NONBLOCK) == (040000), "O_NONBLOCK != 040000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NONBLOCK 040000
#endif
#elif defined __hppa__
#if defined(O_NONBLOCK) || (defined(HAVE_DECL_O_NONBLOCK) && HAVE_DECL_O_NONBLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NONBLOCK) == (0200004), "O_NONBLOCK != 0200004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NONBLOCK 0200004
#endif
#else
#if defined(O_NONBLOCK) || (defined(HAVE_DECL_O_NONBLOCK) && HAVE_DECL_O_NONBLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NONBLOCK) == (04000), "O_NONBLOCK != 04000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NONBLOCK 04000
#endif
#endif
#if defined __mips__
#if defined(__O_SYNC) || (defined(HAVE_DECL___O_SYNC) && HAVE_DECL___O_SYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((__O_SYNC) == (040000), "__O_SYNC != 040000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define __O_SYNC 040000
#endif
#elif defined __hppa__
#if defined(__O_SYNC) || (defined(HAVE_DECL___O_SYNC) && HAVE_DECL___O_SYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((__O_SYNC) == (0100000), "__O_SYNC != 0100000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define __O_SYNC 0100000
#endif
#elif defined __alpha__
#if defined(__O_SYNC) || (defined(HAVE_DECL___O_SYNC) && HAVE_DECL___O_SYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((__O_SYNC) == (020000000), "__O_SYNC != 020000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define __O_SYNC 020000000
#endif
#elif defined __sparc__
#if defined(__O_SYNC) || (defined(HAVE_DECL___O_SYNC) && HAVE_DECL___O_SYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((__O_SYNC) == (040000000), "__O_SYNC != 040000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define __O_SYNC 040000000
#endif
#else
#if defined(__O_SYNC) || (defined(HAVE_DECL___O_SYNC) && HAVE_DECL___O_SYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((__O_SYNC) == (04000000), "__O_SYNC != 04000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define __O_SYNC 04000000
#endif
#endif
#if defined __mips__
#if defined(O_DSYNC) || (defined(HAVE_DECL_O_DSYNC) && HAVE_DECL_O_DSYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DSYNC) == (020), "O_DSYNC != 020");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DSYNC 020
#endif
#elif defined __sparc__
#if defined(O_DSYNC) || (defined(HAVE_DECL_O_DSYNC) && HAVE_DECL_O_DSYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DSYNC) == (020000), "O_DSYNC != 020000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DSYNC 020000
#endif
#elif defined __alpha__
#if defined(O_DSYNC) || (defined(HAVE_DECL_O_DSYNC) && HAVE_DECL_O_DSYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DSYNC) == (040000), "O_DSYNC != 040000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DSYNC 040000
#endif
#elif defined __hppa__
#if defined(O_DSYNC) || (defined(HAVE_DECL_O_DSYNC) && HAVE_DECL_O_DSYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DSYNC) == (01000000), "O_DSYNC != 01000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DSYNC 01000000
#endif
#else
#if defined(O_DSYNC) || (defined(HAVE_DECL_O_DSYNC) && HAVE_DECL_O_DSYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DSYNC) == (010000), "O_DSYNC != 010000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DSYNC 010000
#endif
#endif
#if defined __hppa__
#if defined(O_RSYNC) || (defined(HAVE_DECL_O_RSYNC) && HAVE_DECL_O_RSYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_RSYNC) == (02000000), "O_RSYNC != 02000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_RSYNC 02000000
#endif
#else
#endif
#if defined O_NDELAY && O_NDELAY & O_NONBLOCK
# ifndef STRACE_WORKAROUND_FOR_O_NDELAY
#  define STRACE_WORKAROUND_FOR_O_NDELAY
#  undef O_NDELAY
# endif
#endif
#if defined __sparc__
#if defined(O_NDELAY) || (defined(HAVE_DECL_O_NDELAY) && HAVE_DECL_O_NDELAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NDELAY) == (04), "O_NDELAY != 04");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NDELAY 04
#endif
#else
#endif
#if defined __sparc__
#if defined(O_DIRECT) || (defined(HAVE_DECL_O_DIRECT) && HAVE_DECL_O_DIRECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DIRECT) == (04000000), "O_DIRECT != 04000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DIRECT 04000000
#endif
#elif defined __mips__
#if defined(O_DIRECT) || (defined(HAVE_DECL_O_DIRECT) && HAVE_DECL_O_DIRECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DIRECT) == (0100000), "O_DIRECT != 0100000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DIRECT 0100000
#endif
#elif defined __arm__ || defined __arm64__ || defined __aarch64__ || defined __m68k__
#if defined(O_DIRECT) || (defined(HAVE_DECL_O_DIRECT) && HAVE_DECL_O_DIRECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DIRECT) == (0200000), "O_DIRECT != 0200000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DIRECT 0200000
#endif
#elif defined __powerpc__
#if defined(O_DIRECT) || (defined(HAVE_DECL_O_DIRECT) && HAVE_DECL_O_DIRECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DIRECT) == (0400000), "O_DIRECT != 0400000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DIRECT 0400000
#endif
#elif defined __alpha__
#if defined(O_DIRECT) || (defined(HAVE_DECL_O_DIRECT) && HAVE_DECL_O_DIRECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DIRECT) == (02000000), "O_DIRECT != 02000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DIRECT 02000000
#endif
#else
#if defined(O_DIRECT) || (defined(HAVE_DECL_O_DIRECT) && HAVE_DECL_O_DIRECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DIRECT) == (040000), "O_DIRECT != 040000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DIRECT 040000
#endif
#endif
#if defined __hppa__
#if defined(O_LARGEFILE) || (defined(HAVE_DECL_O_LARGEFILE) && HAVE_DECL_O_LARGEFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_LARGEFILE) == (04000), "O_LARGEFILE != 04000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_LARGEFILE 04000
#endif
#elif defined __mips__
#if defined(O_LARGEFILE) || (defined(HAVE_DECL_O_LARGEFILE) && HAVE_DECL_O_LARGEFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_LARGEFILE) == (020000), "O_LARGEFILE != 020000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_LARGEFILE 020000
#endif
#elif defined __powerpc__
#if defined(O_LARGEFILE) || (defined(HAVE_DECL_O_LARGEFILE) && HAVE_DECL_O_LARGEFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_LARGEFILE) == (0200000), "O_LARGEFILE != 0200000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_LARGEFILE 0200000
#endif
#elif defined __alpha__ || defined __arm__ || defined __arm64__ || defined __aarch64__ || defined __m68k__
#if defined(O_LARGEFILE) || (defined(HAVE_DECL_O_LARGEFILE) && HAVE_DECL_O_LARGEFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_LARGEFILE) == (0400000), "O_LARGEFILE != 0400000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_LARGEFILE 0400000
#endif
#elif defined __sparc__
#if defined(O_LARGEFILE) || (defined(HAVE_DECL_O_LARGEFILE) && HAVE_DECL_O_LARGEFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_LARGEFILE) == (01000000), "O_LARGEFILE != 01000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_LARGEFILE 01000000
#endif
#else
#if defined(O_LARGEFILE) || (defined(HAVE_DECL_O_LARGEFILE) && HAVE_DECL_O_LARGEFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_LARGEFILE) == (0100000), "O_LARGEFILE != 0100000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_LARGEFILE 0100000
#endif
#endif
#if defined __hppa__
#if defined(O_NOFOLLOW) || (defined(HAVE_DECL_O_NOFOLLOW) && HAVE_DECL_O_NOFOLLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOFOLLOW) == (0200), "O_NOFOLLOW != 0200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOFOLLOW 0200
#endif
#elif defined __arm__ || defined __arm64__ || defined __aarch64__ || defined __m68k__ || defined __powerpc__
#if defined(O_NOFOLLOW) || (defined(HAVE_DECL_O_NOFOLLOW) && HAVE_DECL_O_NOFOLLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOFOLLOW) == (0100000), "O_NOFOLLOW != 0100000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOFOLLOW 0100000
#endif
#elif defined __alpha__
#if defined(O_NOFOLLOW) || (defined(HAVE_DECL_O_NOFOLLOW) && HAVE_DECL_O_NOFOLLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOFOLLOW) == (0200000), "O_NOFOLLOW != 0200000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOFOLLOW 0200000
#endif
#else
#if defined(O_NOFOLLOW) || (defined(HAVE_DECL_O_NOFOLLOW) && HAVE_DECL_O_NOFOLLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOFOLLOW) == (0400000), "O_NOFOLLOW != 0400000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOFOLLOW 0400000
#endif
#endif
#if defined __alpha__ || defined __hppa__
#if defined(O_NOATIME) || (defined(HAVE_DECL_O_NOATIME) && HAVE_DECL_O_NOATIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOATIME) == (04000000), "O_NOATIME != 04000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOATIME 04000000
#endif
#elif defined __sparc__
#if defined(O_NOATIME) || (defined(HAVE_DECL_O_NOATIME) && HAVE_DECL_O_NOATIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOATIME) == (010000000), "O_NOATIME != 010000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOATIME 010000000
#endif
#else
#if defined(O_NOATIME) || (defined(HAVE_DECL_O_NOATIME) && HAVE_DECL_O_NOATIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_NOATIME) == (01000000), "O_NOATIME != 01000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_NOATIME 01000000
#endif
#endif
#if defined __alpha__ || defined __hppa__
#if defined(O_CLOEXEC) || (defined(HAVE_DECL_O_CLOEXEC) && HAVE_DECL_O_CLOEXEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_CLOEXEC) == (010000000), "O_CLOEXEC != 010000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_CLOEXEC 010000000
#endif
#elif defined __sparc__
#if defined(O_CLOEXEC) || (defined(HAVE_DECL_O_CLOEXEC) && HAVE_DECL_O_CLOEXEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_CLOEXEC) == (020000000), "O_CLOEXEC != 020000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_CLOEXEC 020000000
#endif
#else
#if defined(O_CLOEXEC) || (defined(HAVE_DECL_O_CLOEXEC) && HAVE_DECL_O_CLOEXEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_CLOEXEC) == (02000000), "O_CLOEXEC != 02000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_CLOEXEC 02000000
#endif
#endif
#if defined __hppa__
#if defined(O_PATH) || (defined(HAVE_DECL_O_PATH) && HAVE_DECL_O_PATH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_PATH) == (020000000), "O_PATH != 020000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_PATH 020000000
#endif
#elif defined __alpha__
#if defined(O_PATH) || (defined(HAVE_DECL_O_PATH) && HAVE_DECL_O_PATH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_PATH) == (040000000), "O_PATH != 040000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_PATH 040000000
#endif
#elif defined __sparc__
#if defined(O_PATH) || (defined(HAVE_DECL_O_PATH) && HAVE_DECL_O_PATH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_PATH) == (0100000000), "O_PATH != 0100000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_PATH 0100000000
#endif
#else
#if defined(O_PATH) || (defined(HAVE_DECL_O_PATH) && HAVE_DECL_O_PATH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_PATH) == (010000000), "O_PATH != 010000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_PATH 010000000
#endif
#endif
#if defined __hppa__
#if defined(__O_TMPFILE) || (defined(HAVE_DECL___O_TMPFILE) && HAVE_DECL___O_TMPFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((__O_TMPFILE) == (040000000), "__O_TMPFILE != 040000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define __O_TMPFILE 040000000
#endif
#elif defined __alpha__
#if defined(__O_TMPFILE) || (defined(HAVE_DECL___O_TMPFILE) && HAVE_DECL___O_TMPFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((__O_TMPFILE) == (0100000000), "__O_TMPFILE != 0100000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define __O_TMPFILE 0100000000
#endif
#elif defined __sparc__
#if defined(__O_TMPFILE) || (defined(HAVE_DECL___O_TMPFILE) && HAVE_DECL___O_TMPFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((__O_TMPFILE) == (0200000000), "__O_TMPFILE != 0200000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define __O_TMPFILE 0200000000
#endif
#else
#if defined(__O_TMPFILE) || (defined(HAVE_DECL___O_TMPFILE) && HAVE_DECL___O_TMPFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((__O_TMPFILE) == (020000000), "__O_TMPFILE != 020000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define __O_TMPFILE 020000000
#endif
#endif
#if defined __hppa__
#if defined(O_DIRECTORY) || (defined(HAVE_DECL_O_DIRECTORY) && HAVE_DECL_O_DIRECTORY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DIRECTORY) == (010000), "O_DIRECTORY != 010000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DIRECTORY 010000
#endif
#elif defined __arm__ || defined __arm64__ || defined __aarch64__ || defined __m68k__ || defined __powerpc__
#if defined(O_DIRECTORY) || (defined(HAVE_DECL_O_DIRECTORY) && HAVE_DECL_O_DIRECTORY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DIRECTORY) == (040000), "O_DIRECTORY != 040000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DIRECTORY 040000
#endif
#elif defined __alpha__
#if defined(O_DIRECTORY) || (defined(HAVE_DECL_O_DIRECTORY) && HAVE_DECL_O_DIRECTORY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DIRECTORY) == (0100000), "O_DIRECTORY != 0100000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DIRECTORY 0100000
#endif
#else
#if defined(O_DIRECTORY) || (defined(HAVE_DECL_O_DIRECTORY) && HAVE_DECL_O_DIRECTORY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((O_DIRECTORY) == (0200000), "O_DIRECTORY != 0200000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define O_DIRECTORY 0200000
#endif
#endif
#if defined __sparc__
#if defined(FASYNC) || (defined(HAVE_DECL_FASYNC) && HAVE_DECL_FASYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FASYNC) == (0100), "FASYNC != 0100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FASYNC 0100
#endif
#elif defined __mips__
#if defined(FASYNC) || (defined(HAVE_DECL_FASYNC) && HAVE_DECL_FASYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FASYNC) == (010000), "FASYNC != 010000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FASYNC 010000
#endif
#else
#if defined(FASYNC) || (defined(HAVE_DECL_FASYNC) && HAVE_DECL_FASYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FASYNC) == (020000), "FASYNC != 020000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FASYNC 020000
#endif
#endif

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

static const struct xlat_data open_mode_flags_xdata[] = {


#if defined __hppa__ || defined __mips__
 XLAT(O_CREAT),
 #define XLAT_VAL_0 ((unsigned) (O_CREAT))
 #define XLAT_STR_0 STRINGIFY(O_CREAT)
#elif defined __alpha__ || defined __sparc__
 XLAT(O_CREAT),
 #define XLAT_VAL_1 ((unsigned) (O_CREAT))
 #define XLAT_STR_1 STRINGIFY(O_CREAT)
#else
 XLAT(O_CREAT),
 #define XLAT_VAL_2 ((unsigned) (O_CREAT))
 #define XLAT_STR_2 STRINGIFY(O_CREAT)
#endif

#if defined __hppa__ || defined __mips__
 XLAT(O_EXCL),
 #define XLAT_VAL_3 ((unsigned) (O_EXCL))
 #define XLAT_STR_3 STRINGIFY(O_EXCL)
#elif defined __alpha__ || defined __sparc__
 XLAT(O_EXCL),
 #define XLAT_VAL_4 ((unsigned) (O_EXCL))
 #define XLAT_STR_4 STRINGIFY(O_EXCL)
#else
 XLAT(O_EXCL),
 #define XLAT_VAL_5 ((unsigned) (O_EXCL))
 #define XLAT_STR_5 STRINGIFY(O_EXCL)
#endif

#if defined __mips__
 XLAT(O_NOCTTY),
 #define XLAT_VAL_6 ((unsigned) (O_NOCTTY))
 #define XLAT_STR_6 STRINGIFY(O_NOCTTY)
#elif defined __alpha__
 XLAT(O_NOCTTY),
 #define XLAT_VAL_7 ((unsigned) (O_NOCTTY))
 #define XLAT_STR_7 STRINGIFY(O_NOCTTY)
#elif defined __sparc__
 XLAT(O_NOCTTY),
 #define XLAT_VAL_8 ((unsigned) (O_NOCTTY))
 #define XLAT_STR_8 STRINGIFY(O_NOCTTY)
#elif defined __hppa__
 XLAT(O_NOCTTY),
 #define XLAT_VAL_9 ((unsigned) (O_NOCTTY))
 #define XLAT_STR_9 STRINGIFY(O_NOCTTY)
#else
 XLAT(O_NOCTTY),
 #define XLAT_VAL_10 ((unsigned) (O_NOCTTY))
 #define XLAT_STR_10 STRINGIFY(O_NOCTTY)
#endif

#if defined __alpha__ || defined __sparc__
 XLAT(O_TRUNC),
 #define XLAT_VAL_11 ((unsigned) (O_TRUNC))
 #define XLAT_STR_11 STRINGIFY(O_TRUNC)
#else
 XLAT(O_TRUNC),
 #define XLAT_VAL_12 ((unsigned) (O_TRUNC))
 #define XLAT_STR_12 STRINGIFY(O_TRUNC)
#endif

#if defined __alpha__ || defined __hppa__ || defined __mips__ || defined __sparc__
 XLAT(O_APPEND),
 #define XLAT_VAL_13 ((unsigned) (O_APPEND))
 #define XLAT_STR_13 STRINGIFY(O_APPEND)
#else
 XLAT(O_APPEND),
 #define XLAT_VAL_14 ((unsigned) (O_APPEND))
 #define XLAT_STR_14 STRINGIFY(O_APPEND)
#endif

#if defined __alpha__
 XLAT(O_NONBLOCK),
 #define XLAT_VAL_15 ((unsigned) (O_NONBLOCK))
 #define XLAT_STR_15 STRINGIFY(O_NONBLOCK)
#elif defined __mips__
 XLAT(O_NONBLOCK),
 #define XLAT_VAL_16 ((unsigned) (O_NONBLOCK))
 #define XLAT_STR_16 STRINGIFY(O_NONBLOCK)
#elif defined __sparc__
 XLAT(O_NONBLOCK),
 #define XLAT_VAL_17 ((unsigned) (O_NONBLOCK))
 #define XLAT_STR_17 STRINGIFY(O_NONBLOCK)
#elif defined __hppa__
 XLAT(O_NONBLOCK),
 #define XLAT_VAL_18 ((unsigned) (O_NONBLOCK))
 #define XLAT_STR_18 STRINGIFY(O_NONBLOCK)
#else
 XLAT(O_NONBLOCK),
 #define XLAT_VAL_19 ((unsigned) (O_NONBLOCK))
 #define XLAT_STR_19 STRINGIFY(O_NONBLOCK)
#endif


#if defined(O_SYNC) || (defined(HAVE_DECL_O_SYNC) && HAVE_DECL_O_SYNC)
  XLAT(O_SYNC),
 #define XLAT_VAL_20 ((unsigned) (O_SYNC))
 #define XLAT_STR_20 STRINGIFY(O_SYNC)
#endif

#if defined __mips__
 XLAT(__O_SYNC),
 #define XLAT_VAL_21 ((unsigned) (__O_SYNC))
 #define XLAT_STR_21 STRINGIFY(__O_SYNC)
#elif defined __hppa__
 XLAT(__O_SYNC),
 #define XLAT_VAL_22 ((unsigned) (__O_SYNC))
 #define XLAT_STR_22 STRINGIFY(__O_SYNC)
#elif defined __alpha__
 XLAT(__O_SYNC),
 #define XLAT_VAL_23 ((unsigned) (__O_SYNC))
 #define XLAT_STR_23 STRINGIFY(__O_SYNC)
#elif defined __sparc__
 XLAT(__O_SYNC),
 #define XLAT_VAL_24 ((unsigned) (__O_SYNC))
 #define XLAT_STR_24 STRINGIFY(__O_SYNC)
#else
 XLAT(__O_SYNC),
 #define XLAT_VAL_25 ((unsigned) (__O_SYNC))
 #define XLAT_STR_25 STRINGIFY(__O_SYNC)
#endif

#if defined(O_ASYNC) || (defined(HAVE_DECL_O_ASYNC) && HAVE_DECL_O_ASYNC)
  XLAT(O_ASYNC),
 #define XLAT_VAL_26 ((unsigned) (O_ASYNC))
 #define XLAT_STR_26 STRINGIFY(O_ASYNC)
#endif

#if defined __mips__
 XLAT(O_DSYNC),
 #define XLAT_VAL_27 ((unsigned) (O_DSYNC))
 #define XLAT_STR_27 STRINGIFY(O_DSYNC)
#elif defined __sparc__
 XLAT(O_DSYNC),
 #define XLAT_VAL_28 ((unsigned) (O_DSYNC))
 #define XLAT_STR_28 STRINGIFY(O_DSYNC)
#elif defined __alpha__
 XLAT(O_DSYNC),
 #define XLAT_VAL_29 ((unsigned) (O_DSYNC))
 #define XLAT_STR_29 STRINGIFY(O_DSYNC)
#elif defined __hppa__
 XLAT(O_DSYNC),
 #define XLAT_VAL_30 ((unsigned) (O_DSYNC))
 #define XLAT_STR_30 STRINGIFY(O_DSYNC)
#else
 XLAT(O_DSYNC),
 #define XLAT_VAL_31 ((unsigned) (O_DSYNC))
 #define XLAT_STR_31 STRINGIFY(O_DSYNC)
#endif

#if defined __hppa__
 XLAT(O_RSYNC),
 #define XLAT_VAL_32 ((unsigned) (O_RSYNC))
 #define XLAT_STR_32 STRINGIFY(O_RSYNC)
#else
#if defined(O_RSYNC) || (defined(HAVE_DECL_O_RSYNC) && HAVE_DECL_O_RSYNC)
  XLAT(O_RSYNC),
 #define XLAT_VAL_33 ((unsigned) (O_RSYNC))
 #define XLAT_STR_33 STRINGIFY(O_RSYNC)
#endif
#endif

#if defined O_NDELAY && O_NDELAY & O_NONBLOCK
# ifndef STRACE_WORKAROUND_FOR_O_NDELAY
#  define STRACE_WORKAROUND_FOR_O_NDELAY



#  undef O_NDELAY
# endif
#endif

#if defined __sparc__
 XLAT(O_NDELAY),
 #define XLAT_VAL_34 ((unsigned) (O_NDELAY))
 #define XLAT_STR_34 STRINGIFY(O_NDELAY)
#else
#if defined(O_NDELAY) || (defined(HAVE_DECL_O_NDELAY) && HAVE_DECL_O_NDELAY)
  XLAT(O_NDELAY),
 #define XLAT_VAL_35 ((unsigned) (O_NDELAY))
 #define XLAT_STR_35 STRINGIFY(O_NDELAY)
#endif
#endif

#if defined __sparc__
 XLAT(O_DIRECT),
 #define XLAT_VAL_36 ((unsigned) (O_DIRECT))
 #define XLAT_STR_36 STRINGIFY(O_DIRECT)
#elif defined __mips__
 XLAT(O_DIRECT),
 #define XLAT_VAL_37 ((unsigned) (O_DIRECT))
 #define XLAT_STR_37 STRINGIFY(O_DIRECT)
#elif defined __arm__ || defined __arm64__ || defined __aarch64__ || defined __m68k__
 XLAT(O_DIRECT),
 #define XLAT_VAL_38 ((unsigned) (O_DIRECT))
 #define XLAT_STR_38 STRINGIFY(O_DIRECT)
#elif defined __powerpc__
 XLAT(O_DIRECT),
 #define XLAT_VAL_39 ((unsigned) (O_DIRECT))
 #define XLAT_STR_39 STRINGIFY(O_DIRECT)
#elif defined __alpha__
 XLAT(O_DIRECT),
 #define XLAT_VAL_40 ((unsigned) (O_DIRECT))
 #define XLAT_STR_40 STRINGIFY(O_DIRECT)
#else
 XLAT(O_DIRECT),
 #define XLAT_VAL_41 ((unsigned) (O_DIRECT))
 #define XLAT_STR_41 STRINGIFY(O_DIRECT)
#endif

#if defined __hppa__
 XLAT(O_LARGEFILE),
 #define XLAT_VAL_42 ((unsigned) (O_LARGEFILE))
 #define XLAT_STR_42 STRINGIFY(O_LARGEFILE)
#elif defined __mips__
 XLAT(O_LARGEFILE),
 #define XLAT_VAL_43 ((unsigned) (O_LARGEFILE))
 #define XLAT_STR_43 STRINGIFY(O_LARGEFILE)
#elif defined __powerpc__
 XLAT(O_LARGEFILE),
 #define XLAT_VAL_44 ((unsigned) (O_LARGEFILE))
 #define XLAT_STR_44 STRINGIFY(O_LARGEFILE)
#elif defined __alpha__ || defined __arm__ || defined __arm64__ || defined __aarch64__ || defined __m68k__
 XLAT(O_LARGEFILE),
 #define XLAT_VAL_45 ((unsigned) (O_LARGEFILE))
 #define XLAT_STR_45 STRINGIFY(O_LARGEFILE)
#elif defined __sparc__
 XLAT(O_LARGEFILE),
 #define XLAT_VAL_46 ((unsigned) (O_LARGEFILE))
 #define XLAT_STR_46 STRINGIFY(O_LARGEFILE)
#else
 XLAT(O_LARGEFILE),
 #define XLAT_VAL_47 ((unsigned) (O_LARGEFILE))
 #define XLAT_STR_47 STRINGIFY(O_LARGEFILE)
#endif

#if defined __hppa__
 XLAT(O_NOFOLLOW),
 #define XLAT_VAL_48 ((unsigned) (O_NOFOLLOW))
 #define XLAT_STR_48 STRINGIFY(O_NOFOLLOW)
#elif defined __arm__ || defined __arm64__ || defined __aarch64__ || defined __m68k__ || defined __powerpc__
 XLAT(O_NOFOLLOW),
 #define XLAT_VAL_49 ((unsigned) (O_NOFOLLOW))
 #define XLAT_STR_49 STRINGIFY(O_NOFOLLOW)
#elif defined __alpha__
 XLAT(O_NOFOLLOW),
 #define XLAT_VAL_50 ((unsigned) (O_NOFOLLOW))
 #define XLAT_STR_50 STRINGIFY(O_NOFOLLOW)
#else
 XLAT(O_NOFOLLOW),
 #define XLAT_VAL_51 ((unsigned) (O_NOFOLLOW))
 #define XLAT_STR_51 STRINGIFY(O_NOFOLLOW)
#endif

#if defined __alpha__ || defined __hppa__
 XLAT(O_NOATIME),
 #define XLAT_VAL_52 ((unsigned) (O_NOATIME))
 #define XLAT_STR_52 STRINGIFY(O_NOATIME)
#elif defined __sparc__
 XLAT(O_NOATIME),
 #define XLAT_VAL_53 ((unsigned) (O_NOATIME))
 #define XLAT_STR_53 STRINGIFY(O_NOATIME)
#else
 XLAT(O_NOATIME),
 #define XLAT_VAL_54 ((unsigned) (O_NOATIME))
 #define XLAT_STR_54 STRINGIFY(O_NOATIME)
#endif

#if defined __alpha__ || defined __hppa__
 XLAT(O_CLOEXEC),
 #define XLAT_VAL_55 ((unsigned) (O_CLOEXEC))
 #define XLAT_STR_55 STRINGIFY(O_CLOEXEC)
#elif defined __sparc__
 XLAT(O_CLOEXEC),
 #define XLAT_VAL_56 ((unsigned) (O_CLOEXEC))
 #define XLAT_STR_56 STRINGIFY(O_CLOEXEC)
#else
 XLAT(O_CLOEXEC),
 #define XLAT_VAL_57 ((unsigned) (O_CLOEXEC))
 #define XLAT_STR_57 STRINGIFY(O_CLOEXEC)
#endif

#if defined __hppa__
 XLAT(O_PATH),
 #define XLAT_VAL_58 ((unsigned) (O_PATH))
 #define XLAT_STR_58 STRINGIFY(O_PATH)
#elif defined __alpha__
 XLAT(O_PATH),
 #define XLAT_VAL_59 ((unsigned) (O_PATH))
 #define XLAT_STR_59 STRINGIFY(O_PATH)
#elif defined __sparc__
 XLAT(O_PATH),
 #define XLAT_VAL_60 ((unsigned) (O_PATH))
 #define XLAT_STR_60 STRINGIFY(O_PATH)
#else
 XLAT(O_PATH),
 #define XLAT_VAL_61 ((unsigned) (O_PATH))
 #define XLAT_STR_61 STRINGIFY(O_PATH)
#endif


#if defined(O_TMPFILE) || (defined(HAVE_DECL_O_TMPFILE) && HAVE_DECL_O_TMPFILE)
  XLAT(O_TMPFILE),
 #define XLAT_VAL_62 ((unsigned) (O_TMPFILE))
 #define XLAT_STR_62 STRINGIFY(O_TMPFILE)
#endif

#if defined __hppa__
 XLAT(__O_TMPFILE),
 #define XLAT_VAL_63 ((unsigned) (__O_TMPFILE))
 #define XLAT_STR_63 STRINGIFY(__O_TMPFILE)
#elif defined __alpha__
 XLAT(__O_TMPFILE),
 #define XLAT_VAL_64 ((unsigned) (__O_TMPFILE))
 #define XLAT_STR_64 STRINGIFY(__O_TMPFILE)
#elif defined __sparc__
 XLAT(__O_TMPFILE),
 #define XLAT_VAL_65 ((unsigned) (__O_TMPFILE))
 #define XLAT_STR_65 STRINGIFY(__O_TMPFILE)
#else
 XLAT(__O_TMPFILE),
 #define XLAT_VAL_66 ((unsigned) (__O_TMPFILE))
 #define XLAT_STR_66 STRINGIFY(__O_TMPFILE)
#endif

#if defined __hppa__
 XLAT(O_DIRECTORY),
 #define XLAT_VAL_67 ((unsigned) (O_DIRECTORY))
 #define XLAT_STR_67 STRINGIFY(O_DIRECTORY)
#elif defined __arm__ || defined __arm64__ || defined __aarch64__ || defined __m68k__ || defined __powerpc__
 XLAT(O_DIRECTORY),
 #define XLAT_VAL_68 ((unsigned) (O_DIRECTORY))
 #define XLAT_STR_68 STRINGIFY(O_DIRECTORY)
#elif defined __alpha__
 XLAT(O_DIRECTORY),
 #define XLAT_VAL_69 ((unsigned) (O_DIRECTORY))
 #define XLAT_STR_69 STRINGIFY(O_DIRECTORY)
#else
 XLAT(O_DIRECTORY),
 #define XLAT_VAL_70 ((unsigned) (O_DIRECTORY))
 #define XLAT_STR_70 STRINGIFY(O_DIRECTORY)
#endif

#if defined __sparc__
 XLAT(FASYNC),
 #define XLAT_VAL_71 ((unsigned) (FASYNC))
 #define XLAT_STR_71 STRINGIFY(FASYNC)
#elif defined __mips__
 XLAT(FASYNC),
 #define XLAT_VAL_72 ((unsigned) (FASYNC))
 #define XLAT_STR_72 STRINGIFY(FASYNC)
#else
 XLAT(FASYNC),
 #define XLAT_VAL_73 ((unsigned) (FASYNC))
 #define XLAT_STR_73 STRINGIFY(FASYNC)
#endif
};
const struct xlat open_mode_flags[1] = { {
 .data = open_mode_flags_xdata,
 .size = ARRAY_SIZE(open_mode_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
