/* Generated by ./xlat/gen.sh from ./xlat/v4l2_ioctl_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#ifndef STRACE_WORKAROUND_V4L2_TIME64
# define STRACE_WORKAROUND_V4L2_TIME64
# undef VIDIOC_QUERYBUF
# undef VIDIOC_QBUF
# undef VIDIOC_DQBUF
# undef VIDIOC_PREPARE_BUF
# undef VIDIOC_DQEVENT
#endif
#if defined(VIDIOC_QUERYCAP) || (defined(HAVE_DECL_VIDIOC_QUERYCAP) && HAVE_DECL_VIDIOC_QUERYCAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_QUERYCAP) == (_IOR ('V',   0, struct_v4l2_capability)), "VIDIOC_QUERYCAP != _IOR ('V',   0, struct_v4l2_capability)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_QUERYCAP _IOR ('V',   0, struct_v4l2_capability)
#endif
#if defined(VIDIOC_ENUM_FMT) || (defined(HAVE_DECL_VIDIOC_ENUM_FMT) && HAVE_DECL_VIDIOC_ENUM_FMT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_ENUM_FMT) == (_IOWR('V',   2, struct v4l2_fmtdesc)), "VIDIOC_ENUM_FMT != _IOWR('V',   2, struct v4l2_fmtdesc)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_ENUM_FMT _IOWR('V',   2, struct v4l2_fmtdesc)
#endif
#if defined(VIDIOC_G_FMT) || (defined(HAVE_DECL_VIDIOC_G_FMT) && HAVE_DECL_VIDIOC_G_FMT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_G_FMT) == (_IOWR('V',   4, struct_v4l2_format)), "VIDIOC_G_FMT != _IOWR('V',   4, struct_v4l2_format)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_G_FMT _IOWR('V',   4, struct_v4l2_format)
#endif
#if defined(VIDIOC_S_FMT) || (defined(HAVE_DECL_VIDIOC_S_FMT) && HAVE_DECL_VIDIOC_S_FMT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_S_FMT) == (_IOWR('V',   5, struct_v4l2_format)), "VIDIOC_S_FMT != _IOWR('V',   5, struct_v4l2_format)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_S_FMT _IOWR('V',   5, struct_v4l2_format)
#endif
#if defined(VIDIOC_REQBUFS) || (defined(HAVE_DECL_VIDIOC_REQBUFS) && HAVE_DECL_VIDIOC_REQBUFS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_REQBUFS) == (_IOWR('V',   8, struct v4l2_requestbuffers)), "VIDIOC_REQBUFS != _IOWR('V',   8, struct v4l2_requestbuffers)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_REQBUFS _IOWR('V',   8, struct v4l2_requestbuffers)
#endif
#if defined(VIDIOC_QUERYBUF) || (defined(HAVE_DECL_VIDIOC_QUERYBUF) && HAVE_DECL_VIDIOC_QUERYBUF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_QUERYBUF) == (_IOWR('V',   9, kernel_v4l2_buffer_t)), "VIDIOC_QUERYBUF != _IOWR('V',   9, kernel_v4l2_buffer_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_QUERYBUF _IOWR('V',   9, kernel_v4l2_buffer_t)
#endif
#if defined(VIDIOC_G_FBUF) || (defined(HAVE_DECL_VIDIOC_G_FBUF) && HAVE_DECL_VIDIOC_G_FBUF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_G_FBUF) == (_IOR ('V',  10, struct_v4l2_framebuffer)), "VIDIOC_G_FBUF != _IOR ('V',  10, struct_v4l2_framebuffer)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_G_FBUF _IOR ('V',  10, struct_v4l2_framebuffer)
#endif
#if defined(VIDIOC_S_FBUF) || (defined(HAVE_DECL_VIDIOC_S_FBUF) && HAVE_DECL_VIDIOC_S_FBUF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_S_FBUF) == (_IOW ('V',  11, struct_v4l2_framebuffer)), "VIDIOC_S_FBUF != _IOW ('V',  11, struct_v4l2_framebuffer)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_S_FBUF _IOW ('V',  11, struct_v4l2_framebuffer)
#endif
#if defined(VIDIOC_QBUF) || (defined(HAVE_DECL_VIDIOC_QBUF) && HAVE_DECL_VIDIOC_QBUF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_QBUF) == (_IOWR('V',  15, kernel_v4l2_buffer_t)), "VIDIOC_QBUF != _IOWR('V',  15, kernel_v4l2_buffer_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_QBUF _IOWR('V',  15, kernel_v4l2_buffer_t)
#endif
#if defined(VIDIOC_DQBUF) || (defined(HAVE_DECL_VIDIOC_DQBUF) && HAVE_DECL_VIDIOC_DQBUF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_DQBUF) == (_IOWR('V',  17, kernel_v4l2_buffer_t)), "VIDIOC_DQBUF != _IOWR('V',  17, kernel_v4l2_buffer_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_DQBUF _IOWR('V',  17, kernel_v4l2_buffer_t)
#endif
#if defined(VIDIOC_STREAMON) || (defined(HAVE_DECL_VIDIOC_STREAMON) && HAVE_DECL_VIDIOC_STREAMON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_STREAMON) == (_IOW ('V',  18, int)), "VIDIOC_STREAMON != _IOW ('V',  18, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_STREAMON _IOW ('V',  18, int)
#endif
#if defined(VIDIOC_STREAMOFF) || (defined(HAVE_DECL_VIDIOC_STREAMOFF) && HAVE_DECL_VIDIOC_STREAMOFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_STREAMOFF) == (_IOW ('V',  19, int)), "VIDIOC_STREAMOFF != _IOW ('V',  19, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_STREAMOFF _IOW ('V',  19, int)
#endif
#if defined(VIDIOC_G_PARM) || (defined(HAVE_DECL_VIDIOC_G_PARM) && HAVE_DECL_VIDIOC_G_PARM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_G_PARM) == (_IOWR('V',  21, struct v4l2_streamparm)), "VIDIOC_G_PARM != _IOWR('V',  21, struct v4l2_streamparm)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_G_PARM _IOWR('V',  21, struct v4l2_streamparm)
#endif
#if defined(VIDIOC_S_PARM) || (defined(HAVE_DECL_VIDIOC_S_PARM) && HAVE_DECL_VIDIOC_S_PARM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_S_PARM) == (_IOWR('V',  22, struct v4l2_streamparm)), "VIDIOC_S_PARM != _IOWR('V',  22, struct v4l2_streamparm)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_S_PARM _IOWR('V',  22, struct v4l2_streamparm)
#endif
#if defined(VIDIOC_G_STD) || (defined(HAVE_DECL_VIDIOC_G_STD) && HAVE_DECL_VIDIOC_G_STD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_G_STD) == (_IOR ('V',  23, uint64_t)), "VIDIOC_G_STD != _IOR ('V',  23, uint64_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_G_STD _IOR ('V',  23, uint64_t)
#endif
#if defined(VIDIOC_S_STD) || (defined(HAVE_DECL_VIDIOC_S_STD) && HAVE_DECL_VIDIOC_S_STD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_S_STD) == (_IOW ('V',  24, uint64_t)), "VIDIOC_S_STD != _IOW ('V',  24, uint64_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_S_STD _IOW ('V',  24, uint64_t)
#endif
#if defined(VIDIOC_ENUMSTD) || (defined(HAVE_DECL_VIDIOC_ENUMSTD) && HAVE_DECL_VIDIOC_ENUMSTD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_ENUMSTD) == (_IOWR('V',  25, struct_v4l2_standard)), "VIDIOC_ENUMSTD != _IOWR('V',  25, struct_v4l2_standard)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_ENUMSTD _IOWR('V',  25, struct_v4l2_standard)
#endif
#if defined(VIDIOC_ENUMINPUT) || (defined(HAVE_DECL_VIDIOC_ENUMINPUT) && HAVE_DECL_VIDIOC_ENUMINPUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_ENUMINPUT) == (_IOWR('V',  26, struct_v4l2_input)), "VIDIOC_ENUMINPUT != _IOWR('V',  26, struct_v4l2_input)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_ENUMINPUT _IOWR('V',  26, struct_v4l2_input)
#endif
#if defined(VIDIOC_G_CTRL) || (defined(HAVE_DECL_VIDIOC_G_CTRL) && HAVE_DECL_VIDIOC_G_CTRL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_G_CTRL) == (_IOWR('V',  27, struct v4l2_control)), "VIDIOC_G_CTRL != _IOWR('V',  27, struct v4l2_control)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_G_CTRL _IOWR('V',  27, struct v4l2_control)
#endif
#if defined(VIDIOC_S_CTRL) || (defined(HAVE_DECL_VIDIOC_S_CTRL) && HAVE_DECL_VIDIOC_S_CTRL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_S_CTRL) == (_IOWR('V',  28, struct v4l2_control)), "VIDIOC_S_CTRL != _IOWR('V',  28, struct v4l2_control)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_S_CTRL _IOWR('V',  28, struct v4l2_control)
#endif
#if defined(VIDIOC_G_TUNER) || (defined(HAVE_DECL_VIDIOC_G_TUNER) && HAVE_DECL_VIDIOC_G_TUNER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_G_TUNER) == (_IOWR('V',  29, struct v4l2_tuner)), "VIDIOC_G_TUNER != _IOWR('V',  29, struct v4l2_tuner)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_G_TUNER _IOWR('V',  29, struct v4l2_tuner)
#endif
#if defined(VIDIOC_S_TUNER) || (defined(HAVE_DECL_VIDIOC_S_TUNER) && HAVE_DECL_VIDIOC_S_TUNER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_S_TUNER) == (_IOW ('V',  30, struct v4l2_tuner)), "VIDIOC_S_TUNER != _IOW ('V',  30, struct v4l2_tuner)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_S_TUNER _IOW ('V',  30, struct v4l2_tuner)
#endif
#if defined(VIDIOC_QUERYCTRL) || (defined(HAVE_DECL_VIDIOC_QUERYCTRL) && HAVE_DECL_VIDIOC_QUERYCTRL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_QUERYCTRL) == (_IOWR('V',  36, struct v4l2_queryctrl)), "VIDIOC_QUERYCTRL != _IOWR('V',  36, struct v4l2_queryctrl)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_QUERYCTRL _IOWR('V',  36, struct v4l2_queryctrl)
#endif
#if defined(VIDIOC_G_INPUT) || (defined(HAVE_DECL_VIDIOC_G_INPUT) && HAVE_DECL_VIDIOC_G_INPUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_G_INPUT) == (_IOR ('V',  38, int)), "VIDIOC_G_INPUT != _IOR ('V',  38, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_G_INPUT _IOR ('V',  38, int)
#endif
#if defined(VIDIOC_S_INPUT) || (defined(HAVE_DECL_VIDIOC_S_INPUT) && HAVE_DECL_VIDIOC_S_INPUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_S_INPUT) == (_IOWR('V',  39, int)), "VIDIOC_S_INPUT != _IOWR('V',  39, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_S_INPUT _IOWR('V',  39, int)
#endif
#if defined(VIDIOC_CROPCAP) || (defined(HAVE_DECL_VIDIOC_CROPCAP) && HAVE_DECL_VIDIOC_CROPCAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_CROPCAP) == (_IOWR('V',  58, struct v4l2_cropcap)), "VIDIOC_CROPCAP != _IOWR('V',  58, struct v4l2_cropcap)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_CROPCAP _IOWR('V',  58, struct v4l2_cropcap)
#endif
#if defined(VIDIOC_G_CROP) || (defined(HAVE_DECL_VIDIOC_G_CROP) && HAVE_DECL_VIDIOC_G_CROP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_G_CROP) == (_IOWR('V',  59, struct v4l2_crop)), "VIDIOC_G_CROP != _IOWR('V',  59, struct v4l2_crop)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_G_CROP _IOWR('V',  59, struct v4l2_crop)
#endif
#if defined(VIDIOC_S_CROP) || (defined(HAVE_DECL_VIDIOC_S_CROP) && HAVE_DECL_VIDIOC_S_CROP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_S_CROP) == (_IOW ('V',  60, struct v4l2_crop)), "VIDIOC_S_CROP != _IOW ('V',  60, struct v4l2_crop)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_S_CROP _IOW ('V',  60, struct v4l2_crop)
#endif
#if defined(VIDIOC_TRY_FMT) || (defined(HAVE_DECL_VIDIOC_TRY_FMT) && HAVE_DECL_VIDIOC_TRY_FMT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_TRY_FMT) == (_IOWR('V',  64, struct_v4l2_format)), "VIDIOC_TRY_FMT != _IOWR('V',  64, struct_v4l2_format)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_TRY_FMT _IOWR('V',  64, struct_v4l2_format)
#endif
#if defined(VIDIOC_G_EXT_CTRLS) || (defined(HAVE_DECL_VIDIOC_G_EXT_CTRLS) && HAVE_DECL_VIDIOC_G_EXT_CTRLS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_G_EXT_CTRLS) == (_IOWR('V',  71, struct_v4l2_ext_controls)), "VIDIOC_G_EXT_CTRLS != _IOWR('V',  71, struct_v4l2_ext_controls)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_G_EXT_CTRLS _IOWR('V',  71, struct_v4l2_ext_controls)
#endif
#if defined(VIDIOC_S_EXT_CTRLS) || (defined(HAVE_DECL_VIDIOC_S_EXT_CTRLS) && HAVE_DECL_VIDIOC_S_EXT_CTRLS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_S_EXT_CTRLS) == (_IOWR('V',  72, struct_v4l2_ext_controls)), "VIDIOC_S_EXT_CTRLS != _IOWR('V',  72, struct_v4l2_ext_controls)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_S_EXT_CTRLS _IOWR('V',  72, struct_v4l2_ext_controls)
#endif
#if defined(VIDIOC_TRY_EXT_CTRLS) || (defined(HAVE_DECL_VIDIOC_TRY_EXT_CTRLS) && HAVE_DECL_VIDIOC_TRY_EXT_CTRLS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_TRY_EXT_CTRLS) == (_IOWR('V',  73, struct_v4l2_ext_controls)), "VIDIOC_TRY_EXT_CTRLS != _IOWR('V',  73, struct_v4l2_ext_controls)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_TRY_EXT_CTRLS _IOWR('V',  73, struct_v4l2_ext_controls)
#endif
#if defined(VIDIOC_ENUM_FRAMESIZES) || (defined(HAVE_DECL_VIDIOC_ENUM_FRAMESIZES) && HAVE_DECL_VIDIOC_ENUM_FRAMESIZES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_ENUM_FRAMESIZES) == (_IOWR('V',  74, struct_v4l2_frmsizeenum)), "VIDIOC_ENUM_FRAMESIZES != _IOWR('V',  74, struct_v4l2_frmsizeenum)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_ENUM_FRAMESIZES _IOWR('V',  74, struct_v4l2_frmsizeenum)
#endif
#if defined(VIDIOC_ENUM_FRAMEINTERVALS) || (defined(HAVE_DECL_VIDIOC_ENUM_FRAMEINTERVALS) && HAVE_DECL_VIDIOC_ENUM_FRAMEINTERVALS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_ENUM_FRAMEINTERVALS) == (_IOWR('V',  75, struct_v4l2_frmivalenum)), "VIDIOC_ENUM_FRAMEINTERVALS != _IOWR('V',  75, struct_v4l2_frmivalenum)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_ENUM_FRAMEINTERVALS _IOWR('V',  75, struct_v4l2_frmivalenum)
#endif
#if defined(VIDIOC_DQEVENT) || (defined(HAVE_DECL_VIDIOC_DQEVENT) && HAVE_DECL_VIDIOC_DQEVENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_DQEVENT) == (_IOR ('V',  89, kernel_v4l2_event_t)), "VIDIOC_DQEVENT != _IOR ('V',  89, kernel_v4l2_event_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_DQEVENT _IOR ('V',  89, kernel_v4l2_event_t)
#endif
#if defined(VIDIOC_CREATE_BUFS) || (defined(HAVE_DECL_VIDIOC_CREATE_BUFS) && HAVE_DECL_VIDIOC_CREATE_BUFS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_CREATE_BUFS) == (_IOWR('V',  92, struct_v4l2_create_buffers)), "VIDIOC_CREATE_BUFS != _IOWR('V',  92, struct_v4l2_create_buffers)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_CREATE_BUFS _IOWR('V',  92, struct_v4l2_create_buffers)
#endif
#if defined(VIDIOC_PREPARE_BUF) || (defined(HAVE_DECL_VIDIOC_PREPARE_BUF) && HAVE_DECL_VIDIOC_PREPARE_BUF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VIDIOC_PREPARE_BUF) == (_IOWR('V',  93, kernel_v4l2_buffer_t)), "VIDIOC_PREPARE_BUF != _IOWR('V',  93, kernel_v4l2_buffer_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VIDIOC_PREPARE_BUF _IOWR('V',  93, kernel_v4l2_buffer_t)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat v4l2_ioctl_cmds[];

# else

static const struct xlat_data v4l2_ioctl_cmds_xdata[] = {
#ifndef STRACE_WORKAROUND_V4L2_TIME64
# define STRACE_WORKAROUND_V4L2_TIME64

# undef VIDIOC_QUERYBUF
# undef VIDIOC_QBUF
# undef VIDIOC_DQBUF
# undef VIDIOC_PREPARE_BUF

# undef VIDIOC_DQEVENT
#endif

 XLAT(VIDIOC_QUERYCAP),
 #define XLAT_VAL_0 ((unsigned) (VIDIOC_QUERYCAP))
 #define XLAT_STR_0 STRINGIFY(VIDIOC_QUERYCAP)
 XLAT(VIDIOC_ENUM_FMT),
 #define XLAT_VAL_1 ((unsigned) (VIDIOC_ENUM_FMT))
 #define XLAT_STR_1 STRINGIFY(VIDIOC_ENUM_FMT)
 XLAT(VIDIOC_G_FMT),
 #define XLAT_VAL_2 ((unsigned) (VIDIOC_G_FMT))
 #define XLAT_STR_2 STRINGIFY(VIDIOC_G_FMT)
 XLAT(VIDIOC_S_FMT),
 #define XLAT_VAL_3 ((unsigned) (VIDIOC_S_FMT))
 #define XLAT_STR_3 STRINGIFY(VIDIOC_S_FMT)


 XLAT(VIDIOC_REQBUFS),
 #define XLAT_VAL_4 ((unsigned) (VIDIOC_REQBUFS))
 #define XLAT_STR_4 STRINGIFY(VIDIOC_REQBUFS)
 XLAT(VIDIOC_QUERYBUF),
 #define XLAT_VAL_5 ((unsigned) (VIDIOC_QUERYBUF))
 #define XLAT_STR_5 STRINGIFY(VIDIOC_QUERYBUF)
 XLAT(VIDIOC_G_FBUF),
 #define XLAT_VAL_6 ((unsigned) (VIDIOC_G_FBUF))
 #define XLAT_STR_6 STRINGIFY(VIDIOC_G_FBUF)
 XLAT(VIDIOC_S_FBUF),
 #define XLAT_VAL_7 ((unsigned) (VIDIOC_S_FBUF))
 #define XLAT_STR_7 STRINGIFY(VIDIOC_S_FBUF)

 XLAT(VIDIOC_QBUF),
 #define XLAT_VAL_8 ((unsigned) (VIDIOC_QBUF))
 #define XLAT_STR_8 STRINGIFY(VIDIOC_QBUF)

 XLAT(VIDIOC_DQBUF),
 #define XLAT_VAL_9 ((unsigned) (VIDIOC_DQBUF))
 #define XLAT_STR_9 STRINGIFY(VIDIOC_DQBUF)
 XLAT(VIDIOC_STREAMON),
 #define XLAT_VAL_10 ((unsigned) (VIDIOC_STREAMON))
 #define XLAT_STR_10 STRINGIFY(VIDIOC_STREAMON)
 XLAT(VIDIOC_STREAMOFF),
 #define XLAT_VAL_11 ((unsigned) (VIDIOC_STREAMOFF))
 #define XLAT_STR_11 STRINGIFY(VIDIOC_STREAMOFF)
 XLAT(VIDIOC_G_PARM),
 #define XLAT_VAL_12 ((unsigned) (VIDIOC_G_PARM))
 #define XLAT_STR_12 STRINGIFY(VIDIOC_G_PARM)
 XLAT(VIDIOC_S_PARM),
 #define XLAT_VAL_13 ((unsigned) (VIDIOC_S_PARM))
 #define XLAT_STR_13 STRINGIFY(VIDIOC_S_PARM)
 XLAT(VIDIOC_G_STD),
 #define XLAT_VAL_14 ((unsigned) (VIDIOC_G_STD))
 #define XLAT_STR_14 STRINGIFY(VIDIOC_G_STD)
 XLAT(VIDIOC_S_STD),
 #define XLAT_VAL_15 ((unsigned) (VIDIOC_S_STD))
 #define XLAT_STR_15 STRINGIFY(VIDIOC_S_STD)
 XLAT(VIDIOC_ENUMSTD),
 #define XLAT_VAL_16 ((unsigned) (VIDIOC_ENUMSTD))
 #define XLAT_STR_16 STRINGIFY(VIDIOC_ENUMSTD)
 XLAT(VIDIOC_ENUMINPUT),
 #define XLAT_VAL_17 ((unsigned) (VIDIOC_ENUMINPUT))
 #define XLAT_STR_17 STRINGIFY(VIDIOC_ENUMINPUT)
 XLAT(VIDIOC_G_CTRL),
 #define XLAT_VAL_18 ((unsigned) (VIDIOC_G_CTRL))
 #define XLAT_STR_18 STRINGIFY(VIDIOC_G_CTRL)
 XLAT(VIDIOC_S_CTRL),
 #define XLAT_VAL_19 ((unsigned) (VIDIOC_S_CTRL))
 #define XLAT_STR_19 STRINGIFY(VIDIOC_S_CTRL)
 XLAT(VIDIOC_G_TUNER),
 #define XLAT_VAL_20 ((unsigned) (VIDIOC_G_TUNER))
 #define XLAT_STR_20 STRINGIFY(VIDIOC_G_TUNER)
 XLAT(VIDIOC_S_TUNER),
 #define XLAT_VAL_21 ((unsigned) (VIDIOC_S_TUNER))
 #define XLAT_STR_21 STRINGIFY(VIDIOC_S_TUNER)


 XLAT(VIDIOC_QUERYCTRL),
 #define XLAT_VAL_22 ((unsigned) (VIDIOC_QUERYCTRL))
 #define XLAT_STR_22 STRINGIFY(VIDIOC_QUERYCTRL)

 XLAT(VIDIOC_G_INPUT),
 #define XLAT_VAL_23 ((unsigned) (VIDIOC_G_INPUT))
 #define XLAT_STR_23 STRINGIFY(VIDIOC_G_INPUT)
 XLAT(VIDIOC_S_INPUT),
 #define XLAT_VAL_24 ((unsigned) (VIDIOC_S_INPUT))
 #define XLAT_STR_24 STRINGIFY(VIDIOC_S_INPUT)











 XLAT(VIDIOC_CROPCAP),
 #define XLAT_VAL_25 ((unsigned) (VIDIOC_CROPCAP))
 #define XLAT_STR_25 STRINGIFY(VIDIOC_CROPCAP)
 XLAT(VIDIOC_G_CROP),
 #define XLAT_VAL_26 ((unsigned) (VIDIOC_G_CROP))
 #define XLAT_STR_26 STRINGIFY(VIDIOC_G_CROP)
 XLAT(VIDIOC_S_CROP),
 #define XLAT_VAL_27 ((unsigned) (VIDIOC_S_CROP))
 #define XLAT_STR_27 STRINGIFY(VIDIOC_S_CROP)



 XLAT(VIDIOC_TRY_FMT),
 #define XLAT_VAL_28 ((unsigned) (VIDIOC_TRY_FMT))
 #define XLAT_STR_28 STRINGIFY(VIDIOC_TRY_FMT)






 XLAT(VIDIOC_G_EXT_CTRLS),
 #define XLAT_VAL_29 ((unsigned) (VIDIOC_G_EXT_CTRLS))
 #define XLAT_STR_29 STRINGIFY(VIDIOC_G_EXT_CTRLS)
 XLAT(VIDIOC_S_EXT_CTRLS),
 #define XLAT_VAL_30 ((unsigned) (VIDIOC_S_EXT_CTRLS))
 #define XLAT_STR_30 STRINGIFY(VIDIOC_S_EXT_CTRLS)
 XLAT(VIDIOC_TRY_EXT_CTRLS),
 #define XLAT_VAL_31 ((unsigned) (VIDIOC_TRY_EXT_CTRLS))
 #define XLAT_STR_31 STRINGIFY(VIDIOC_TRY_EXT_CTRLS)
 XLAT(VIDIOC_ENUM_FRAMESIZES),
 #define XLAT_VAL_32 ((unsigned) (VIDIOC_ENUM_FRAMESIZES))
 #define XLAT_STR_32 STRINGIFY(VIDIOC_ENUM_FRAMESIZES)
 XLAT(VIDIOC_ENUM_FRAMEINTERVALS),
 #define XLAT_VAL_33 ((unsigned) (VIDIOC_ENUM_FRAMEINTERVALS))
 #define XLAT_STR_33 STRINGIFY(VIDIOC_ENUM_FRAMEINTERVALS)














 XLAT(VIDIOC_DQEVENT),
 #define XLAT_VAL_34 ((unsigned) (VIDIOC_DQEVENT))
 #define XLAT_STR_34 STRINGIFY(VIDIOC_DQEVENT)


 XLAT(VIDIOC_CREATE_BUFS),
 #define XLAT_VAL_35 ((unsigned) (VIDIOC_CREATE_BUFS))
 #define XLAT_STR_35 STRINGIFY(VIDIOC_CREATE_BUFS)
 XLAT(VIDIOC_PREPARE_BUF),
 #define XLAT_VAL_36 ((unsigned) (VIDIOC_PREPARE_BUF))
 #define XLAT_STR_36 STRINGIFY(VIDIOC_PREPARE_BUF)























};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat v4l2_ioctl_cmds[1] = { {
 .data = v4l2_ioctl_cmds_xdata,
 .size = ARRAY_SIZE(v4l2_ioctl_cmds_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
