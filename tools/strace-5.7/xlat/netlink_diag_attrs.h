/* Generated by ./xlat/gen.sh from ./xlat/netlink_diag_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"


#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat netlink_diag_attrs in mpers mode

# else

static const struct xlat_data netlink_diag_attrs_xdata[] = {
 XLAT(NETLINK_DIAG_MEMINFO),
 #define XLAT_VAL_0 ((unsigned) (NETLINK_DIAG_MEMINFO))
 #define XLAT_STR_0 STRINGIFY(NETLINK_DIAG_MEMINFO)
 XLAT(NETLINK_DIAG_GROUPS),
 #define XLAT_VAL_1 ((unsigned) (NETLINK_DIAG_GROUPS))
 #define XLAT_STR_1 STRINGIFY(NETLINK_DIAG_GROUPS)
 XLAT(NETLINK_DIAG_RX_RING),
 #define XLAT_VAL_2 ((unsigned) (NETLINK_DIAG_RX_RING))
 #define XLAT_STR_2 STRINGIFY(NETLINK_DIAG_RX_RING)
 XLAT(NETLINK_DIAG_TX_RING),
 #define XLAT_VAL_3 ((unsigned) (NETLINK_DIAG_TX_RING))
 #define XLAT_STR_3 STRINGIFY(NETLINK_DIAG_TX_RING)
 XLAT(NETLINK_DIAG_FLAGS),
 #define XLAT_VAL_4 ((unsigned) (NETLINK_DIAG_FLAGS))
 #define XLAT_STR_4 STRINGIFY(NETLINK_DIAG_FLAGS)
};
static
const struct xlat netlink_diag_attrs[1] = { {
 .data = netlink_diag_attrs_xdata,
 .size = ARRAY_SIZE(netlink_diag_attrs_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
