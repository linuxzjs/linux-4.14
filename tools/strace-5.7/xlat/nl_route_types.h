/* Generated by ./xlat/gen.sh from ./xlat/nl_route_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(RTM_NEWLINK) || (defined(HAVE_DECL_RTM_NEWLINK) && HAVE_DECL_RTM_NEWLINK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWLINK) == (16), "RTM_NEWLINK != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWLINK 16
#endif
#if defined(RTM_DELLINK) || (defined(HAVE_DECL_RTM_DELLINK) && HAVE_DECL_RTM_DELLINK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELLINK) == (17), "RTM_DELLINK != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELLINK 17
#endif
#if defined(RTM_GETLINK) || (defined(HAVE_DECL_RTM_GETLINK) && HAVE_DECL_RTM_GETLINK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETLINK) == (18), "RTM_GETLINK != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETLINK 18
#endif
#if defined(RTM_SETLINK) || (defined(HAVE_DECL_RTM_SETLINK) && HAVE_DECL_RTM_SETLINK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_SETLINK) == (19), "RTM_SETLINK != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_SETLINK 19
#endif
#if defined(RTM_NEWADDR) || (defined(HAVE_DECL_RTM_NEWADDR) && HAVE_DECL_RTM_NEWADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWADDR) == (20), "RTM_NEWADDR != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWADDR 20
#endif
#if defined(RTM_DELADDR) || (defined(HAVE_DECL_RTM_DELADDR) && HAVE_DECL_RTM_DELADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELADDR) == (21), "RTM_DELADDR != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELADDR 21
#endif
#if defined(RTM_GETADDR) || (defined(HAVE_DECL_RTM_GETADDR) && HAVE_DECL_RTM_GETADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETADDR) == (22), "RTM_GETADDR != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETADDR 22
#endif
#if defined(RTM_NEWROUTE) || (defined(HAVE_DECL_RTM_NEWROUTE) && HAVE_DECL_RTM_NEWROUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWROUTE) == (24), "RTM_NEWROUTE != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWROUTE 24
#endif
#if defined(RTM_DELROUTE) || (defined(HAVE_DECL_RTM_DELROUTE) && HAVE_DECL_RTM_DELROUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELROUTE) == (25), "RTM_DELROUTE != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELROUTE 25
#endif
#if defined(RTM_GETROUTE) || (defined(HAVE_DECL_RTM_GETROUTE) && HAVE_DECL_RTM_GETROUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETROUTE) == (26), "RTM_GETROUTE != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETROUTE 26
#endif
#if defined(RTM_NEWNEIGH) || (defined(HAVE_DECL_RTM_NEWNEIGH) && HAVE_DECL_RTM_NEWNEIGH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWNEIGH) == (28), "RTM_NEWNEIGH != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWNEIGH 28
#endif
#if defined(RTM_DELNEIGH) || (defined(HAVE_DECL_RTM_DELNEIGH) && HAVE_DECL_RTM_DELNEIGH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELNEIGH) == (29), "RTM_DELNEIGH != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELNEIGH 29
#endif
#if defined(RTM_GETNEIGH) || (defined(HAVE_DECL_RTM_GETNEIGH) && HAVE_DECL_RTM_GETNEIGH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETNEIGH) == (30), "RTM_GETNEIGH != 30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETNEIGH 30
#endif
#if defined(RTM_NEWRULE) || (defined(HAVE_DECL_RTM_NEWRULE) && HAVE_DECL_RTM_NEWRULE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWRULE) == (32), "RTM_NEWRULE != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWRULE 32
#endif
#if defined(RTM_DELRULE) || (defined(HAVE_DECL_RTM_DELRULE) && HAVE_DECL_RTM_DELRULE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELRULE) == (33), "RTM_DELRULE != 33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELRULE 33
#endif
#if defined(RTM_GETRULE) || (defined(HAVE_DECL_RTM_GETRULE) && HAVE_DECL_RTM_GETRULE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETRULE) == (34), "RTM_GETRULE != 34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETRULE 34
#endif
#if defined(RTM_NEWQDISC) || (defined(HAVE_DECL_RTM_NEWQDISC) && HAVE_DECL_RTM_NEWQDISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWQDISC) == (36), "RTM_NEWQDISC != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWQDISC 36
#endif
#if defined(RTM_DELQDISC) || (defined(HAVE_DECL_RTM_DELQDISC) && HAVE_DECL_RTM_DELQDISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELQDISC) == (37), "RTM_DELQDISC != 37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELQDISC 37
#endif
#if defined(RTM_GETQDISC) || (defined(HAVE_DECL_RTM_GETQDISC) && HAVE_DECL_RTM_GETQDISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETQDISC) == (38), "RTM_GETQDISC != 38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETQDISC 38
#endif
#if defined(RTM_NEWTCLASS) || (defined(HAVE_DECL_RTM_NEWTCLASS) && HAVE_DECL_RTM_NEWTCLASS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWTCLASS) == (40), "RTM_NEWTCLASS != 40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWTCLASS 40
#endif
#if defined(RTM_DELTCLASS) || (defined(HAVE_DECL_RTM_DELTCLASS) && HAVE_DECL_RTM_DELTCLASS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELTCLASS) == (41), "RTM_DELTCLASS != 41");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELTCLASS 41
#endif
#if defined(RTM_GETTCLASS) || (defined(HAVE_DECL_RTM_GETTCLASS) && HAVE_DECL_RTM_GETTCLASS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETTCLASS) == (42), "RTM_GETTCLASS != 42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETTCLASS 42
#endif
#if defined(RTM_NEWTFILTER) || (defined(HAVE_DECL_RTM_NEWTFILTER) && HAVE_DECL_RTM_NEWTFILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWTFILTER) == (44), "RTM_NEWTFILTER != 44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWTFILTER 44
#endif
#if defined(RTM_DELTFILTER) || (defined(HAVE_DECL_RTM_DELTFILTER) && HAVE_DECL_RTM_DELTFILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELTFILTER) == (45), "RTM_DELTFILTER != 45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELTFILTER 45
#endif
#if defined(RTM_GETTFILTER) || (defined(HAVE_DECL_RTM_GETTFILTER) && HAVE_DECL_RTM_GETTFILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETTFILTER) == (46), "RTM_GETTFILTER != 46");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETTFILTER 46
#endif
#if defined(RTM_NEWACTION) || (defined(HAVE_DECL_RTM_NEWACTION) && HAVE_DECL_RTM_NEWACTION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWACTION) == (48), "RTM_NEWACTION != 48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWACTION 48
#endif
#if defined(RTM_DELACTION) || (defined(HAVE_DECL_RTM_DELACTION) && HAVE_DECL_RTM_DELACTION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELACTION) == (49), "RTM_DELACTION != 49");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELACTION 49
#endif
#if defined(RTM_GETACTION) || (defined(HAVE_DECL_RTM_GETACTION) && HAVE_DECL_RTM_GETACTION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETACTION) == (50), "RTM_GETACTION != 50");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETACTION 50
#endif
#if defined(RTM_NEWPREFIX) || (defined(HAVE_DECL_RTM_NEWPREFIX) && HAVE_DECL_RTM_NEWPREFIX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWPREFIX) == (52), "RTM_NEWPREFIX != 52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWPREFIX 52
#endif
#if defined(RTM_GETPREFIX) || (defined(HAVE_DECL_RTM_GETPREFIX) && HAVE_DECL_RTM_GETPREFIX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETPREFIX) == (54), "RTM_GETPREFIX != 54");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETPREFIX 54
#endif
#if defined(RTM_GETMULTICAST) || (defined(HAVE_DECL_RTM_GETMULTICAST) && HAVE_DECL_RTM_GETMULTICAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETMULTICAST) == (58), "RTM_GETMULTICAST != 58");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETMULTICAST 58
#endif
#if defined(RTM_GETANYCAST) || (defined(HAVE_DECL_RTM_GETANYCAST) && HAVE_DECL_RTM_GETANYCAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETANYCAST) == (62), "RTM_GETANYCAST != 62");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETANYCAST 62
#endif
#if defined(RTM_NEWNEIGHTBL) || (defined(HAVE_DECL_RTM_NEWNEIGHTBL) && HAVE_DECL_RTM_NEWNEIGHTBL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWNEIGHTBL) == (64), "RTM_NEWNEIGHTBL != 64");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWNEIGHTBL 64
#endif
#if defined(RTM_GETNEIGHTBL) || (defined(HAVE_DECL_RTM_GETNEIGHTBL) && HAVE_DECL_RTM_GETNEIGHTBL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETNEIGHTBL) == (66), "RTM_GETNEIGHTBL != 66");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETNEIGHTBL 66
#endif
#if defined(RTM_SETNEIGHTBL) || (defined(HAVE_DECL_RTM_SETNEIGHTBL) && HAVE_DECL_RTM_SETNEIGHTBL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_SETNEIGHTBL) == (67), "RTM_SETNEIGHTBL != 67");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_SETNEIGHTBL 67
#endif
#if defined(RTM_NEWNDUSEROPT) || (defined(HAVE_DECL_RTM_NEWNDUSEROPT) && HAVE_DECL_RTM_NEWNDUSEROPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWNDUSEROPT) == (68), "RTM_NEWNDUSEROPT != 68");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWNDUSEROPT 68
#endif
#if defined(RTM_NEWADDRLABEL) || (defined(HAVE_DECL_RTM_NEWADDRLABEL) && HAVE_DECL_RTM_NEWADDRLABEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWADDRLABEL) == (72), "RTM_NEWADDRLABEL != 72");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWADDRLABEL 72
#endif
#if defined(RTM_DELADDRLABEL) || (defined(HAVE_DECL_RTM_DELADDRLABEL) && HAVE_DECL_RTM_DELADDRLABEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELADDRLABEL) == (73), "RTM_DELADDRLABEL != 73");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELADDRLABEL 73
#endif
#if defined(RTM_GETADDRLABEL) || (defined(HAVE_DECL_RTM_GETADDRLABEL) && HAVE_DECL_RTM_GETADDRLABEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETADDRLABEL) == (74), "RTM_GETADDRLABEL != 74");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETADDRLABEL 74
#endif
#if defined(RTM_GETDCB) || (defined(HAVE_DECL_RTM_GETDCB) && HAVE_DECL_RTM_GETDCB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETDCB) == (78), "RTM_GETDCB != 78");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETDCB 78
#endif
#if defined(RTM_SETDCB) || (defined(HAVE_DECL_RTM_SETDCB) && HAVE_DECL_RTM_SETDCB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_SETDCB) == (79), "RTM_SETDCB != 79");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_SETDCB 79
#endif
#if defined(RTM_NEWNETCONF) || (defined(HAVE_DECL_RTM_NEWNETCONF) && HAVE_DECL_RTM_NEWNETCONF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWNETCONF) == (80), "RTM_NEWNETCONF != 80");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWNETCONF 80
#endif
#if defined(RTM_DELNETCONF) || (defined(HAVE_DECL_RTM_DELNETCONF) && HAVE_DECL_RTM_DELNETCONF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELNETCONF) == (81), "RTM_DELNETCONF != 81");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELNETCONF 81
#endif
#if defined(RTM_GETNETCONF) || (defined(HAVE_DECL_RTM_GETNETCONF) && HAVE_DECL_RTM_GETNETCONF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETNETCONF) == (82), "RTM_GETNETCONF != 82");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETNETCONF 82
#endif
#if defined(RTM_NEWMDB) || (defined(HAVE_DECL_RTM_NEWMDB) && HAVE_DECL_RTM_NEWMDB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWMDB) == (84), "RTM_NEWMDB != 84");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWMDB 84
#endif
#if defined(RTM_DELMDB) || (defined(HAVE_DECL_RTM_DELMDB) && HAVE_DECL_RTM_DELMDB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELMDB) == (85), "RTM_DELMDB != 85");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELMDB 85
#endif
#if defined(RTM_GETMDB) || (defined(HAVE_DECL_RTM_GETMDB) && HAVE_DECL_RTM_GETMDB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETMDB) == (86), "RTM_GETMDB != 86");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETMDB 86
#endif
#if defined(RTM_NEWNSID) || (defined(HAVE_DECL_RTM_NEWNSID) && HAVE_DECL_RTM_NEWNSID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWNSID) == (88), "RTM_NEWNSID != 88");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWNSID 88
#endif
#if defined(RTM_DELNSID) || (defined(HAVE_DECL_RTM_DELNSID) && HAVE_DECL_RTM_DELNSID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELNSID) == (89), "RTM_DELNSID != 89");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELNSID 89
#endif
#if defined(RTM_GETNSID) || (defined(HAVE_DECL_RTM_GETNSID) && HAVE_DECL_RTM_GETNSID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETNSID) == (90), "RTM_GETNSID != 90");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETNSID 90
#endif
#if defined(RTM_NEWSTATS) || (defined(HAVE_DECL_RTM_NEWSTATS) && HAVE_DECL_RTM_NEWSTATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWSTATS) == (92), "RTM_NEWSTATS != 92");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWSTATS 92
#endif
#if defined(RTM_GETSTATS) || (defined(HAVE_DECL_RTM_GETSTATS) && HAVE_DECL_RTM_GETSTATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETSTATS) == (94), "RTM_GETSTATS != 94");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETSTATS 94
#endif
#if defined(RTM_NEWCHAIN) || (defined(HAVE_DECL_RTM_NEWCHAIN) && HAVE_DECL_RTM_NEWCHAIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_NEWCHAIN) == (100), "RTM_NEWCHAIN != 100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_NEWCHAIN 100
#endif
#if defined(RTM_DELCHAIN) || (defined(HAVE_DECL_RTM_DELCHAIN) && HAVE_DECL_RTM_DELCHAIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_DELCHAIN) == (101), "RTM_DELCHAIN != 101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_DELCHAIN 101
#endif
#if defined(RTM_GETCHAIN) || (defined(HAVE_DECL_RTM_GETCHAIN) && HAVE_DECL_RTM_GETCHAIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_GETCHAIN) == (102), "RTM_GETCHAIN != 102");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_GETCHAIN 102
#endif

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

static const struct xlat_data nl_route_types_xdata[] = {
 XLAT(RTM_NEWLINK),
 #define XLAT_VAL_0 ((unsigned) (RTM_NEWLINK))
 #define XLAT_STR_0 STRINGIFY(RTM_NEWLINK)
 XLAT(RTM_DELLINK),
 #define XLAT_VAL_1 ((unsigned) (RTM_DELLINK))
 #define XLAT_STR_1 STRINGIFY(RTM_DELLINK)
 XLAT(RTM_GETLINK),
 #define XLAT_VAL_2 ((unsigned) (RTM_GETLINK))
 #define XLAT_STR_2 STRINGIFY(RTM_GETLINK)
 XLAT(RTM_SETLINK),
 #define XLAT_VAL_3 ((unsigned) (RTM_SETLINK))
 #define XLAT_STR_3 STRINGIFY(RTM_SETLINK)

 XLAT(RTM_NEWADDR),
 #define XLAT_VAL_4 ((unsigned) (RTM_NEWADDR))
 #define XLAT_STR_4 STRINGIFY(RTM_NEWADDR)
 XLAT(RTM_DELADDR),
 #define XLAT_VAL_5 ((unsigned) (RTM_DELADDR))
 #define XLAT_STR_5 STRINGIFY(RTM_DELADDR)
 XLAT(RTM_GETADDR),
 #define XLAT_VAL_6 ((unsigned) (RTM_GETADDR))
 #define XLAT_STR_6 STRINGIFY(RTM_GETADDR)

 XLAT(RTM_NEWROUTE),
 #define XLAT_VAL_7 ((unsigned) (RTM_NEWROUTE))
 #define XLAT_STR_7 STRINGIFY(RTM_NEWROUTE)
 XLAT(RTM_DELROUTE),
 #define XLAT_VAL_8 ((unsigned) (RTM_DELROUTE))
 #define XLAT_STR_8 STRINGIFY(RTM_DELROUTE)
 XLAT(RTM_GETROUTE),
 #define XLAT_VAL_9 ((unsigned) (RTM_GETROUTE))
 #define XLAT_STR_9 STRINGIFY(RTM_GETROUTE)

 XLAT(RTM_NEWNEIGH),
 #define XLAT_VAL_10 ((unsigned) (RTM_NEWNEIGH))
 #define XLAT_STR_10 STRINGIFY(RTM_NEWNEIGH)
 XLAT(RTM_DELNEIGH),
 #define XLAT_VAL_11 ((unsigned) (RTM_DELNEIGH))
 #define XLAT_STR_11 STRINGIFY(RTM_DELNEIGH)
 XLAT(RTM_GETNEIGH),
 #define XLAT_VAL_12 ((unsigned) (RTM_GETNEIGH))
 #define XLAT_STR_12 STRINGIFY(RTM_GETNEIGH)

 XLAT(RTM_NEWRULE),
 #define XLAT_VAL_13 ((unsigned) (RTM_NEWRULE))
 #define XLAT_STR_13 STRINGIFY(RTM_NEWRULE)
 XLAT(RTM_DELRULE),
 #define XLAT_VAL_14 ((unsigned) (RTM_DELRULE))
 #define XLAT_STR_14 STRINGIFY(RTM_DELRULE)
 XLAT(RTM_GETRULE),
 #define XLAT_VAL_15 ((unsigned) (RTM_GETRULE))
 #define XLAT_STR_15 STRINGIFY(RTM_GETRULE)

 XLAT(RTM_NEWQDISC),
 #define XLAT_VAL_16 ((unsigned) (RTM_NEWQDISC))
 #define XLAT_STR_16 STRINGIFY(RTM_NEWQDISC)
 XLAT(RTM_DELQDISC),
 #define XLAT_VAL_17 ((unsigned) (RTM_DELQDISC))
 #define XLAT_STR_17 STRINGIFY(RTM_DELQDISC)
 XLAT(RTM_GETQDISC),
 #define XLAT_VAL_18 ((unsigned) (RTM_GETQDISC))
 #define XLAT_STR_18 STRINGIFY(RTM_GETQDISC)

 XLAT(RTM_NEWTCLASS),
 #define XLAT_VAL_19 ((unsigned) (RTM_NEWTCLASS))
 #define XLAT_STR_19 STRINGIFY(RTM_NEWTCLASS)
 XLAT(RTM_DELTCLASS),
 #define XLAT_VAL_20 ((unsigned) (RTM_DELTCLASS))
 #define XLAT_STR_20 STRINGIFY(RTM_DELTCLASS)
 XLAT(RTM_GETTCLASS),
 #define XLAT_VAL_21 ((unsigned) (RTM_GETTCLASS))
 #define XLAT_STR_21 STRINGIFY(RTM_GETTCLASS)

 XLAT(RTM_NEWTFILTER),
 #define XLAT_VAL_22 ((unsigned) (RTM_NEWTFILTER))
 #define XLAT_STR_22 STRINGIFY(RTM_NEWTFILTER)
 XLAT(RTM_DELTFILTER),
 #define XLAT_VAL_23 ((unsigned) (RTM_DELTFILTER))
 #define XLAT_STR_23 STRINGIFY(RTM_DELTFILTER)
 XLAT(RTM_GETTFILTER),
 #define XLAT_VAL_24 ((unsigned) (RTM_GETTFILTER))
 #define XLAT_STR_24 STRINGIFY(RTM_GETTFILTER)

 XLAT(RTM_NEWACTION),
 #define XLAT_VAL_25 ((unsigned) (RTM_NEWACTION))
 #define XLAT_STR_25 STRINGIFY(RTM_NEWACTION)
 XLAT(RTM_DELACTION),
 #define XLAT_VAL_26 ((unsigned) (RTM_DELACTION))
 #define XLAT_STR_26 STRINGIFY(RTM_DELACTION)
 XLAT(RTM_GETACTION),
 #define XLAT_VAL_27 ((unsigned) (RTM_GETACTION))
 #define XLAT_STR_27 STRINGIFY(RTM_GETACTION)

 XLAT(RTM_NEWPREFIX),
 #define XLAT_VAL_28 ((unsigned) (RTM_NEWPREFIX))
 #define XLAT_STR_28 STRINGIFY(RTM_NEWPREFIX)
 XLAT(RTM_GETPREFIX),
 #define XLAT_VAL_29 ((unsigned) (RTM_GETPREFIX))
 #define XLAT_STR_29 STRINGIFY(RTM_GETPREFIX)

 XLAT(RTM_GETMULTICAST),
 #define XLAT_VAL_30 ((unsigned) (RTM_GETMULTICAST))
 #define XLAT_STR_30 STRINGIFY(RTM_GETMULTICAST)

 XLAT(RTM_GETANYCAST),
 #define XLAT_VAL_31 ((unsigned) (RTM_GETANYCAST))
 #define XLAT_STR_31 STRINGIFY(RTM_GETANYCAST)

 XLAT(RTM_NEWNEIGHTBL),
 #define XLAT_VAL_32 ((unsigned) (RTM_NEWNEIGHTBL))
 #define XLAT_STR_32 STRINGIFY(RTM_NEWNEIGHTBL)
 XLAT(RTM_GETNEIGHTBL),
 #define XLAT_VAL_33 ((unsigned) (RTM_GETNEIGHTBL))
 #define XLAT_STR_33 STRINGIFY(RTM_GETNEIGHTBL)
 XLAT(RTM_SETNEIGHTBL),
 #define XLAT_VAL_34 ((unsigned) (RTM_SETNEIGHTBL))
 #define XLAT_STR_34 STRINGIFY(RTM_SETNEIGHTBL)

 XLAT(RTM_NEWNDUSEROPT),
 #define XLAT_VAL_35 ((unsigned) (RTM_NEWNDUSEROPT))
 #define XLAT_STR_35 STRINGIFY(RTM_NEWNDUSEROPT)

 XLAT(RTM_NEWADDRLABEL),
 #define XLAT_VAL_36 ((unsigned) (RTM_NEWADDRLABEL))
 #define XLAT_STR_36 STRINGIFY(RTM_NEWADDRLABEL)
 XLAT(RTM_DELADDRLABEL),
 #define XLAT_VAL_37 ((unsigned) (RTM_DELADDRLABEL))
 #define XLAT_STR_37 STRINGIFY(RTM_DELADDRLABEL)
 XLAT(RTM_GETADDRLABEL),
 #define XLAT_VAL_38 ((unsigned) (RTM_GETADDRLABEL))
 #define XLAT_STR_38 STRINGIFY(RTM_GETADDRLABEL)

 XLAT(RTM_GETDCB),
 #define XLAT_VAL_39 ((unsigned) (RTM_GETDCB))
 #define XLAT_STR_39 STRINGIFY(RTM_GETDCB)
 XLAT(RTM_SETDCB),
 #define XLAT_VAL_40 ((unsigned) (RTM_SETDCB))
 #define XLAT_STR_40 STRINGIFY(RTM_SETDCB)

 XLAT(RTM_NEWNETCONF),
 #define XLAT_VAL_41 ((unsigned) (RTM_NEWNETCONF))
 #define XLAT_STR_41 STRINGIFY(RTM_NEWNETCONF)
 XLAT(RTM_DELNETCONF),
 #define XLAT_VAL_42 ((unsigned) (RTM_DELNETCONF))
 #define XLAT_STR_42 STRINGIFY(RTM_DELNETCONF)
 XLAT(RTM_GETNETCONF),
 #define XLAT_VAL_43 ((unsigned) (RTM_GETNETCONF))
 #define XLAT_STR_43 STRINGIFY(RTM_GETNETCONF)

 XLAT(RTM_NEWMDB),
 #define XLAT_VAL_44 ((unsigned) (RTM_NEWMDB))
 #define XLAT_STR_44 STRINGIFY(RTM_NEWMDB)
 XLAT(RTM_DELMDB),
 #define XLAT_VAL_45 ((unsigned) (RTM_DELMDB))
 #define XLAT_STR_45 STRINGIFY(RTM_DELMDB)
 XLAT(RTM_GETMDB),
 #define XLAT_VAL_46 ((unsigned) (RTM_GETMDB))
 #define XLAT_STR_46 STRINGIFY(RTM_GETMDB)

 XLAT(RTM_NEWNSID),
 #define XLAT_VAL_47 ((unsigned) (RTM_NEWNSID))
 #define XLAT_STR_47 STRINGIFY(RTM_NEWNSID)
 XLAT(RTM_DELNSID),
 #define XLAT_VAL_48 ((unsigned) (RTM_DELNSID))
 #define XLAT_STR_48 STRINGIFY(RTM_DELNSID)
 XLAT(RTM_GETNSID),
 #define XLAT_VAL_49 ((unsigned) (RTM_GETNSID))
 #define XLAT_STR_49 STRINGIFY(RTM_GETNSID)

 XLAT(RTM_NEWSTATS),
 #define XLAT_VAL_50 ((unsigned) (RTM_NEWSTATS))
 #define XLAT_STR_50 STRINGIFY(RTM_NEWSTATS)
 XLAT(RTM_GETSTATS),
 #define XLAT_VAL_51 ((unsigned) (RTM_GETSTATS))
 #define XLAT_STR_51 STRINGIFY(RTM_GETSTATS)

 XLAT(RTM_NEWCHAIN),
 #define XLAT_VAL_52 ((unsigned) (RTM_NEWCHAIN))
 #define XLAT_STR_52 STRINGIFY(RTM_NEWCHAIN)
 XLAT(RTM_DELCHAIN),
 #define XLAT_VAL_53 ((unsigned) (RTM_DELCHAIN))
 #define XLAT_STR_53 STRINGIFY(RTM_DELCHAIN)
 XLAT(RTM_GETCHAIN),
 #define XLAT_VAL_54 ((unsigned) (RTM_GETCHAIN))
 #define XLAT_STR_54 STRINGIFY(RTM_GETCHAIN)
};
const struct xlat nl_route_types[1] = { {
 .data = nl_route_types_xdata,
 .size = ARRAY_SIZE(nl_route_types_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
