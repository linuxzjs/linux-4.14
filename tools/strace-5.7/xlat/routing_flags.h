/* Generated by ./xlat/gen.sh from ./xlat/routing_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(RTM_F_NOTIFY) || (defined(HAVE_DECL_RTM_F_NOTIFY) && HAVE_DECL_RTM_F_NOTIFY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_F_NOTIFY) == (0x100), "RTM_F_NOTIFY != 0x100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_F_NOTIFY 0x100
#endif
#if defined(RTM_F_CLONED) || (defined(HAVE_DECL_RTM_F_CLONED) && HAVE_DECL_RTM_F_CLONED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_F_CLONED) == (0x200), "RTM_F_CLONED != 0x200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_F_CLONED 0x200
#endif
#if defined(RTM_F_EQUALIZE) || (defined(HAVE_DECL_RTM_F_EQUALIZE) && HAVE_DECL_RTM_F_EQUALIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_F_EQUALIZE) == (0x400), "RTM_F_EQUALIZE != 0x400");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_F_EQUALIZE 0x400
#endif
#if defined(RTM_F_PREFIX) || (defined(HAVE_DECL_RTM_F_PREFIX) && HAVE_DECL_RTM_F_PREFIX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_F_PREFIX) == (0x800), "RTM_F_PREFIX != 0x800");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_F_PREFIX 0x800
#endif
#if defined(RTM_F_LOOKUP_TABLE) || (defined(HAVE_DECL_RTM_F_LOOKUP_TABLE) && HAVE_DECL_RTM_F_LOOKUP_TABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_F_LOOKUP_TABLE) == (0x1000), "RTM_F_LOOKUP_TABLE != 0x1000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_F_LOOKUP_TABLE 0x1000
#endif
#if defined(RTM_F_FIB_MATCH) || (defined(HAVE_DECL_RTM_F_FIB_MATCH) && HAVE_DECL_RTM_F_FIB_MATCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_F_FIB_MATCH) == (0x2000), "RTM_F_FIB_MATCH != 0x2000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_F_FIB_MATCH 0x2000
#endif
#if defined(RTM_F_OFFLOAD) || (defined(HAVE_DECL_RTM_F_OFFLOAD) && HAVE_DECL_RTM_F_OFFLOAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_F_OFFLOAD) == (0x4000), "RTM_F_OFFLOAD != 0x4000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_F_OFFLOAD 0x4000
#endif
#if defined(RTM_F_TRAP) || (defined(HAVE_DECL_RTM_F_TRAP) && HAVE_DECL_RTM_F_TRAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTM_F_TRAP) == (0x8000), "RTM_F_TRAP != 0x8000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTM_F_TRAP 0x8000
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat routing_flags in mpers mode

# else

static const struct xlat_data routing_flags_xdata[] = {
 XLAT(RTM_F_NOTIFY),
 #define XLAT_VAL_0 ((unsigned) (RTM_F_NOTIFY))
 #define XLAT_STR_0 STRINGIFY(RTM_F_NOTIFY)
 XLAT(RTM_F_CLONED),
 #define XLAT_VAL_1 ((unsigned) (RTM_F_CLONED))
 #define XLAT_STR_1 STRINGIFY(RTM_F_CLONED)
 XLAT(RTM_F_EQUALIZE),
 #define XLAT_VAL_2 ((unsigned) (RTM_F_EQUALIZE))
 #define XLAT_STR_2 STRINGIFY(RTM_F_EQUALIZE)
 XLAT(RTM_F_PREFIX),
 #define XLAT_VAL_3 ((unsigned) (RTM_F_PREFIX))
 #define XLAT_STR_3 STRINGIFY(RTM_F_PREFIX)
 XLAT(RTM_F_LOOKUP_TABLE),
 #define XLAT_VAL_4 ((unsigned) (RTM_F_LOOKUP_TABLE))
 #define XLAT_STR_4 STRINGIFY(RTM_F_LOOKUP_TABLE)
 XLAT(RTM_F_FIB_MATCH),
 #define XLAT_VAL_5 ((unsigned) (RTM_F_FIB_MATCH))
 #define XLAT_STR_5 STRINGIFY(RTM_F_FIB_MATCH)
 XLAT(RTM_F_OFFLOAD),
 #define XLAT_VAL_6 ((unsigned) (RTM_F_OFFLOAD))
 #define XLAT_STR_6 STRINGIFY(RTM_F_OFFLOAD)
 XLAT(RTM_F_TRAP),
 #define XLAT_VAL_7 ((unsigned) (RTM_F_TRAP))
 #define XLAT_STR_7 STRINGIFY(RTM_F_TRAP)
};
static
const struct xlat routing_flags[1] = { {
 .data = routing_flags_xdata,
 .size = ARRAY_SIZE(routing_flags_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
