/* Generated by ./xlat/gen.sh from ./xlat/evdev_mtslots.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ABS_MT_SLOT) || (defined(HAVE_DECL_ABS_MT_SLOT) && HAVE_DECL_ABS_MT_SLOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_SLOT) == (0x2f), "ABS_MT_SLOT != 0x2f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_SLOT 0x2f
#endif
#if defined(ABS_MT_TOUCH_MAJOR) || (defined(HAVE_DECL_ABS_MT_TOUCH_MAJOR) && HAVE_DECL_ABS_MT_TOUCH_MAJOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_TOUCH_MAJOR) == (0x30), "ABS_MT_TOUCH_MAJOR != 0x30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_TOUCH_MAJOR 0x30
#endif
#if defined(ABS_MT_TOUCH_MINOR) || (defined(HAVE_DECL_ABS_MT_TOUCH_MINOR) && HAVE_DECL_ABS_MT_TOUCH_MINOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_TOUCH_MINOR) == (0x31), "ABS_MT_TOUCH_MINOR != 0x31");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_TOUCH_MINOR 0x31
#endif
#if defined(ABS_MT_WIDTH_MAJOR) || (defined(HAVE_DECL_ABS_MT_WIDTH_MAJOR) && HAVE_DECL_ABS_MT_WIDTH_MAJOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_WIDTH_MAJOR) == (0x32), "ABS_MT_WIDTH_MAJOR != 0x32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_WIDTH_MAJOR 0x32
#endif
#if defined(ABS_MT_WIDTH_MINOR) || (defined(HAVE_DECL_ABS_MT_WIDTH_MINOR) && HAVE_DECL_ABS_MT_WIDTH_MINOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_WIDTH_MINOR) == (0x33), "ABS_MT_WIDTH_MINOR != 0x33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_WIDTH_MINOR 0x33
#endif
#if defined(ABS_MT_ORIENTATION) || (defined(HAVE_DECL_ABS_MT_ORIENTATION) && HAVE_DECL_ABS_MT_ORIENTATION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_ORIENTATION) == (0x34), "ABS_MT_ORIENTATION != 0x34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_ORIENTATION 0x34
#endif
#if defined(ABS_MT_POSITION_X) || (defined(HAVE_DECL_ABS_MT_POSITION_X) && HAVE_DECL_ABS_MT_POSITION_X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_POSITION_X) == (0x35), "ABS_MT_POSITION_X != 0x35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_POSITION_X 0x35
#endif
#if defined(ABS_MT_POSITION_Y) || (defined(HAVE_DECL_ABS_MT_POSITION_Y) && HAVE_DECL_ABS_MT_POSITION_Y)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_POSITION_Y) == (0x36), "ABS_MT_POSITION_Y != 0x36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_POSITION_Y 0x36
#endif
#if defined(ABS_MT_TOOL_TYPE) || (defined(HAVE_DECL_ABS_MT_TOOL_TYPE) && HAVE_DECL_ABS_MT_TOOL_TYPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_TOOL_TYPE) == (0x37), "ABS_MT_TOOL_TYPE != 0x37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_TOOL_TYPE 0x37
#endif
#if defined(ABS_MT_BLOB_ID) || (defined(HAVE_DECL_ABS_MT_BLOB_ID) && HAVE_DECL_ABS_MT_BLOB_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_BLOB_ID) == (0x38), "ABS_MT_BLOB_ID != 0x38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_BLOB_ID 0x38
#endif
#if defined(ABS_MT_TRACKING_ID) || (defined(HAVE_DECL_ABS_MT_TRACKING_ID) && HAVE_DECL_ABS_MT_TRACKING_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_TRACKING_ID) == (0x39), "ABS_MT_TRACKING_ID != 0x39");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_TRACKING_ID 0x39
#endif
#if defined(ABS_MT_PRESSURE) || (defined(HAVE_DECL_ABS_MT_PRESSURE) && HAVE_DECL_ABS_MT_PRESSURE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_PRESSURE) == (0x3a), "ABS_MT_PRESSURE != 0x3a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_PRESSURE 0x3a
#endif
#if defined(ABS_MT_DISTANCE) || (defined(HAVE_DECL_ABS_MT_DISTANCE) && HAVE_DECL_ABS_MT_DISTANCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_DISTANCE) == (0x3b), "ABS_MT_DISTANCE != 0x3b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_DISTANCE 0x3b
#endif
#if defined(ABS_MT_TOOL_X) || (defined(HAVE_DECL_ABS_MT_TOOL_X) && HAVE_DECL_ABS_MT_TOOL_X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_TOOL_X) == (0x3c), "ABS_MT_TOOL_X != 0x3c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_TOOL_X 0x3c
#endif
#if defined(ABS_MT_TOOL_Y) || (defined(HAVE_DECL_ABS_MT_TOOL_Y) && HAVE_DECL_ABS_MT_TOOL_Y)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ABS_MT_TOOL_Y) == (0x3d), "ABS_MT_TOOL_Y != 0x3d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ABS_MT_TOOL_Y 0x3d
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat evdev_mtslots in mpers mode

# else

static const struct xlat_data evdev_mtslots_xdata[] = {
 XLAT(ABS_MT_SLOT),
 #define XLAT_VAL_0 ((unsigned) (ABS_MT_SLOT))
 #define XLAT_STR_0 STRINGIFY(ABS_MT_SLOT)
 XLAT(ABS_MT_TOUCH_MAJOR),
 #define XLAT_VAL_1 ((unsigned) (ABS_MT_TOUCH_MAJOR))
 #define XLAT_STR_1 STRINGIFY(ABS_MT_TOUCH_MAJOR)
 XLAT(ABS_MT_TOUCH_MINOR),
 #define XLAT_VAL_2 ((unsigned) (ABS_MT_TOUCH_MINOR))
 #define XLAT_STR_2 STRINGIFY(ABS_MT_TOUCH_MINOR)
 XLAT(ABS_MT_WIDTH_MAJOR),
 #define XLAT_VAL_3 ((unsigned) (ABS_MT_WIDTH_MAJOR))
 #define XLAT_STR_3 STRINGIFY(ABS_MT_WIDTH_MAJOR)
 XLAT(ABS_MT_WIDTH_MINOR),
 #define XLAT_VAL_4 ((unsigned) (ABS_MT_WIDTH_MINOR))
 #define XLAT_STR_4 STRINGIFY(ABS_MT_WIDTH_MINOR)
 XLAT(ABS_MT_ORIENTATION),
 #define XLAT_VAL_5 ((unsigned) (ABS_MT_ORIENTATION))
 #define XLAT_STR_5 STRINGIFY(ABS_MT_ORIENTATION)
 XLAT(ABS_MT_POSITION_X),
 #define XLAT_VAL_6 ((unsigned) (ABS_MT_POSITION_X))
 #define XLAT_STR_6 STRINGIFY(ABS_MT_POSITION_X)
 XLAT(ABS_MT_POSITION_Y),
 #define XLAT_VAL_7 ((unsigned) (ABS_MT_POSITION_Y))
 #define XLAT_STR_7 STRINGIFY(ABS_MT_POSITION_Y)
 XLAT(ABS_MT_TOOL_TYPE),
 #define XLAT_VAL_8 ((unsigned) (ABS_MT_TOOL_TYPE))
 #define XLAT_STR_8 STRINGIFY(ABS_MT_TOOL_TYPE)
 XLAT(ABS_MT_BLOB_ID),
 #define XLAT_VAL_9 ((unsigned) (ABS_MT_BLOB_ID))
 #define XLAT_STR_9 STRINGIFY(ABS_MT_BLOB_ID)
 XLAT(ABS_MT_TRACKING_ID),
 #define XLAT_VAL_10 ((unsigned) (ABS_MT_TRACKING_ID))
 #define XLAT_STR_10 STRINGIFY(ABS_MT_TRACKING_ID)
 XLAT(ABS_MT_PRESSURE),
 #define XLAT_VAL_11 ((unsigned) (ABS_MT_PRESSURE))
 #define XLAT_STR_11 STRINGIFY(ABS_MT_PRESSURE)
 XLAT(ABS_MT_DISTANCE),
 #define XLAT_VAL_12 ((unsigned) (ABS_MT_DISTANCE))
 #define XLAT_STR_12 STRINGIFY(ABS_MT_DISTANCE)
 XLAT(ABS_MT_TOOL_X),
 #define XLAT_VAL_13 ((unsigned) (ABS_MT_TOOL_X))
 #define XLAT_STR_13 STRINGIFY(ABS_MT_TOOL_X)
 XLAT(ABS_MT_TOOL_Y),
 #define XLAT_VAL_14 ((unsigned) (ABS_MT_TOOL_Y))
 #define XLAT_STR_14 STRINGIFY(ABS_MT_TOOL_Y)
};
static
const struct xlat evdev_mtslots[1] = { {
 .data = evdev_mtslots_xdata,
 .size = ARRAY_SIZE(evdev_mtslots_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
