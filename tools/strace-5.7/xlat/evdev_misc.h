/* Generated by ./xlat/gen.sh from ./xlat/evdev_misc.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(MSC_SERIAL) || (defined(HAVE_DECL_MSC_SERIAL) && HAVE_DECL_MSC_SERIAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSC_SERIAL) == (0x00), "MSC_SERIAL != 0x00");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSC_SERIAL 0x00
#endif
#if defined(MSC_PULSELED) || (defined(HAVE_DECL_MSC_PULSELED) && HAVE_DECL_MSC_PULSELED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSC_PULSELED) == (0x01), "MSC_PULSELED != 0x01");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSC_PULSELED 0x01
#endif
#if defined(MSC_GESTURE) || (defined(HAVE_DECL_MSC_GESTURE) && HAVE_DECL_MSC_GESTURE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSC_GESTURE) == (0x02), "MSC_GESTURE != 0x02");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSC_GESTURE 0x02
#endif
#if defined(MSC_RAW) || (defined(HAVE_DECL_MSC_RAW) && HAVE_DECL_MSC_RAW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSC_RAW) == (0x03), "MSC_RAW != 0x03");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSC_RAW 0x03
#endif
#if defined(MSC_SCAN) || (defined(HAVE_DECL_MSC_SCAN) && HAVE_DECL_MSC_SCAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSC_SCAN) == (0x04), "MSC_SCAN != 0x04");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSC_SCAN 0x04
#endif
#if defined(MSC_TIMESTAMP) || (defined(HAVE_DECL_MSC_TIMESTAMP) && HAVE_DECL_MSC_TIMESTAMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSC_TIMESTAMP) == (0x05), "MSC_TIMESTAMP != 0x05");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSC_TIMESTAMP 0x05
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat evdev_misc in mpers mode

# else

static const struct xlat_data evdev_misc_xdata[] = {
 [MSC_SERIAL] = XLAT(MSC_SERIAL),
 #define XLAT_VAL_0 ((unsigned) (MSC_SERIAL))
 #define XLAT_STR_0 STRINGIFY(MSC_SERIAL)
 [MSC_PULSELED] = XLAT(MSC_PULSELED),
 #define XLAT_VAL_1 ((unsigned) (MSC_PULSELED))
 #define XLAT_STR_1 STRINGIFY(MSC_PULSELED)
 [MSC_GESTURE] = XLAT(MSC_GESTURE),
 #define XLAT_VAL_2 ((unsigned) (MSC_GESTURE))
 #define XLAT_STR_2 STRINGIFY(MSC_GESTURE)
 [MSC_RAW] = XLAT(MSC_RAW),
 #define XLAT_VAL_3 ((unsigned) (MSC_RAW))
 #define XLAT_STR_3 STRINGIFY(MSC_RAW)
 [MSC_SCAN] = XLAT(MSC_SCAN),
 #define XLAT_VAL_4 ((unsigned) (MSC_SCAN))
 #define XLAT_STR_4 STRINGIFY(MSC_SCAN)
 [MSC_TIMESTAMP] = XLAT(MSC_TIMESTAMP),
 #define XLAT_VAL_5 ((unsigned) (MSC_TIMESTAMP))
 #define XLAT_STR_5 STRINGIFY(MSC_TIMESTAMP)
};
static
const struct xlat evdev_misc[1] = { {
 .data = evdev_misc_xdata,
 .size = ARRAY_SIZE(evdev_misc_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
