/* Generated by ./xlat/gen.sh from ./xlat/btrfs_balance_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BTRFS_BALANCE_DATA) || (defined(HAVE_DECL_BTRFS_BALANCE_DATA) && HAVE_DECL_BTRFS_BALANCE_DATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_BALANCE_DATA) == ((1ULL << 0)), "BTRFS_BALANCE_DATA != (1ULL << 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_BALANCE_DATA (1ULL << 0)
#endif
#if defined(BTRFS_BALANCE_SYSTEM) || (defined(HAVE_DECL_BTRFS_BALANCE_SYSTEM) && HAVE_DECL_BTRFS_BALANCE_SYSTEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_BALANCE_SYSTEM) == ((1ULL << 1)), "BTRFS_BALANCE_SYSTEM != (1ULL << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_BALANCE_SYSTEM (1ULL << 1)
#endif
#if defined(BTRFS_BALANCE_METADATA) || (defined(HAVE_DECL_BTRFS_BALANCE_METADATA) && HAVE_DECL_BTRFS_BALANCE_METADATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_BALANCE_METADATA) == ((1ULL << 2)), "BTRFS_BALANCE_METADATA != (1ULL << 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_BALANCE_METADATA (1ULL << 2)
#endif
#if defined(BTRFS_BALANCE_FORCE) || (defined(HAVE_DECL_BTRFS_BALANCE_FORCE) && HAVE_DECL_BTRFS_BALANCE_FORCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_BALANCE_FORCE) == ((1ULL << 3)), "BTRFS_BALANCE_FORCE != (1ULL << 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_BALANCE_FORCE (1ULL << 3)
#endif
#if defined(BTRFS_BALANCE_RESUME) || (defined(HAVE_DECL_BTRFS_BALANCE_RESUME) && HAVE_DECL_BTRFS_BALANCE_RESUME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_BALANCE_RESUME) == ((1ULL << 4)), "BTRFS_BALANCE_RESUME != (1ULL << 4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_BALANCE_RESUME (1ULL << 4)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat btrfs_balance_flags[];

# else

static const struct xlat_data btrfs_balance_flags_xdata[] = {
 XLAT_TYPE(uint64_t, BTRFS_BALANCE_DATA),
 #define XLAT_VAL_0 ((uint64_t) (BTRFS_BALANCE_DATA))
 #define XLAT_STR_0 STRINGIFY(BTRFS_BALANCE_DATA)
 XLAT_TYPE(uint64_t, BTRFS_BALANCE_SYSTEM),
 #define XLAT_VAL_1 ((uint64_t) (BTRFS_BALANCE_SYSTEM))
 #define XLAT_STR_1 STRINGIFY(BTRFS_BALANCE_SYSTEM)
 XLAT_TYPE(uint64_t, BTRFS_BALANCE_METADATA),
 #define XLAT_VAL_2 ((uint64_t) (BTRFS_BALANCE_METADATA))
 #define XLAT_STR_2 STRINGIFY(BTRFS_BALANCE_METADATA)
 XLAT_TYPE(uint64_t, BTRFS_BALANCE_FORCE),
 #define XLAT_VAL_3 ((uint64_t) (BTRFS_BALANCE_FORCE))
 #define XLAT_STR_3 STRINGIFY(BTRFS_BALANCE_FORCE)
 XLAT_TYPE(uint64_t, BTRFS_BALANCE_RESUME),
 #define XLAT_VAL_4 ((uint64_t) (BTRFS_BALANCE_RESUME))
 #define XLAT_STR_4 STRINGIFY(BTRFS_BALANCE_RESUME)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat btrfs_balance_flags[1] = { {
 .data = btrfs_balance_flags_xdata,
 .size = ARRAY_SIZE(btrfs_balance_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
