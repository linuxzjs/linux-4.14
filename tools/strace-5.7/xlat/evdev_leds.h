/* Generated by ./xlat/gen.sh from ./xlat/evdev_leds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(LED_NUML) || (defined(HAVE_DECL_LED_NUML) && HAVE_DECL_LED_NUML)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_NUML) == (0x00), "LED_NUML != 0x00");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_NUML 0x00
#endif
#if defined(LED_CAPSL) || (defined(HAVE_DECL_LED_CAPSL) && HAVE_DECL_LED_CAPSL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_CAPSL) == (0x01), "LED_CAPSL != 0x01");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_CAPSL 0x01
#endif
#if defined(LED_SCROLLL) || (defined(HAVE_DECL_LED_SCROLLL) && HAVE_DECL_LED_SCROLLL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_SCROLLL) == (0x02), "LED_SCROLLL != 0x02");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_SCROLLL 0x02
#endif
#if defined(LED_COMPOSE) || (defined(HAVE_DECL_LED_COMPOSE) && HAVE_DECL_LED_COMPOSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_COMPOSE) == (0x03), "LED_COMPOSE != 0x03");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_COMPOSE 0x03
#endif
#if defined(LED_KANA) || (defined(HAVE_DECL_LED_KANA) && HAVE_DECL_LED_KANA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_KANA) == (0x04), "LED_KANA != 0x04");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_KANA 0x04
#endif
#if defined(LED_SLEEP) || (defined(HAVE_DECL_LED_SLEEP) && HAVE_DECL_LED_SLEEP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_SLEEP) == (0x05), "LED_SLEEP != 0x05");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_SLEEP 0x05
#endif
#if defined(LED_SUSPEND) || (defined(HAVE_DECL_LED_SUSPEND) && HAVE_DECL_LED_SUSPEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_SUSPEND) == (0x06), "LED_SUSPEND != 0x06");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_SUSPEND 0x06
#endif
#if defined(LED_MUTE) || (defined(HAVE_DECL_LED_MUTE) && HAVE_DECL_LED_MUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_MUTE) == (0x07), "LED_MUTE != 0x07");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_MUTE 0x07
#endif
#if defined(LED_MISC) || (defined(HAVE_DECL_LED_MISC) && HAVE_DECL_LED_MISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_MISC) == (0x08), "LED_MISC != 0x08");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_MISC 0x08
#endif
#if defined(LED_MAIL) || (defined(HAVE_DECL_LED_MAIL) && HAVE_DECL_LED_MAIL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_MAIL) == (0x09), "LED_MAIL != 0x09");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_MAIL 0x09
#endif
#if defined(LED_CHARGING) || (defined(HAVE_DECL_LED_CHARGING) && HAVE_DECL_LED_CHARGING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LED_CHARGING) == (0x0a), "LED_CHARGING != 0x0a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LED_CHARGING 0x0a
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat evdev_leds in mpers mode

# else

static const struct xlat_data evdev_leds_xdata[] = {
 [LED_NUML] = XLAT(LED_NUML),
 #define XLAT_VAL_0 ((unsigned) (LED_NUML))
 #define XLAT_STR_0 STRINGIFY(LED_NUML)
 [LED_CAPSL] = XLAT(LED_CAPSL),
 #define XLAT_VAL_1 ((unsigned) (LED_CAPSL))
 #define XLAT_STR_1 STRINGIFY(LED_CAPSL)
 [LED_SCROLLL] = XLAT(LED_SCROLLL),
 #define XLAT_VAL_2 ((unsigned) (LED_SCROLLL))
 #define XLAT_STR_2 STRINGIFY(LED_SCROLLL)
 [LED_COMPOSE] = XLAT(LED_COMPOSE),
 #define XLAT_VAL_3 ((unsigned) (LED_COMPOSE))
 #define XLAT_STR_3 STRINGIFY(LED_COMPOSE)
 [LED_KANA] = XLAT(LED_KANA),
 #define XLAT_VAL_4 ((unsigned) (LED_KANA))
 #define XLAT_STR_4 STRINGIFY(LED_KANA)
 [LED_SLEEP] = XLAT(LED_SLEEP),
 #define XLAT_VAL_5 ((unsigned) (LED_SLEEP))
 #define XLAT_STR_5 STRINGIFY(LED_SLEEP)
 [LED_SUSPEND] = XLAT(LED_SUSPEND),
 #define XLAT_VAL_6 ((unsigned) (LED_SUSPEND))
 #define XLAT_STR_6 STRINGIFY(LED_SUSPEND)
 [LED_MUTE] = XLAT(LED_MUTE),
 #define XLAT_VAL_7 ((unsigned) (LED_MUTE))
 #define XLAT_STR_7 STRINGIFY(LED_MUTE)
 [LED_MISC] = XLAT(LED_MISC),
 #define XLAT_VAL_8 ((unsigned) (LED_MISC))
 #define XLAT_STR_8 STRINGIFY(LED_MISC)
 [LED_MAIL] = XLAT(LED_MAIL),
 #define XLAT_VAL_9 ((unsigned) (LED_MAIL))
 #define XLAT_STR_9 STRINGIFY(LED_MAIL)
 [LED_CHARGING] = XLAT(LED_CHARGING),
 #define XLAT_VAL_10 ((unsigned) (LED_CHARGING))
 #define XLAT_STR_10 STRINGIFY(LED_CHARGING)
};
static
const struct xlat evdev_leds[1] = { {
 .data = evdev_leds_xdata,
 .size = ARRAY_SIZE(evdev_leds_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
