/* Generated by ./xlat/gen.sh from ./xlat/v4l2_format_description_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(V4L2_FMT_FLAG_COMPRESSED) || (defined(HAVE_DECL_V4L2_FMT_FLAG_COMPRESSED) && HAVE_DECL_V4L2_FMT_FLAG_COMPRESSED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_FMT_FLAG_COMPRESSED) == (0x0001), "V4L2_FMT_FLAG_COMPRESSED != 0x0001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_FMT_FLAG_COMPRESSED 0x0001
#endif
#if defined(V4L2_FMT_FLAG_EMULATED) || (defined(HAVE_DECL_V4L2_FMT_FLAG_EMULATED) && HAVE_DECL_V4L2_FMT_FLAG_EMULATED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_FMT_FLAG_EMULATED) == (0x0002), "V4L2_FMT_FLAG_EMULATED != 0x0002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_FMT_FLAG_EMULATED 0x0002
#endif
#if defined(V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM) || (defined(HAVE_DECL_V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM) && HAVE_DECL_V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM) == (0x0004), "V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM != 0x0004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM 0x0004
#endif
#if defined(V4L2_FMT_FLAG_DYN_RESOLUTION) || (defined(HAVE_DECL_V4L2_FMT_FLAG_DYN_RESOLUTION) && HAVE_DECL_V4L2_FMT_FLAG_DYN_RESOLUTION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_FMT_FLAG_DYN_RESOLUTION) == (0x0008), "V4L2_FMT_FLAG_DYN_RESOLUTION != 0x0008");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_FMT_FLAG_DYN_RESOLUTION 0x0008
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat v4l2_format_description_flags[];

# else

static const struct xlat_data v4l2_format_description_flags_xdata[] = {
 XLAT(V4L2_FMT_FLAG_COMPRESSED),
 #define XLAT_VAL_0 ((unsigned) (V4L2_FMT_FLAG_COMPRESSED))
 #define XLAT_STR_0 STRINGIFY(V4L2_FMT_FLAG_COMPRESSED)
 XLAT(V4L2_FMT_FLAG_EMULATED),
 #define XLAT_VAL_1 ((unsigned) (V4L2_FMT_FLAG_EMULATED))
 #define XLAT_STR_1 STRINGIFY(V4L2_FMT_FLAG_EMULATED)
 XLAT(V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM),
 #define XLAT_VAL_2 ((unsigned) (V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM))
 #define XLAT_STR_2 STRINGIFY(V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM)
 XLAT(V4L2_FMT_FLAG_DYN_RESOLUTION),
 #define XLAT_VAL_3 ((unsigned) (V4L2_FMT_FLAG_DYN_RESOLUTION))
 #define XLAT_STR_3 STRINGIFY(V4L2_FMT_FLAG_DYN_RESOLUTION)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat v4l2_format_description_flags[1] = { {
 .data = v4l2_format_description_flags_xdata,
 .size = ARRAY_SIZE(v4l2_format_description_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
