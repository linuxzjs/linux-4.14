/* Generated by ./xlat/gen.sh from ./xlat/sysctl_root.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"


#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sysctl_root in mpers mode

# else

static const struct xlat_data sysctl_root_xdata[] = {
 XLAT(CTL_KERN),
 #define XLAT_VAL_0 ((unsigned) (CTL_KERN))
 #define XLAT_STR_0 STRINGIFY(CTL_KERN)
 XLAT(CTL_VM),
 #define XLAT_VAL_1 ((unsigned) (CTL_VM))
 #define XLAT_STR_1 STRINGIFY(CTL_VM)
 XLAT(CTL_NET),
 #define XLAT_VAL_2 ((unsigned) (CTL_NET))
 #define XLAT_STR_2 STRINGIFY(CTL_NET)
 XLAT(CTL_FS),
 #define XLAT_VAL_3 ((unsigned) (CTL_FS))
 #define XLAT_STR_3 STRINGIFY(CTL_FS)
 XLAT(CTL_DEBUG),
 #define XLAT_VAL_4 ((unsigned) (CTL_DEBUG))
 #define XLAT_STR_4 STRINGIFY(CTL_DEBUG)
 XLAT(CTL_DEV),
 #define XLAT_VAL_5 ((unsigned) (CTL_DEV))
 #define XLAT_STR_5 STRINGIFY(CTL_DEV)
 XLAT(CTL_BUS),
 #define XLAT_VAL_6 ((unsigned) (CTL_BUS))
 #define XLAT_STR_6 STRINGIFY(CTL_BUS)
 XLAT(CTL_ABI),
 #define XLAT_VAL_7 ((unsigned) (CTL_ABI))
 #define XLAT_STR_7 STRINGIFY(CTL_ABI)
 XLAT(CTL_CPU),
 #define XLAT_VAL_8 ((unsigned) (CTL_CPU))
 #define XLAT_STR_8 STRINGIFY(CTL_CPU)
#if defined(CTL_PROC) || (defined(HAVE_DECL_CTL_PROC) && HAVE_DECL_CTL_PROC)
  XLAT(CTL_PROC),
 #define XLAT_VAL_9 ((unsigned) (CTL_PROC))
 #define XLAT_STR_9 STRINGIFY(CTL_PROC)
#endif
#if defined(CTL_ARLAN) || (defined(HAVE_DECL_CTL_ARLAN) && HAVE_DECL_CTL_ARLAN)
  XLAT(CTL_ARLAN),
 #define XLAT_VAL_10 ((unsigned) (CTL_ARLAN))
 #define XLAT_STR_10 STRINGIFY(CTL_ARLAN)
#endif
#if defined(CTL_S390DBF) || (defined(HAVE_DECL_CTL_S390DBF) && HAVE_DECL_CTL_S390DBF)
  XLAT(CTL_S390DBF),
 #define XLAT_VAL_11 ((unsigned) (CTL_S390DBF))
 #define XLAT_STR_11 STRINGIFY(CTL_S390DBF)
#endif
#if defined(CTL_SUNRPC) || (defined(HAVE_DECL_CTL_SUNRPC) && HAVE_DECL_CTL_SUNRPC)
  XLAT(CTL_SUNRPC),
 #define XLAT_VAL_12 ((unsigned) (CTL_SUNRPC))
 #define XLAT_STR_12 STRINGIFY(CTL_SUNRPC)
#endif
#if defined(CTL_PM) || (defined(HAVE_DECL_CTL_PM) && HAVE_DECL_CTL_PM)
  XLAT(CTL_PM),
 #define XLAT_VAL_13 ((unsigned) (CTL_PM))
 #define XLAT_STR_13 STRINGIFY(CTL_PM)
#endif
#if defined(CTL_FRV) || (defined(HAVE_DECL_CTL_FRV) && HAVE_DECL_CTL_FRV)
  XLAT(CTL_FRV),
 #define XLAT_VAL_14 ((unsigned) (CTL_FRV))
 #define XLAT_STR_14 STRINGIFY(CTL_FRV)
#endif
};
static
const struct xlat sysctl_root[1] = { {
 .data = sysctl_root_xdata,
 .size = ARRAY_SIZE(sysctl_root_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
