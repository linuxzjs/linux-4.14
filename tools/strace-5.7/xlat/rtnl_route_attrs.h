/* Generated by ./xlat/gen.sh from ./xlat/rtnl_route_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(RTA_UNSPEC) || (defined(HAVE_DECL_RTA_UNSPEC) && HAVE_DECL_RTA_UNSPEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_UNSPEC) == (0), "RTA_UNSPEC != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_UNSPEC 0
#endif
#if defined(RTA_DST) || (defined(HAVE_DECL_RTA_DST) && HAVE_DECL_RTA_DST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_DST) == (1), "RTA_DST != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_DST 1
#endif
#if defined(RTA_SRC) || (defined(HAVE_DECL_RTA_SRC) && HAVE_DECL_RTA_SRC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_SRC) == (2), "RTA_SRC != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_SRC 2
#endif
#if defined(RTA_IIF) || (defined(HAVE_DECL_RTA_IIF) && HAVE_DECL_RTA_IIF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_IIF) == (3), "RTA_IIF != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_IIF 3
#endif
#if defined(RTA_OIF) || (defined(HAVE_DECL_RTA_OIF) && HAVE_DECL_RTA_OIF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_OIF) == (4), "RTA_OIF != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_OIF 4
#endif
#if defined(RTA_GATEWAY) || (defined(HAVE_DECL_RTA_GATEWAY) && HAVE_DECL_RTA_GATEWAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_GATEWAY) == (5), "RTA_GATEWAY != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_GATEWAY 5
#endif
#if defined(RTA_PRIORITY) || (defined(HAVE_DECL_RTA_PRIORITY) && HAVE_DECL_RTA_PRIORITY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_PRIORITY) == (6), "RTA_PRIORITY != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_PRIORITY 6
#endif
#if defined(RTA_PREFSRC) || (defined(HAVE_DECL_RTA_PREFSRC) && HAVE_DECL_RTA_PREFSRC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_PREFSRC) == (7), "RTA_PREFSRC != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_PREFSRC 7
#endif
#if defined(RTA_METRICS) || (defined(HAVE_DECL_RTA_METRICS) && HAVE_DECL_RTA_METRICS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_METRICS) == (8), "RTA_METRICS != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_METRICS 8
#endif
#if defined(RTA_MULTIPATH) || (defined(HAVE_DECL_RTA_MULTIPATH) && HAVE_DECL_RTA_MULTIPATH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_MULTIPATH) == (9), "RTA_MULTIPATH != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_MULTIPATH 9
#endif
#if defined(RTA_PROTOINFO) || (defined(HAVE_DECL_RTA_PROTOINFO) && HAVE_DECL_RTA_PROTOINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_PROTOINFO) == (10), "RTA_PROTOINFO != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_PROTOINFO 10
#endif
#if defined(RTA_FLOW) || (defined(HAVE_DECL_RTA_FLOW) && HAVE_DECL_RTA_FLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_FLOW) == (11), "RTA_FLOW != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_FLOW 11
#endif
#if defined(RTA_CACHEINFO) || (defined(HAVE_DECL_RTA_CACHEINFO) && HAVE_DECL_RTA_CACHEINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_CACHEINFO) == (12), "RTA_CACHEINFO != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_CACHEINFO 12
#endif
#if defined(RTA_SESSION) || (defined(HAVE_DECL_RTA_SESSION) && HAVE_DECL_RTA_SESSION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_SESSION) == (13), "RTA_SESSION != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_SESSION 13
#endif
#if defined(RTA_MP_ALGO) || (defined(HAVE_DECL_RTA_MP_ALGO) && HAVE_DECL_RTA_MP_ALGO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_MP_ALGO) == (14), "RTA_MP_ALGO != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_MP_ALGO 14
#endif
#if defined(RTA_TABLE) || (defined(HAVE_DECL_RTA_TABLE) && HAVE_DECL_RTA_TABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_TABLE) == (15), "RTA_TABLE != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_TABLE 15
#endif
#if defined(RTA_MARK) || (defined(HAVE_DECL_RTA_MARK) && HAVE_DECL_RTA_MARK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_MARK) == (16), "RTA_MARK != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_MARK 16
#endif
#if defined(RTA_MFC_STATS) || (defined(HAVE_DECL_RTA_MFC_STATS) && HAVE_DECL_RTA_MFC_STATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_MFC_STATS) == (17), "RTA_MFC_STATS != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_MFC_STATS 17
#endif
#if defined(RTA_VIA) || (defined(HAVE_DECL_RTA_VIA) && HAVE_DECL_RTA_VIA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_VIA) == (18), "RTA_VIA != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_VIA 18
#endif
#if defined(RTA_NEWDST) || (defined(HAVE_DECL_RTA_NEWDST) && HAVE_DECL_RTA_NEWDST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_NEWDST) == (19), "RTA_NEWDST != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_NEWDST 19
#endif
#if defined(RTA_PREF) || (defined(HAVE_DECL_RTA_PREF) && HAVE_DECL_RTA_PREF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_PREF) == (20), "RTA_PREF != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_PREF 20
#endif
#if defined(RTA_ENCAP_TYPE) || (defined(HAVE_DECL_RTA_ENCAP_TYPE) && HAVE_DECL_RTA_ENCAP_TYPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_ENCAP_TYPE) == (21), "RTA_ENCAP_TYPE != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_ENCAP_TYPE 21
#endif
#if defined(RTA_ENCAP) || (defined(HAVE_DECL_RTA_ENCAP) && HAVE_DECL_RTA_ENCAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_ENCAP) == (22), "RTA_ENCAP != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_ENCAP 22
#endif
#if defined(RTA_EXPIRES) || (defined(HAVE_DECL_RTA_EXPIRES) && HAVE_DECL_RTA_EXPIRES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_EXPIRES) == (23), "RTA_EXPIRES != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_EXPIRES 23
#endif
#if defined(RTA_PAD) || (defined(HAVE_DECL_RTA_PAD) && HAVE_DECL_RTA_PAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_PAD) == (24), "RTA_PAD != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_PAD 24
#endif
#if defined(RTA_UID) || (defined(HAVE_DECL_RTA_UID) && HAVE_DECL_RTA_UID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_UID) == (25), "RTA_UID != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_UID 25
#endif
#if defined(RTA_TTL_PROPAGATE) || (defined(HAVE_DECL_RTA_TTL_PROPAGATE) && HAVE_DECL_RTA_TTL_PROPAGATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_TTL_PROPAGATE) == (26), "RTA_TTL_PROPAGATE != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_TTL_PROPAGATE 26
#endif
#if defined(RTA_IP_PROTO) || (defined(HAVE_DECL_RTA_IP_PROTO) && HAVE_DECL_RTA_IP_PROTO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_IP_PROTO) == (27), "RTA_IP_PROTO != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_IP_PROTO 27
#endif
#if defined(RTA_SPORT) || (defined(HAVE_DECL_RTA_SPORT) && HAVE_DECL_RTA_SPORT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_SPORT) == (28), "RTA_SPORT != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_SPORT 28
#endif
#if defined(RTA_DPORT) || (defined(HAVE_DECL_RTA_DPORT) && HAVE_DECL_RTA_DPORT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTA_DPORT) == (29), "RTA_DPORT != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTA_DPORT 29
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_route_attrs in mpers mode

# else

static const struct xlat_data rtnl_route_attrs_xdata[] = {
 [RTA_UNSPEC] = XLAT(RTA_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (RTA_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(RTA_UNSPEC)
 [RTA_DST] = XLAT(RTA_DST),
 #define XLAT_VAL_1 ((unsigned) (RTA_DST))
 #define XLAT_STR_1 STRINGIFY(RTA_DST)
 [RTA_SRC] = XLAT(RTA_SRC),
 #define XLAT_VAL_2 ((unsigned) (RTA_SRC))
 #define XLAT_STR_2 STRINGIFY(RTA_SRC)
 [RTA_IIF] = XLAT(RTA_IIF),
 #define XLAT_VAL_3 ((unsigned) (RTA_IIF))
 #define XLAT_STR_3 STRINGIFY(RTA_IIF)
 [RTA_OIF] = XLAT(RTA_OIF),
 #define XLAT_VAL_4 ((unsigned) (RTA_OIF))
 #define XLAT_STR_4 STRINGIFY(RTA_OIF)
 [RTA_GATEWAY] = XLAT(RTA_GATEWAY),
 #define XLAT_VAL_5 ((unsigned) (RTA_GATEWAY))
 #define XLAT_STR_5 STRINGIFY(RTA_GATEWAY)
 [RTA_PRIORITY] = XLAT(RTA_PRIORITY),
 #define XLAT_VAL_6 ((unsigned) (RTA_PRIORITY))
 #define XLAT_STR_6 STRINGIFY(RTA_PRIORITY)
 [RTA_PREFSRC] = XLAT(RTA_PREFSRC),
 #define XLAT_VAL_7 ((unsigned) (RTA_PREFSRC))
 #define XLAT_STR_7 STRINGIFY(RTA_PREFSRC)
 [RTA_METRICS] = XLAT(RTA_METRICS),
 #define XLAT_VAL_8 ((unsigned) (RTA_METRICS))
 #define XLAT_STR_8 STRINGIFY(RTA_METRICS)
 [RTA_MULTIPATH] = XLAT(RTA_MULTIPATH),
 #define XLAT_VAL_9 ((unsigned) (RTA_MULTIPATH))
 #define XLAT_STR_9 STRINGIFY(RTA_MULTIPATH)
 [RTA_PROTOINFO] = XLAT(RTA_PROTOINFO),
 #define XLAT_VAL_10 ((unsigned) (RTA_PROTOINFO))
 #define XLAT_STR_10 STRINGIFY(RTA_PROTOINFO)
 [RTA_FLOW] = XLAT(RTA_FLOW),
 #define XLAT_VAL_11 ((unsigned) (RTA_FLOW))
 #define XLAT_STR_11 STRINGIFY(RTA_FLOW)
 [RTA_CACHEINFO] = XLAT(RTA_CACHEINFO),
 #define XLAT_VAL_12 ((unsigned) (RTA_CACHEINFO))
 #define XLAT_STR_12 STRINGIFY(RTA_CACHEINFO)
 [RTA_SESSION] = XLAT(RTA_SESSION),
 #define XLAT_VAL_13 ((unsigned) (RTA_SESSION))
 #define XLAT_STR_13 STRINGIFY(RTA_SESSION)
 [RTA_MP_ALGO] = XLAT(RTA_MP_ALGO),
 #define XLAT_VAL_14 ((unsigned) (RTA_MP_ALGO))
 #define XLAT_STR_14 STRINGIFY(RTA_MP_ALGO)
 [RTA_TABLE] = XLAT(RTA_TABLE),
 #define XLAT_VAL_15 ((unsigned) (RTA_TABLE))
 #define XLAT_STR_15 STRINGIFY(RTA_TABLE)
 [RTA_MARK] = XLAT(RTA_MARK),
 #define XLAT_VAL_16 ((unsigned) (RTA_MARK))
 #define XLAT_STR_16 STRINGIFY(RTA_MARK)
 [RTA_MFC_STATS] = XLAT(RTA_MFC_STATS),
 #define XLAT_VAL_17 ((unsigned) (RTA_MFC_STATS))
 #define XLAT_STR_17 STRINGIFY(RTA_MFC_STATS)
 [RTA_VIA] = XLAT(RTA_VIA),
 #define XLAT_VAL_18 ((unsigned) (RTA_VIA))
 #define XLAT_STR_18 STRINGIFY(RTA_VIA)
 [RTA_NEWDST] = XLAT(RTA_NEWDST),
 #define XLAT_VAL_19 ((unsigned) (RTA_NEWDST))
 #define XLAT_STR_19 STRINGIFY(RTA_NEWDST)
 [RTA_PREF] = XLAT(RTA_PREF),
 #define XLAT_VAL_20 ((unsigned) (RTA_PREF))
 #define XLAT_STR_20 STRINGIFY(RTA_PREF)
 [RTA_ENCAP_TYPE] = XLAT(RTA_ENCAP_TYPE),
 #define XLAT_VAL_21 ((unsigned) (RTA_ENCAP_TYPE))
 #define XLAT_STR_21 STRINGIFY(RTA_ENCAP_TYPE)
 [RTA_ENCAP] = XLAT(RTA_ENCAP),
 #define XLAT_VAL_22 ((unsigned) (RTA_ENCAP))
 #define XLAT_STR_22 STRINGIFY(RTA_ENCAP)
 [RTA_EXPIRES] = XLAT(RTA_EXPIRES),
 #define XLAT_VAL_23 ((unsigned) (RTA_EXPIRES))
 #define XLAT_STR_23 STRINGIFY(RTA_EXPIRES)
 [RTA_PAD] = XLAT(RTA_PAD),
 #define XLAT_VAL_24 ((unsigned) (RTA_PAD))
 #define XLAT_STR_24 STRINGIFY(RTA_PAD)
 [RTA_UID] = XLAT(RTA_UID),
 #define XLAT_VAL_25 ((unsigned) (RTA_UID))
 #define XLAT_STR_25 STRINGIFY(RTA_UID)
 [RTA_TTL_PROPAGATE] = XLAT(RTA_TTL_PROPAGATE),
 #define XLAT_VAL_26 ((unsigned) (RTA_TTL_PROPAGATE))
 #define XLAT_STR_26 STRINGIFY(RTA_TTL_PROPAGATE)
 [RTA_IP_PROTO] = XLAT(RTA_IP_PROTO),
 #define XLAT_VAL_27 ((unsigned) (RTA_IP_PROTO))
 #define XLAT_STR_27 STRINGIFY(RTA_IP_PROTO)
 [RTA_SPORT] = XLAT(RTA_SPORT),
 #define XLAT_VAL_28 ((unsigned) (RTA_SPORT))
 #define XLAT_STR_28 STRINGIFY(RTA_SPORT)
 [RTA_DPORT] = XLAT(RTA_DPORT),
 #define XLAT_VAL_29 ((unsigned) (RTA_DPORT))
 #define XLAT_STR_29 STRINGIFY(RTA_DPORT)
};
static
const struct xlat rtnl_route_attrs[1] = { {
 .data = rtnl_route_attrs_xdata,
 .size = ARRAY_SIZE(rtnl_route_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
