/* Generated by ./xlat/gen.sh from ./xlat/sysctl_net_ipv6.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"


#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sysctl_net_ipv6 in mpers mode

# else

static const struct xlat_data sysctl_net_ipv6_xdata[] = {
 XLAT(NET_IPV6_CONF),
 #define XLAT_VAL_0 ((unsigned) (NET_IPV6_CONF))
 #define XLAT_STR_0 STRINGIFY(NET_IPV6_CONF)
 XLAT(NET_IPV6_NEIGH),
 #define XLAT_VAL_1 ((unsigned) (NET_IPV6_NEIGH))
 #define XLAT_STR_1 STRINGIFY(NET_IPV6_NEIGH)
 XLAT(NET_IPV6_ROUTE),
 #define XLAT_VAL_2 ((unsigned) (NET_IPV6_ROUTE))
 #define XLAT_STR_2 STRINGIFY(NET_IPV6_ROUTE)
 XLAT(NET_IPV6_ICMP),
 #define XLAT_VAL_3 ((unsigned) (NET_IPV6_ICMP))
 #define XLAT_STR_3 STRINGIFY(NET_IPV6_ICMP)
 XLAT(NET_IPV6_BINDV6ONLY),
 #define XLAT_VAL_4 ((unsigned) (NET_IPV6_BINDV6ONLY))
 #define XLAT_STR_4 STRINGIFY(NET_IPV6_BINDV6ONLY)
 XLAT(NET_IPV6_IP6FRAG_HIGH_THRESH),
 #define XLAT_VAL_5 ((unsigned) (NET_IPV6_IP6FRAG_HIGH_THRESH))
 #define XLAT_STR_5 STRINGIFY(NET_IPV6_IP6FRAG_HIGH_THRESH)
 XLAT(NET_IPV6_IP6FRAG_LOW_THRESH),
 #define XLAT_VAL_6 ((unsigned) (NET_IPV6_IP6FRAG_LOW_THRESH))
 #define XLAT_STR_6 STRINGIFY(NET_IPV6_IP6FRAG_LOW_THRESH)
 XLAT(NET_IPV6_IP6FRAG_TIME),
 #define XLAT_VAL_7 ((unsigned) (NET_IPV6_IP6FRAG_TIME))
 #define XLAT_STR_7 STRINGIFY(NET_IPV6_IP6FRAG_TIME)
 XLAT(NET_IPV6_IP6FRAG_SECRET_INTERVAL),
 #define XLAT_VAL_8 ((unsigned) (NET_IPV6_IP6FRAG_SECRET_INTERVAL))
 #define XLAT_STR_8 STRINGIFY(NET_IPV6_IP6FRAG_SECRET_INTERVAL)
#if defined(NET_IPV6_MLD_MAX_MSF) || (defined(HAVE_DECL_NET_IPV6_MLD_MAX_MSF) && HAVE_DECL_NET_IPV6_MLD_MAX_MSF)
  XLAT(NET_IPV6_MLD_MAX_MSF),
 #define XLAT_VAL_9 ((unsigned) (NET_IPV6_MLD_MAX_MSF))
 #define XLAT_STR_9 STRINGIFY(NET_IPV6_MLD_MAX_MSF)
#endif
};
static
const struct xlat sysctl_net_ipv6[1] = { {
 .data = sysctl_net_ipv6_xdata,
 .size = ARRAY_SIZE(sysctl_net_ipv6_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
