/* Generated by ./xlat/gen.sh from ./xlat/seccomp_ops.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SECCOMP_SET_MODE_STRICT) || (defined(HAVE_DECL_SECCOMP_SET_MODE_STRICT) && HAVE_DECL_SECCOMP_SET_MODE_STRICT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SECCOMP_SET_MODE_STRICT) == (0), "SECCOMP_SET_MODE_STRICT != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SECCOMP_SET_MODE_STRICT 0
#endif
#if defined(SECCOMP_SET_MODE_FILTER) || (defined(HAVE_DECL_SECCOMP_SET_MODE_FILTER) && HAVE_DECL_SECCOMP_SET_MODE_FILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SECCOMP_SET_MODE_FILTER) == (1), "SECCOMP_SET_MODE_FILTER != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SECCOMP_SET_MODE_FILTER 1
#endif
#if defined(SECCOMP_GET_ACTION_AVAIL) || (defined(HAVE_DECL_SECCOMP_GET_ACTION_AVAIL) && HAVE_DECL_SECCOMP_GET_ACTION_AVAIL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SECCOMP_GET_ACTION_AVAIL) == (2), "SECCOMP_GET_ACTION_AVAIL != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SECCOMP_GET_ACTION_AVAIL 2
#endif
#if defined(SECCOMP_GET_NOTIF_SIZES) || (defined(HAVE_DECL_SECCOMP_GET_NOTIF_SIZES) && HAVE_DECL_SECCOMP_GET_NOTIF_SIZES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SECCOMP_GET_NOTIF_SIZES) == (3), "SECCOMP_GET_NOTIF_SIZES != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SECCOMP_GET_NOTIF_SIZES 3
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat seccomp_ops in mpers mode

# else

static const struct xlat_data seccomp_ops_xdata[] = {
 [SECCOMP_SET_MODE_STRICT] = XLAT(SECCOMP_SET_MODE_STRICT),
 #define XLAT_VAL_0 ((unsigned) (SECCOMP_SET_MODE_STRICT))
 #define XLAT_STR_0 STRINGIFY(SECCOMP_SET_MODE_STRICT)
 [SECCOMP_SET_MODE_FILTER] = XLAT(SECCOMP_SET_MODE_FILTER),
 #define XLAT_VAL_1 ((unsigned) (SECCOMP_SET_MODE_FILTER))
 #define XLAT_STR_1 STRINGIFY(SECCOMP_SET_MODE_FILTER)
 [SECCOMP_GET_ACTION_AVAIL] = XLAT(SECCOMP_GET_ACTION_AVAIL),
 #define XLAT_VAL_2 ((unsigned) (SECCOMP_GET_ACTION_AVAIL))
 #define XLAT_STR_2 STRINGIFY(SECCOMP_GET_ACTION_AVAIL)
 [SECCOMP_GET_NOTIF_SIZES] = XLAT(SECCOMP_GET_NOTIF_SIZES),
 #define XLAT_VAL_3 ((unsigned) (SECCOMP_GET_NOTIF_SIZES))
 #define XLAT_STR_3 STRINGIFY(SECCOMP_GET_NOTIF_SIZES)
};
static
const struct xlat seccomp_ops[1] = { {
 .data = seccomp_ops_xdata,
 .size = ARRAY_SIZE(seccomp_ops_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
