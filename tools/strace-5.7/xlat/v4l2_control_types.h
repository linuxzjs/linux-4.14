/* Generated by ./xlat/gen.sh from ./xlat/v4l2_control_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(V4L2_CTRL_TYPE_INTEGER) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_INTEGER) && HAVE_DECL_V4L2_CTRL_TYPE_INTEGER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_INTEGER) == (1), "V4L2_CTRL_TYPE_INTEGER != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_INTEGER 1
#endif
#if defined(V4L2_CTRL_TYPE_BOOLEAN) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_BOOLEAN) && HAVE_DECL_V4L2_CTRL_TYPE_BOOLEAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_BOOLEAN) == (2), "V4L2_CTRL_TYPE_BOOLEAN != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_BOOLEAN 2
#endif
#if defined(V4L2_CTRL_TYPE_MENU) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_MENU) && HAVE_DECL_V4L2_CTRL_TYPE_MENU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_MENU) == (3), "V4L2_CTRL_TYPE_MENU != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_MENU 3
#endif
#if defined(V4L2_CTRL_TYPE_BUTTON) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_BUTTON) && HAVE_DECL_V4L2_CTRL_TYPE_BUTTON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_BUTTON) == (4), "V4L2_CTRL_TYPE_BUTTON != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_BUTTON 4
#endif
#if defined(V4L2_CTRL_TYPE_INTEGER64) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_INTEGER64) && HAVE_DECL_V4L2_CTRL_TYPE_INTEGER64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_INTEGER64) == (5), "V4L2_CTRL_TYPE_INTEGER64 != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_INTEGER64 5
#endif
#if defined(V4L2_CTRL_TYPE_CTRL_CLASS) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_CTRL_CLASS) && HAVE_DECL_V4L2_CTRL_TYPE_CTRL_CLASS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_CTRL_CLASS) == (6), "V4L2_CTRL_TYPE_CTRL_CLASS != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_CTRL_CLASS 6
#endif
#if defined(V4L2_CTRL_TYPE_STRING) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_STRING) && HAVE_DECL_V4L2_CTRL_TYPE_STRING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_STRING) == (7), "V4L2_CTRL_TYPE_STRING != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_STRING 7
#endif
#if defined(V4L2_CTRL_TYPE_BITMASK) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_BITMASK) && HAVE_DECL_V4L2_CTRL_TYPE_BITMASK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_BITMASK) == (8), "V4L2_CTRL_TYPE_BITMASK != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_BITMASK 8
#endif
#if defined(V4L2_CTRL_TYPE_INTEGER_MENU) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_INTEGER_MENU) && HAVE_DECL_V4L2_CTRL_TYPE_INTEGER_MENU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_INTEGER_MENU) == (9), "V4L2_CTRL_TYPE_INTEGER_MENU != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_INTEGER_MENU 9
#endif
#if defined(V4L2_CTRL_TYPE_U8) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_U8) && HAVE_DECL_V4L2_CTRL_TYPE_U8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_U8) == (0x100), "V4L2_CTRL_TYPE_U8 != 0x100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_U8 0x100
#endif
#if defined(V4L2_CTRL_TYPE_U16) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_U16) && HAVE_DECL_V4L2_CTRL_TYPE_U16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_U16) == (0x101), "V4L2_CTRL_TYPE_U16 != 0x101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_U16 0x101
#endif
#if defined(V4L2_CTRL_TYPE_U32) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_U32) && HAVE_DECL_V4L2_CTRL_TYPE_U32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_U32) == (0x102), "V4L2_CTRL_TYPE_U32 != 0x102");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_U32 0x102
#endif
#if defined(V4L2_CTRL_TYPE_AREA) || (defined(HAVE_DECL_V4L2_CTRL_TYPE_AREA) && HAVE_DECL_V4L2_CTRL_TYPE_AREA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_TYPE_AREA) == (0x106), "V4L2_CTRL_TYPE_AREA != 0x106");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_TYPE_AREA 0x106
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat v4l2_control_types[];

# else

static const struct xlat_data v4l2_control_types_xdata[] = {
 XLAT(V4L2_CTRL_TYPE_INTEGER),
 #define XLAT_VAL_0 ((unsigned) (V4L2_CTRL_TYPE_INTEGER))
 #define XLAT_STR_0 STRINGIFY(V4L2_CTRL_TYPE_INTEGER)
 XLAT(V4L2_CTRL_TYPE_BOOLEAN),
 #define XLAT_VAL_1 ((unsigned) (V4L2_CTRL_TYPE_BOOLEAN))
 #define XLAT_STR_1 STRINGIFY(V4L2_CTRL_TYPE_BOOLEAN)
 XLAT(V4L2_CTRL_TYPE_MENU),
 #define XLAT_VAL_2 ((unsigned) (V4L2_CTRL_TYPE_MENU))
 #define XLAT_STR_2 STRINGIFY(V4L2_CTRL_TYPE_MENU)
 XLAT(V4L2_CTRL_TYPE_BUTTON),
 #define XLAT_VAL_3 ((unsigned) (V4L2_CTRL_TYPE_BUTTON))
 #define XLAT_STR_3 STRINGIFY(V4L2_CTRL_TYPE_BUTTON)
 XLAT(V4L2_CTRL_TYPE_INTEGER64),
 #define XLAT_VAL_4 ((unsigned) (V4L2_CTRL_TYPE_INTEGER64))
 #define XLAT_STR_4 STRINGIFY(V4L2_CTRL_TYPE_INTEGER64)
 XLAT(V4L2_CTRL_TYPE_CTRL_CLASS),
 #define XLAT_VAL_5 ((unsigned) (V4L2_CTRL_TYPE_CTRL_CLASS))
 #define XLAT_STR_5 STRINGIFY(V4L2_CTRL_TYPE_CTRL_CLASS)
 XLAT(V4L2_CTRL_TYPE_STRING),
 #define XLAT_VAL_6 ((unsigned) (V4L2_CTRL_TYPE_STRING))
 #define XLAT_STR_6 STRINGIFY(V4L2_CTRL_TYPE_STRING)
 XLAT(V4L2_CTRL_TYPE_BITMASK),
 #define XLAT_VAL_7 ((unsigned) (V4L2_CTRL_TYPE_BITMASK))
 #define XLAT_STR_7 STRINGIFY(V4L2_CTRL_TYPE_BITMASK)
 XLAT(V4L2_CTRL_TYPE_INTEGER_MENU),
 #define XLAT_VAL_8 ((unsigned) (V4L2_CTRL_TYPE_INTEGER_MENU))
 #define XLAT_STR_8 STRINGIFY(V4L2_CTRL_TYPE_INTEGER_MENU)
 XLAT(V4L2_CTRL_TYPE_U8),
 #define XLAT_VAL_9 ((unsigned) (V4L2_CTRL_TYPE_U8))
 #define XLAT_STR_9 STRINGIFY(V4L2_CTRL_TYPE_U8)
 XLAT(V4L2_CTRL_TYPE_U16),
 #define XLAT_VAL_10 ((unsigned) (V4L2_CTRL_TYPE_U16))
 #define XLAT_STR_10 STRINGIFY(V4L2_CTRL_TYPE_U16)
 XLAT(V4L2_CTRL_TYPE_U32),
 #define XLAT_VAL_11 ((unsigned) (V4L2_CTRL_TYPE_U32))
 #define XLAT_STR_11 STRINGIFY(V4L2_CTRL_TYPE_U32)
 XLAT(V4L2_CTRL_TYPE_AREA),
 #define XLAT_VAL_12 ((unsigned) (V4L2_CTRL_TYPE_AREA))
 #define XLAT_STR_12 STRINGIFY(V4L2_CTRL_TYPE_AREA)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat v4l2_control_types[1] = { {
 .data = v4l2_control_types_xdata,
 .size = ARRAY_SIZE(v4l2_control_types_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
