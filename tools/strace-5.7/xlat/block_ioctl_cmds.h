/* Generated by ./xlat/gen.sh from ./xlat/block_ioctl_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BLKROSET) || (defined(HAVE_DECL_BLKROSET) && HAVE_DECL_BLKROSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKROSET) == (_IO(0x12, 93)), "BLKROSET != _IO(0x12, 93)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKROSET _IO(0x12, 93)
#endif
#if defined(BLKROGET) || (defined(HAVE_DECL_BLKROGET) && HAVE_DECL_BLKROGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKROGET) == (_IO(0x12, 94)), "BLKROGET != _IO(0x12, 94)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKROGET _IO(0x12, 94)
#endif
#if defined(BLKRRPART) || (defined(HAVE_DECL_BLKRRPART) && HAVE_DECL_BLKRRPART)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKRRPART) == (_IO(0x12, 95)), "BLKRRPART != _IO(0x12, 95)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKRRPART _IO(0x12, 95)
#endif
#if defined(BLKGETSIZE) || (defined(HAVE_DECL_BLKGETSIZE) && HAVE_DECL_BLKGETSIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKGETSIZE) == (_IO(0x12, 96)), "BLKGETSIZE != _IO(0x12, 96)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKGETSIZE _IO(0x12, 96)
#endif
#if defined(BLKFLSBUF) || (defined(HAVE_DECL_BLKFLSBUF) && HAVE_DECL_BLKFLSBUF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKFLSBUF) == (_IO(0x12, 97)), "BLKFLSBUF != _IO(0x12, 97)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKFLSBUF _IO(0x12, 97)
#endif
#if defined(BLKRASET) || (defined(HAVE_DECL_BLKRASET) && HAVE_DECL_BLKRASET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKRASET) == (_IO(0x12, 98)), "BLKRASET != _IO(0x12, 98)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKRASET _IO(0x12, 98)
#endif
#if defined(BLKRAGET) || (defined(HAVE_DECL_BLKRAGET) && HAVE_DECL_BLKRAGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKRAGET) == (_IO(0x12, 99)), "BLKRAGET != _IO(0x12, 99)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKRAGET _IO(0x12, 99)
#endif
#if defined(BLKFRASET) || (defined(HAVE_DECL_BLKFRASET) && HAVE_DECL_BLKFRASET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKFRASET) == (_IO(0x12, 100)), "BLKFRASET != _IO(0x12, 100)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKFRASET _IO(0x12, 100)
#endif
#if defined(BLKFRAGET) || (defined(HAVE_DECL_BLKFRAGET) && HAVE_DECL_BLKFRAGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKFRAGET) == (_IO(0x12, 101)), "BLKFRAGET != _IO(0x12, 101)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKFRAGET _IO(0x12, 101)
#endif
#if defined(BLKSECTSET) || (defined(HAVE_DECL_BLKSECTSET) && HAVE_DECL_BLKSECTSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKSECTSET) == (_IO(0x12, 102)), "BLKSECTSET != _IO(0x12, 102)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKSECTSET _IO(0x12, 102)
#endif
#if defined(BLKSECTGET) || (defined(HAVE_DECL_BLKSECTGET) && HAVE_DECL_BLKSECTGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKSECTGET) == (_IO(0x12, 103)), "BLKSECTGET != _IO(0x12, 103)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKSECTGET _IO(0x12, 103)
#endif
#if defined(BLKSSZGET) || (defined(HAVE_DECL_BLKSSZGET) && HAVE_DECL_BLKSSZGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKSSZGET) == (_IO(0x12, 104)), "BLKSSZGET != _IO(0x12, 104)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKSSZGET _IO(0x12, 104)
#endif
#if defined(BLKPG) || (defined(HAVE_DECL_BLKPG) && HAVE_DECL_BLKPG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKPG) == (_IO(0x12, 105)), "BLKPG != _IO(0x12, 105)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKPG _IO(0x12, 105)
#endif
#if defined(BLKELVGET) || (defined(HAVE_DECL_BLKELVGET) && HAVE_DECL_BLKELVGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKELVGET) == (_IOR(0x12, 106, size_t)), "BLKELVGET != _IOR(0x12, 106, size_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKELVGET _IOR(0x12, 106, size_t)
#endif
#if defined(BLKELVSET) || (defined(HAVE_DECL_BLKELVSET) && HAVE_DECL_BLKELVSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKELVSET) == (_IOW(0x12, 107, size_t)), "BLKELVSET != _IOW(0x12, 107, size_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKELVSET _IOW(0x12, 107, size_t)
#endif
#if defined(BLKBSZGET) || (defined(HAVE_DECL_BLKBSZGET) && HAVE_DECL_BLKBSZGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKBSZGET) == (_IOR(0x12, 112, size_t)), "BLKBSZGET != _IOR(0x12, 112, size_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKBSZGET _IOR(0x12, 112, size_t)
#endif
#if defined(BLKBSZSET) || (defined(HAVE_DECL_BLKBSZSET) && HAVE_DECL_BLKBSZSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKBSZSET) == (_IOW(0x12, 113, size_t)), "BLKBSZSET != _IOW(0x12, 113, size_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKBSZSET _IOW(0x12, 113, size_t)
#endif
#if defined(BLKGETSIZE64) || (defined(HAVE_DECL_BLKGETSIZE64) && HAVE_DECL_BLKGETSIZE64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKGETSIZE64) == (_IOR(0x12, 114, size_t)), "BLKGETSIZE64 != _IOR(0x12, 114, size_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKGETSIZE64 _IOR(0x12, 114, size_t)
#endif
#if defined(BLKTRACESETUP) || (defined(HAVE_DECL_BLKTRACESETUP) && HAVE_DECL_BLKTRACESETUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKTRACESETUP) == (_IOWR(0x12, 115, struct blk_user_trace_setup)), "BLKTRACESETUP != _IOWR(0x12, 115, struct blk_user_trace_setup)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKTRACESETUP _IOWR(0x12, 115, struct blk_user_trace_setup)
#endif
#if defined(BLKTRACESTART) || (defined(HAVE_DECL_BLKTRACESTART) && HAVE_DECL_BLKTRACESTART)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKTRACESTART) == (_IO(0x12, 116)), "BLKTRACESTART != _IO(0x12, 116)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKTRACESTART _IO(0x12, 116)
#endif
#if defined(BLKTRACESTOP) || (defined(HAVE_DECL_BLKTRACESTOP) && HAVE_DECL_BLKTRACESTOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKTRACESTOP) == (_IO(0x12, 117)), "BLKTRACESTOP != _IO(0x12, 117)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKTRACESTOP _IO(0x12, 117)
#endif
#if defined(BLKTRACETEARDOWN) || (defined(HAVE_DECL_BLKTRACETEARDOWN) && HAVE_DECL_BLKTRACETEARDOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKTRACETEARDOWN) == (_IO(0x12, 118)), "BLKTRACETEARDOWN != _IO(0x12, 118)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKTRACETEARDOWN _IO(0x12, 118)
#endif
#if defined(BLKDISCARD) || (defined(HAVE_DECL_BLKDISCARD) && HAVE_DECL_BLKDISCARD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKDISCARD) == (_IO(0x12, 119)), "BLKDISCARD != _IO(0x12, 119)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKDISCARD _IO(0x12, 119)
#endif
#if defined(BLKIOMIN) || (defined(HAVE_DECL_BLKIOMIN) && HAVE_DECL_BLKIOMIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKIOMIN) == (_IO(0x12, 120)), "BLKIOMIN != _IO(0x12, 120)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKIOMIN _IO(0x12, 120)
#endif
#if defined(BLKIOOPT) || (defined(HAVE_DECL_BLKIOOPT) && HAVE_DECL_BLKIOOPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKIOOPT) == (_IO(0x12, 121)), "BLKIOOPT != _IO(0x12, 121)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKIOOPT _IO(0x12, 121)
#endif
#if defined(BLKALIGNOFF) || (defined(HAVE_DECL_BLKALIGNOFF) && HAVE_DECL_BLKALIGNOFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKALIGNOFF) == (_IO(0x12, 122)), "BLKALIGNOFF != _IO(0x12, 122)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKALIGNOFF _IO(0x12, 122)
#endif
#if defined(BLKPBSZGET) || (defined(HAVE_DECL_BLKPBSZGET) && HAVE_DECL_BLKPBSZGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKPBSZGET) == (_IO(0x12, 123)), "BLKPBSZGET != _IO(0x12, 123)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKPBSZGET _IO(0x12, 123)
#endif
#if defined(BLKDISCARDZEROES) || (defined(HAVE_DECL_BLKDISCARDZEROES) && HAVE_DECL_BLKDISCARDZEROES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKDISCARDZEROES) == (_IO(0x12, 124)), "BLKDISCARDZEROES != _IO(0x12, 124)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKDISCARDZEROES _IO(0x12, 124)
#endif
#if defined(BLKSECDISCARD) || (defined(HAVE_DECL_BLKSECDISCARD) && HAVE_DECL_BLKSECDISCARD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKSECDISCARD) == (_IO(0x12, 125)), "BLKSECDISCARD != _IO(0x12, 125)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKSECDISCARD _IO(0x12, 125)
#endif
#if defined(BLKROTATIONAL) || (defined(HAVE_DECL_BLKROTATIONAL) && HAVE_DECL_BLKROTATIONAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKROTATIONAL) == (_IO(0x12, 126)), "BLKROTATIONAL != _IO(0x12, 126)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKROTATIONAL _IO(0x12, 126)
#endif
#if defined(BLKZEROOUT) || (defined(HAVE_DECL_BLKZEROOUT) && HAVE_DECL_BLKZEROOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKZEROOUT) == (_IO(0x12, 127)), "BLKZEROOUT != _IO(0x12, 127)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKZEROOUT _IO(0x12, 127)
#endif
#if defined(BLKDAXGET) || (defined(HAVE_DECL_BLKDAXGET) && HAVE_DECL_BLKDAXGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKDAXGET) == (_IO(0x12, 129)), "BLKDAXGET != _IO(0x12, 129)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKDAXGET _IO(0x12, 129)
#endif
#if defined(BLKGETZONESZ) || (defined(HAVE_DECL_BLKGETZONESZ) && HAVE_DECL_BLKGETZONESZ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKGETZONESZ) == (_IOR(0x12, 132, uint32_t)), "BLKGETZONESZ != _IOR(0x12, 132, uint32_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKGETZONESZ _IOR(0x12, 132, uint32_t)
#endif
#if defined(BLKGETNRZONES) || (defined(HAVE_DECL_BLKGETNRZONES) && HAVE_DECL_BLKGETNRZONES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BLKGETNRZONES) == (_IOR(0x12, 133, uint32_t)), "BLKGETNRZONES != _IOR(0x12, 133, uint32_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BLKGETNRZONES _IOR(0x12, 133, uint32_t)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat block_ioctl_cmds[];

# else

static const struct xlat_data block_ioctl_cmds_xdata[] = {
 XLAT(BLKROSET),
 #define XLAT_VAL_0 ((unsigned) (BLKROSET))
 #define XLAT_STR_0 STRINGIFY(BLKROSET)
 XLAT(BLKROGET),
 #define XLAT_VAL_1 ((unsigned) (BLKROGET))
 #define XLAT_STR_1 STRINGIFY(BLKROGET)
 XLAT(BLKRRPART),
 #define XLAT_VAL_2 ((unsigned) (BLKRRPART))
 #define XLAT_STR_2 STRINGIFY(BLKRRPART)
 XLAT(BLKGETSIZE),
 #define XLAT_VAL_3 ((unsigned) (BLKGETSIZE))
 #define XLAT_STR_3 STRINGIFY(BLKGETSIZE)
 XLAT(BLKFLSBUF),
 #define XLAT_VAL_4 ((unsigned) (BLKFLSBUF))
 #define XLAT_STR_4 STRINGIFY(BLKFLSBUF)
 XLAT(BLKRASET),
 #define XLAT_VAL_5 ((unsigned) (BLKRASET))
 #define XLAT_STR_5 STRINGIFY(BLKRASET)
 XLAT(BLKRAGET),
 #define XLAT_VAL_6 ((unsigned) (BLKRAGET))
 #define XLAT_STR_6 STRINGIFY(BLKRAGET)
 XLAT(BLKFRASET),
 #define XLAT_VAL_7 ((unsigned) (BLKFRASET))
 #define XLAT_STR_7 STRINGIFY(BLKFRASET)
 XLAT(BLKFRAGET),
 #define XLAT_VAL_8 ((unsigned) (BLKFRAGET))
 #define XLAT_STR_8 STRINGIFY(BLKFRAGET)
 XLAT(BLKSECTSET),
 #define XLAT_VAL_9 ((unsigned) (BLKSECTSET))
 #define XLAT_STR_9 STRINGIFY(BLKSECTSET)
 XLAT(BLKSECTGET),
 #define XLAT_VAL_10 ((unsigned) (BLKSECTGET))
 #define XLAT_STR_10 STRINGIFY(BLKSECTGET)
 XLAT(BLKSSZGET),
 #define XLAT_VAL_11 ((unsigned) (BLKSSZGET))
 #define XLAT_STR_11 STRINGIFY(BLKSSZGET)
 XLAT(BLKPG),
 #define XLAT_VAL_12 ((unsigned) (BLKPG))
 #define XLAT_STR_12 STRINGIFY(BLKPG)
 XLAT(BLKELVGET),
 #define XLAT_VAL_13 ((unsigned) (BLKELVGET))
 #define XLAT_STR_13 STRINGIFY(BLKELVGET)
 XLAT(BLKELVSET),
 #define XLAT_VAL_14 ((unsigned) (BLKELVSET))
 #define XLAT_STR_14 STRINGIFY(BLKELVSET)
 XLAT(BLKBSZGET),
 #define XLAT_VAL_15 ((unsigned) (BLKBSZGET))
 #define XLAT_STR_15 STRINGIFY(BLKBSZGET)
 XLAT(BLKBSZSET),
 #define XLAT_VAL_16 ((unsigned) (BLKBSZSET))
 #define XLAT_STR_16 STRINGIFY(BLKBSZSET)
 XLAT(BLKGETSIZE64),
 #define XLAT_VAL_17 ((unsigned) (BLKGETSIZE64))
 #define XLAT_STR_17 STRINGIFY(BLKGETSIZE64)
 XLAT(BLKTRACESETUP),
 #define XLAT_VAL_18 ((unsigned) (BLKTRACESETUP))
 #define XLAT_STR_18 STRINGIFY(BLKTRACESETUP)
 XLAT(BLKTRACESTART),
 #define XLAT_VAL_19 ((unsigned) (BLKTRACESTART))
 #define XLAT_STR_19 STRINGIFY(BLKTRACESTART)
 XLAT(BLKTRACESTOP),
 #define XLAT_VAL_20 ((unsigned) (BLKTRACESTOP))
 #define XLAT_STR_20 STRINGIFY(BLKTRACESTOP)
 XLAT(BLKTRACETEARDOWN),
 #define XLAT_VAL_21 ((unsigned) (BLKTRACETEARDOWN))
 #define XLAT_STR_21 STRINGIFY(BLKTRACETEARDOWN)
 XLAT(BLKDISCARD),
 #define XLAT_VAL_22 ((unsigned) (BLKDISCARD))
 #define XLAT_STR_22 STRINGIFY(BLKDISCARD)
 XLAT(BLKIOMIN),
 #define XLAT_VAL_23 ((unsigned) (BLKIOMIN))
 #define XLAT_STR_23 STRINGIFY(BLKIOMIN)
 XLAT(BLKIOOPT),
 #define XLAT_VAL_24 ((unsigned) (BLKIOOPT))
 #define XLAT_STR_24 STRINGIFY(BLKIOOPT)
 XLAT(BLKALIGNOFF),
 #define XLAT_VAL_25 ((unsigned) (BLKALIGNOFF))
 #define XLAT_STR_25 STRINGIFY(BLKALIGNOFF)
 XLAT(BLKPBSZGET),
 #define XLAT_VAL_26 ((unsigned) (BLKPBSZGET))
 #define XLAT_STR_26 STRINGIFY(BLKPBSZGET)
 XLAT(BLKDISCARDZEROES),
 #define XLAT_VAL_27 ((unsigned) (BLKDISCARDZEROES))
 #define XLAT_STR_27 STRINGIFY(BLKDISCARDZEROES)
 XLAT(BLKSECDISCARD),
 #define XLAT_VAL_28 ((unsigned) (BLKSECDISCARD))
 #define XLAT_STR_28 STRINGIFY(BLKSECDISCARD)
 XLAT(BLKROTATIONAL),
 #define XLAT_VAL_29 ((unsigned) (BLKROTATIONAL))
 #define XLAT_STR_29 STRINGIFY(BLKROTATIONAL)
 XLAT(BLKZEROOUT),
 #define XLAT_VAL_30 ((unsigned) (BLKZEROOUT))
 #define XLAT_STR_30 STRINGIFY(BLKZEROOUT)



 XLAT(BLKDAXGET),
 #define XLAT_VAL_31 ((unsigned) (BLKDAXGET))
 #define XLAT_STR_31 STRINGIFY(BLKDAXGET)


 XLAT(BLKGETZONESZ),
 #define XLAT_VAL_32 ((unsigned) (BLKGETZONESZ))
 #define XLAT_STR_32 STRINGIFY(BLKGETZONESZ)
 XLAT(BLKGETNRZONES),
 #define XLAT_VAL_33 ((unsigned) (BLKGETNRZONES))
 #define XLAT_STR_33 STRINGIFY(BLKGETNRZONES)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat block_ioctl_cmds[1] = { {
 .data = block_ioctl_cmds_xdata,
 .size = ARRAY_SIZE(block_ioctl_cmds_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
