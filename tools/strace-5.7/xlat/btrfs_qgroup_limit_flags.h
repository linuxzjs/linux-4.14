/* Generated by ./xlat/gen.sh from ./xlat/btrfs_qgroup_limit_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BTRFS_QGROUP_LIMIT_MAX_RFER) || (defined(HAVE_DECL_BTRFS_QGROUP_LIMIT_MAX_RFER) && HAVE_DECL_BTRFS_QGROUP_LIMIT_MAX_RFER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_QGROUP_LIMIT_MAX_RFER) == ((1ULL << 0)), "BTRFS_QGROUP_LIMIT_MAX_RFER != (1ULL << 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_QGROUP_LIMIT_MAX_RFER (1ULL << 0)
#endif
#if defined(BTRFS_QGROUP_LIMIT_MAX_EXCL) || (defined(HAVE_DECL_BTRFS_QGROUP_LIMIT_MAX_EXCL) && HAVE_DECL_BTRFS_QGROUP_LIMIT_MAX_EXCL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_QGROUP_LIMIT_MAX_EXCL) == ((1ULL << 1)), "BTRFS_QGROUP_LIMIT_MAX_EXCL != (1ULL << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_QGROUP_LIMIT_MAX_EXCL (1ULL << 1)
#endif
#if defined(BTRFS_QGROUP_LIMIT_RSV_RFER) || (defined(HAVE_DECL_BTRFS_QGROUP_LIMIT_RSV_RFER) && HAVE_DECL_BTRFS_QGROUP_LIMIT_RSV_RFER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_QGROUP_LIMIT_RSV_RFER) == ((1ULL << 2)), "BTRFS_QGROUP_LIMIT_RSV_RFER != (1ULL << 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_QGROUP_LIMIT_RSV_RFER (1ULL << 2)
#endif
#if defined(BTRFS_QGROUP_LIMIT_RSV_EXCL) || (defined(HAVE_DECL_BTRFS_QGROUP_LIMIT_RSV_EXCL) && HAVE_DECL_BTRFS_QGROUP_LIMIT_RSV_EXCL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_QGROUP_LIMIT_RSV_EXCL) == ((1ULL << 3)), "BTRFS_QGROUP_LIMIT_RSV_EXCL != (1ULL << 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_QGROUP_LIMIT_RSV_EXCL (1ULL << 3)
#endif
#if defined(BTRFS_QGROUP_LIMIT_RFER_CMPR) || (defined(HAVE_DECL_BTRFS_QGROUP_LIMIT_RFER_CMPR) && HAVE_DECL_BTRFS_QGROUP_LIMIT_RFER_CMPR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_QGROUP_LIMIT_RFER_CMPR) == ((1ULL << 4)), "BTRFS_QGROUP_LIMIT_RFER_CMPR != (1ULL << 4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_QGROUP_LIMIT_RFER_CMPR (1ULL << 4)
#endif
#if defined(BTRFS_QGROUP_LIMIT_EXCL_CMPR) || (defined(HAVE_DECL_BTRFS_QGROUP_LIMIT_EXCL_CMPR) && HAVE_DECL_BTRFS_QGROUP_LIMIT_EXCL_CMPR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_QGROUP_LIMIT_EXCL_CMPR) == ((1ULL << 5)), "BTRFS_QGROUP_LIMIT_EXCL_CMPR != (1ULL << 5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_QGROUP_LIMIT_EXCL_CMPR (1ULL << 5)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat btrfs_qgroup_limit_flags[];

# else

static const struct xlat_data btrfs_qgroup_limit_flags_xdata[] = {
 XLAT_TYPE(uint64_t, BTRFS_QGROUP_LIMIT_MAX_RFER),
 #define XLAT_VAL_0 ((uint64_t) (BTRFS_QGROUP_LIMIT_MAX_RFER))
 #define XLAT_STR_0 STRINGIFY(BTRFS_QGROUP_LIMIT_MAX_RFER)
 XLAT_TYPE(uint64_t, BTRFS_QGROUP_LIMIT_MAX_EXCL),
 #define XLAT_VAL_1 ((uint64_t) (BTRFS_QGROUP_LIMIT_MAX_EXCL))
 #define XLAT_STR_1 STRINGIFY(BTRFS_QGROUP_LIMIT_MAX_EXCL)
 XLAT_TYPE(uint64_t, BTRFS_QGROUP_LIMIT_RSV_RFER),
 #define XLAT_VAL_2 ((uint64_t) (BTRFS_QGROUP_LIMIT_RSV_RFER))
 #define XLAT_STR_2 STRINGIFY(BTRFS_QGROUP_LIMIT_RSV_RFER)
 XLAT_TYPE(uint64_t, BTRFS_QGROUP_LIMIT_RSV_EXCL),
 #define XLAT_VAL_3 ((uint64_t) (BTRFS_QGROUP_LIMIT_RSV_EXCL))
 #define XLAT_STR_3 STRINGIFY(BTRFS_QGROUP_LIMIT_RSV_EXCL)
 XLAT_TYPE(uint64_t, BTRFS_QGROUP_LIMIT_RFER_CMPR),
 #define XLAT_VAL_4 ((uint64_t) (BTRFS_QGROUP_LIMIT_RFER_CMPR))
 #define XLAT_STR_4 STRINGIFY(BTRFS_QGROUP_LIMIT_RFER_CMPR)
 XLAT_TYPE(uint64_t, BTRFS_QGROUP_LIMIT_EXCL_CMPR),
 #define XLAT_VAL_5 ((uint64_t) (BTRFS_QGROUP_LIMIT_EXCL_CMPR))
 #define XLAT_STR_5 STRINGIFY(BTRFS_QGROUP_LIMIT_EXCL_CMPR)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat btrfs_qgroup_limit_flags[1] = { {
 .data = btrfs_qgroup_limit_flags_xdata,
 .size = ARRAY_SIZE(btrfs_qgroup_limit_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
