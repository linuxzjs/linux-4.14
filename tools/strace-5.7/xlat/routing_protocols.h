/* Generated by ./xlat/gen.sh from ./xlat/routing_protocols.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(RTPROT_UNSPEC) || (defined(HAVE_DECL_RTPROT_UNSPEC) && HAVE_DECL_RTPROT_UNSPEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_UNSPEC) == (0), "RTPROT_UNSPEC != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_UNSPEC 0
#endif
#if defined(RTPROT_REDIRECT) || (defined(HAVE_DECL_RTPROT_REDIRECT) && HAVE_DECL_RTPROT_REDIRECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_REDIRECT) == (1), "RTPROT_REDIRECT != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_REDIRECT 1
#endif
#if defined(RTPROT_KERNEL) || (defined(HAVE_DECL_RTPROT_KERNEL) && HAVE_DECL_RTPROT_KERNEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_KERNEL) == (2), "RTPROT_KERNEL != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_KERNEL 2
#endif
#if defined(RTPROT_BOOT) || (defined(HAVE_DECL_RTPROT_BOOT) && HAVE_DECL_RTPROT_BOOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_BOOT) == (3), "RTPROT_BOOT != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_BOOT 3
#endif
#if defined(RTPROT_STATIC) || (defined(HAVE_DECL_RTPROT_STATIC) && HAVE_DECL_RTPROT_STATIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_STATIC) == (4), "RTPROT_STATIC != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_STATIC 4
#endif
#if defined(RTPROT_GATED) || (defined(HAVE_DECL_RTPROT_GATED) && HAVE_DECL_RTPROT_GATED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_GATED) == (8), "RTPROT_GATED != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_GATED 8
#endif
#if defined(RTPROT_RA) || (defined(HAVE_DECL_RTPROT_RA) && HAVE_DECL_RTPROT_RA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_RA) == (9), "RTPROT_RA != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_RA 9
#endif
#if defined(RTPROT_MRT) || (defined(HAVE_DECL_RTPROT_MRT) && HAVE_DECL_RTPROT_MRT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_MRT) == (10), "RTPROT_MRT != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_MRT 10
#endif
#if defined(RTPROT_ZEBRA) || (defined(HAVE_DECL_RTPROT_ZEBRA) && HAVE_DECL_RTPROT_ZEBRA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_ZEBRA) == (11), "RTPROT_ZEBRA != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_ZEBRA 11
#endif
#if defined(RTPROT_BIRD) || (defined(HAVE_DECL_RTPROT_BIRD) && HAVE_DECL_RTPROT_BIRD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_BIRD) == (12), "RTPROT_BIRD != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_BIRD 12
#endif
#if defined(RTPROT_DNROUTED) || (defined(HAVE_DECL_RTPROT_DNROUTED) && HAVE_DECL_RTPROT_DNROUTED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_DNROUTED) == (13), "RTPROT_DNROUTED != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_DNROUTED 13
#endif
#if defined(RTPROT_XORP) || (defined(HAVE_DECL_RTPROT_XORP) && HAVE_DECL_RTPROT_XORP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_XORP) == (14), "RTPROT_XORP != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_XORP 14
#endif
#if defined(RTPROT_NTK) || (defined(HAVE_DECL_RTPROT_NTK) && HAVE_DECL_RTPROT_NTK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_NTK) == (15), "RTPROT_NTK != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_NTK 15
#endif
#if defined(RTPROT_DHCP) || (defined(HAVE_DECL_RTPROT_DHCP) && HAVE_DECL_RTPROT_DHCP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_DHCP) == (16), "RTPROT_DHCP != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_DHCP 16
#endif
#if defined(RTPROT_MROUTED) || (defined(HAVE_DECL_RTPROT_MROUTED) && HAVE_DECL_RTPROT_MROUTED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_MROUTED) == (17), "RTPROT_MROUTED != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_MROUTED 17
#endif
#if defined(RTPROT_BABEL) || (defined(HAVE_DECL_RTPROT_BABEL) && HAVE_DECL_RTPROT_BABEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_BABEL) == (42), "RTPROT_BABEL != 42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_BABEL 42
#endif
#if defined(RTPROT_BGP) || (defined(HAVE_DECL_RTPROT_BGP) && HAVE_DECL_RTPROT_BGP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_BGP) == (186), "RTPROT_BGP != 186");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_BGP 186
#endif
#if defined(RTPROT_ISIS) || (defined(HAVE_DECL_RTPROT_ISIS) && HAVE_DECL_RTPROT_ISIS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_ISIS) == (187), "RTPROT_ISIS != 187");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_ISIS 187
#endif
#if defined(RTPROT_OSPF) || (defined(HAVE_DECL_RTPROT_OSPF) && HAVE_DECL_RTPROT_OSPF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_OSPF) == (188), "RTPROT_OSPF != 188");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_OSPF 188
#endif
#if defined(RTPROT_RIP) || (defined(HAVE_DECL_RTPROT_RIP) && HAVE_DECL_RTPROT_RIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_RIP) == (189), "RTPROT_RIP != 189");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_RIP 189
#endif
#if defined(RTPROT_EIGRP) || (defined(HAVE_DECL_RTPROT_EIGRP) && HAVE_DECL_RTPROT_EIGRP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTPROT_EIGRP) == (192), "RTPROT_EIGRP != 192");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTPROT_EIGRP 192
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat routing_protocols in mpers mode

# else

static const struct xlat_data routing_protocols_xdata[] = {
 XLAT(RTPROT_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (RTPROT_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(RTPROT_UNSPEC)
 XLAT(RTPROT_REDIRECT),
 #define XLAT_VAL_1 ((unsigned) (RTPROT_REDIRECT))
 #define XLAT_STR_1 STRINGIFY(RTPROT_REDIRECT)
 XLAT(RTPROT_KERNEL),
 #define XLAT_VAL_2 ((unsigned) (RTPROT_KERNEL))
 #define XLAT_STR_2 STRINGIFY(RTPROT_KERNEL)
 XLAT(RTPROT_BOOT),
 #define XLAT_VAL_3 ((unsigned) (RTPROT_BOOT))
 #define XLAT_STR_3 STRINGIFY(RTPROT_BOOT)
 XLAT(RTPROT_STATIC),
 #define XLAT_VAL_4 ((unsigned) (RTPROT_STATIC))
 #define XLAT_STR_4 STRINGIFY(RTPROT_STATIC)
 XLAT(RTPROT_GATED),
 #define XLAT_VAL_5 ((unsigned) (RTPROT_GATED))
 #define XLAT_STR_5 STRINGIFY(RTPROT_GATED)
 XLAT(RTPROT_RA),
 #define XLAT_VAL_6 ((unsigned) (RTPROT_RA))
 #define XLAT_STR_6 STRINGIFY(RTPROT_RA)
 XLAT(RTPROT_MRT),
 #define XLAT_VAL_7 ((unsigned) (RTPROT_MRT))
 #define XLAT_STR_7 STRINGIFY(RTPROT_MRT)
 XLAT(RTPROT_ZEBRA),
 #define XLAT_VAL_8 ((unsigned) (RTPROT_ZEBRA))
 #define XLAT_STR_8 STRINGIFY(RTPROT_ZEBRA)
 XLAT(RTPROT_BIRD),
 #define XLAT_VAL_9 ((unsigned) (RTPROT_BIRD))
 #define XLAT_STR_9 STRINGIFY(RTPROT_BIRD)
 XLAT(RTPROT_DNROUTED),
 #define XLAT_VAL_10 ((unsigned) (RTPROT_DNROUTED))
 #define XLAT_STR_10 STRINGIFY(RTPROT_DNROUTED)
 XLAT(RTPROT_XORP),
 #define XLAT_VAL_11 ((unsigned) (RTPROT_XORP))
 #define XLAT_STR_11 STRINGIFY(RTPROT_XORP)
 XLAT(RTPROT_NTK),
 #define XLAT_VAL_12 ((unsigned) (RTPROT_NTK))
 #define XLAT_STR_12 STRINGIFY(RTPROT_NTK)
 XLAT(RTPROT_DHCP),
 #define XLAT_VAL_13 ((unsigned) (RTPROT_DHCP))
 #define XLAT_STR_13 STRINGIFY(RTPROT_DHCP)
 XLAT(RTPROT_MROUTED),
 #define XLAT_VAL_14 ((unsigned) (RTPROT_MROUTED))
 #define XLAT_STR_14 STRINGIFY(RTPROT_MROUTED)
 XLAT(RTPROT_BABEL),
 #define XLAT_VAL_15 ((unsigned) (RTPROT_BABEL))
 #define XLAT_STR_15 STRINGIFY(RTPROT_BABEL)
 XLAT(RTPROT_BGP),
 #define XLAT_VAL_16 ((unsigned) (RTPROT_BGP))
 #define XLAT_STR_16 STRINGIFY(RTPROT_BGP)
 XLAT(RTPROT_ISIS),
 #define XLAT_VAL_17 ((unsigned) (RTPROT_ISIS))
 #define XLAT_STR_17 STRINGIFY(RTPROT_ISIS)
 XLAT(RTPROT_OSPF),
 #define XLAT_VAL_18 ((unsigned) (RTPROT_OSPF))
 #define XLAT_STR_18 STRINGIFY(RTPROT_OSPF)
 XLAT(RTPROT_RIP),
 #define XLAT_VAL_19 ((unsigned) (RTPROT_RIP))
 #define XLAT_STR_19 STRINGIFY(RTPROT_RIP)
 XLAT(RTPROT_EIGRP),
 #define XLAT_VAL_20 ((unsigned) (RTPROT_EIGRP))
 #define XLAT_STR_20 STRINGIFY(RTPROT_EIGRP)
};
static
const struct xlat routing_protocols[1] = { {
 .data = routing_protocols_xdata,
 .size = ARRAY_SIZE(routing_protocols_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
