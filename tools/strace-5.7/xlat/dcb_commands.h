/* Generated by ./xlat/gen.sh from ./xlat/dcb_commands.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(DCB_CMD_UNDEFINED) || (defined(HAVE_DECL_DCB_CMD_UNDEFINED) && HAVE_DECL_DCB_CMD_UNDEFINED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_UNDEFINED) == (0), "DCB_CMD_UNDEFINED != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_UNDEFINED 0
#endif
#if defined(DCB_CMD_GSTATE) || (defined(HAVE_DECL_DCB_CMD_GSTATE) && HAVE_DECL_DCB_CMD_GSTATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_GSTATE) == (1), "DCB_CMD_GSTATE != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_GSTATE 1
#endif
#if defined(DCB_CMD_SSTATE) || (defined(HAVE_DECL_DCB_CMD_SSTATE) && HAVE_DECL_DCB_CMD_SSTATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_SSTATE) == (2), "DCB_CMD_SSTATE != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_SSTATE 2
#endif
#if defined(DCB_CMD_PGTX_GCFG) || (defined(HAVE_DECL_DCB_CMD_PGTX_GCFG) && HAVE_DECL_DCB_CMD_PGTX_GCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_PGTX_GCFG) == (3), "DCB_CMD_PGTX_GCFG != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_PGTX_GCFG 3
#endif
#if defined(DCB_CMD_PGTX_SCFG) || (defined(HAVE_DECL_DCB_CMD_PGTX_SCFG) && HAVE_DECL_DCB_CMD_PGTX_SCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_PGTX_SCFG) == (4), "DCB_CMD_PGTX_SCFG != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_PGTX_SCFG 4
#endif
#if defined(DCB_CMD_PGRX_GCFG) || (defined(HAVE_DECL_DCB_CMD_PGRX_GCFG) && HAVE_DECL_DCB_CMD_PGRX_GCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_PGRX_GCFG) == (5), "DCB_CMD_PGRX_GCFG != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_PGRX_GCFG 5
#endif
#if defined(DCB_CMD_PGRX_SCFG) || (defined(HAVE_DECL_DCB_CMD_PGRX_SCFG) && HAVE_DECL_DCB_CMD_PGRX_SCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_PGRX_SCFG) == (6), "DCB_CMD_PGRX_SCFG != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_PGRX_SCFG 6
#endif
#if defined(DCB_CMD_PFC_GCFG) || (defined(HAVE_DECL_DCB_CMD_PFC_GCFG) && HAVE_DECL_DCB_CMD_PFC_GCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_PFC_GCFG) == (7), "DCB_CMD_PFC_GCFG != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_PFC_GCFG 7
#endif
#if defined(DCB_CMD_PFC_SCFG) || (defined(HAVE_DECL_DCB_CMD_PFC_SCFG) && HAVE_DECL_DCB_CMD_PFC_SCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_PFC_SCFG) == (8), "DCB_CMD_PFC_SCFG != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_PFC_SCFG 8
#endif
#if defined(DCB_CMD_SET_ALL) || (defined(HAVE_DECL_DCB_CMD_SET_ALL) && HAVE_DECL_DCB_CMD_SET_ALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_SET_ALL) == (9), "DCB_CMD_SET_ALL != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_SET_ALL 9
#endif
#if defined(DCB_CMD_GPERM_HWADDR) || (defined(HAVE_DECL_DCB_CMD_GPERM_HWADDR) && HAVE_DECL_DCB_CMD_GPERM_HWADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_GPERM_HWADDR) == (10), "DCB_CMD_GPERM_HWADDR != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_GPERM_HWADDR 10
#endif
#if defined(DCB_CMD_GCAP) || (defined(HAVE_DECL_DCB_CMD_GCAP) && HAVE_DECL_DCB_CMD_GCAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_GCAP) == (11), "DCB_CMD_GCAP != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_GCAP 11
#endif
#if defined(DCB_CMD_GNUMTCS) || (defined(HAVE_DECL_DCB_CMD_GNUMTCS) && HAVE_DECL_DCB_CMD_GNUMTCS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_GNUMTCS) == (12), "DCB_CMD_GNUMTCS != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_GNUMTCS 12
#endif
#if defined(DCB_CMD_SNUMTCS) || (defined(HAVE_DECL_DCB_CMD_SNUMTCS) && HAVE_DECL_DCB_CMD_SNUMTCS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_SNUMTCS) == (13), "DCB_CMD_SNUMTCS != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_SNUMTCS 13
#endif
#if defined(DCB_CMD_PFC_GSTATE) || (defined(HAVE_DECL_DCB_CMD_PFC_GSTATE) && HAVE_DECL_DCB_CMD_PFC_GSTATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_PFC_GSTATE) == (14), "DCB_CMD_PFC_GSTATE != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_PFC_GSTATE 14
#endif
#if defined(DCB_CMD_PFC_SSTATE) || (defined(HAVE_DECL_DCB_CMD_PFC_SSTATE) && HAVE_DECL_DCB_CMD_PFC_SSTATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_PFC_SSTATE) == (15), "DCB_CMD_PFC_SSTATE != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_PFC_SSTATE 15
#endif
#if defined(DCB_CMD_BCN_GCFG) || (defined(HAVE_DECL_DCB_CMD_BCN_GCFG) && HAVE_DECL_DCB_CMD_BCN_GCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_BCN_GCFG) == (16), "DCB_CMD_BCN_GCFG != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_BCN_GCFG 16
#endif
#if defined(DCB_CMD_BCN_SCFG) || (defined(HAVE_DECL_DCB_CMD_BCN_SCFG) && HAVE_DECL_DCB_CMD_BCN_SCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_BCN_SCFG) == (17), "DCB_CMD_BCN_SCFG != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_BCN_SCFG 17
#endif
#if defined(DCB_CMD_GAPP) || (defined(HAVE_DECL_DCB_CMD_GAPP) && HAVE_DECL_DCB_CMD_GAPP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_GAPP) == (18), "DCB_CMD_GAPP != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_GAPP 18
#endif
#if defined(DCB_CMD_SAPP) || (defined(HAVE_DECL_DCB_CMD_SAPP) && HAVE_DECL_DCB_CMD_SAPP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_SAPP) == (19), "DCB_CMD_SAPP != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_SAPP 19
#endif
#if defined(DCB_CMD_IEEE_SET) || (defined(HAVE_DECL_DCB_CMD_IEEE_SET) && HAVE_DECL_DCB_CMD_IEEE_SET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_IEEE_SET) == (20), "DCB_CMD_IEEE_SET != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_IEEE_SET 20
#endif
#if defined(DCB_CMD_IEEE_GET) || (defined(HAVE_DECL_DCB_CMD_IEEE_GET) && HAVE_DECL_DCB_CMD_IEEE_GET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_IEEE_GET) == (21), "DCB_CMD_IEEE_GET != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_IEEE_GET 21
#endif
#if defined(DCB_CMD_GDCBX) || (defined(HAVE_DECL_DCB_CMD_GDCBX) && HAVE_DECL_DCB_CMD_GDCBX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_GDCBX) == (22), "DCB_CMD_GDCBX != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_GDCBX 22
#endif
#if defined(DCB_CMD_SDCBX) || (defined(HAVE_DECL_DCB_CMD_SDCBX) && HAVE_DECL_DCB_CMD_SDCBX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_SDCBX) == (23), "DCB_CMD_SDCBX != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_SDCBX 23
#endif
#if defined(DCB_CMD_GFEATCFG) || (defined(HAVE_DECL_DCB_CMD_GFEATCFG) && HAVE_DECL_DCB_CMD_GFEATCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_GFEATCFG) == (24), "DCB_CMD_GFEATCFG != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_GFEATCFG 24
#endif
#if defined(DCB_CMD_SFEATCFG) || (defined(HAVE_DECL_DCB_CMD_SFEATCFG) && HAVE_DECL_DCB_CMD_SFEATCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_SFEATCFG) == (25), "DCB_CMD_SFEATCFG != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_SFEATCFG 25
#endif
#if defined(DCB_CMD_CEE_GET) || (defined(HAVE_DECL_DCB_CMD_CEE_GET) && HAVE_DECL_DCB_CMD_CEE_GET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_CEE_GET) == (26), "DCB_CMD_CEE_GET != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_CEE_GET 26
#endif
#if defined(DCB_CMD_IEEE_DEL) || (defined(HAVE_DECL_DCB_CMD_IEEE_DEL) && HAVE_DECL_DCB_CMD_IEEE_DEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DCB_CMD_IEEE_DEL) == (27), "DCB_CMD_IEEE_DEL != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DCB_CMD_IEEE_DEL 27
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat dcb_commands in mpers mode

# else

static const struct xlat_data dcb_commands_xdata[] = {
 [DCB_CMD_UNDEFINED] = XLAT(DCB_CMD_UNDEFINED),
 #define XLAT_VAL_0 ((unsigned) (DCB_CMD_UNDEFINED))
 #define XLAT_STR_0 STRINGIFY(DCB_CMD_UNDEFINED)
 [DCB_CMD_GSTATE] = XLAT(DCB_CMD_GSTATE),
 #define XLAT_VAL_1 ((unsigned) (DCB_CMD_GSTATE))
 #define XLAT_STR_1 STRINGIFY(DCB_CMD_GSTATE)
 [DCB_CMD_SSTATE] = XLAT(DCB_CMD_SSTATE),
 #define XLAT_VAL_2 ((unsigned) (DCB_CMD_SSTATE))
 #define XLAT_STR_2 STRINGIFY(DCB_CMD_SSTATE)
 [DCB_CMD_PGTX_GCFG] = XLAT(DCB_CMD_PGTX_GCFG),
 #define XLAT_VAL_3 ((unsigned) (DCB_CMD_PGTX_GCFG))
 #define XLAT_STR_3 STRINGIFY(DCB_CMD_PGTX_GCFG)
 [DCB_CMD_PGTX_SCFG] = XLAT(DCB_CMD_PGTX_SCFG),
 #define XLAT_VAL_4 ((unsigned) (DCB_CMD_PGTX_SCFG))
 #define XLAT_STR_4 STRINGIFY(DCB_CMD_PGTX_SCFG)
 [DCB_CMD_PGRX_GCFG] = XLAT(DCB_CMD_PGRX_GCFG),
 #define XLAT_VAL_5 ((unsigned) (DCB_CMD_PGRX_GCFG))
 #define XLAT_STR_5 STRINGIFY(DCB_CMD_PGRX_GCFG)
 [DCB_CMD_PGRX_SCFG] = XLAT(DCB_CMD_PGRX_SCFG),
 #define XLAT_VAL_6 ((unsigned) (DCB_CMD_PGRX_SCFG))
 #define XLAT_STR_6 STRINGIFY(DCB_CMD_PGRX_SCFG)
 [DCB_CMD_PFC_GCFG] = XLAT(DCB_CMD_PFC_GCFG),
 #define XLAT_VAL_7 ((unsigned) (DCB_CMD_PFC_GCFG))
 #define XLAT_STR_7 STRINGIFY(DCB_CMD_PFC_GCFG)
 [DCB_CMD_PFC_SCFG] = XLAT(DCB_CMD_PFC_SCFG),
 #define XLAT_VAL_8 ((unsigned) (DCB_CMD_PFC_SCFG))
 #define XLAT_STR_8 STRINGIFY(DCB_CMD_PFC_SCFG)
 [DCB_CMD_SET_ALL] = XLAT(DCB_CMD_SET_ALL),
 #define XLAT_VAL_9 ((unsigned) (DCB_CMD_SET_ALL))
 #define XLAT_STR_9 STRINGIFY(DCB_CMD_SET_ALL)
 [DCB_CMD_GPERM_HWADDR] = XLAT(DCB_CMD_GPERM_HWADDR),
 #define XLAT_VAL_10 ((unsigned) (DCB_CMD_GPERM_HWADDR))
 #define XLAT_STR_10 STRINGIFY(DCB_CMD_GPERM_HWADDR)
 [DCB_CMD_GCAP] = XLAT(DCB_CMD_GCAP),
 #define XLAT_VAL_11 ((unsigned) (DCB_CMD_GCAP))
 #define XLAT_STR_11 STRINGIFY(DCB_CMD_GCAP)
 [DCB_CMD_GNUMTCS] = XLAT(DCB_CMD_GNUMTCS),
 #define XLAT_VAL_12 ((unsigned) (DCB_CMD_GNUMTCS))
 #define XLAT_STR_12 STRINGIFY(DCB_CMD_GNUMTCS)
 [DCB_CMD_SNUMTCS] = XLAT(DCB_CMD_SNUMTCS),
 #define XLAT_VAL_13 ((unsigned) (DCB_CMD_SNUMTCS))
 #define XLAT_STR_13 STRINGIFY(DCB_CMD_SNUMTCS)
 [DCB_CMD_PFC_GSTATE] = XLAT(DCB_CMD_PFC_GSTATE),
 #define XLAT_VAL_14 ((unsigned) (DCB_CMD_PFC_GSTATE))
 #define XLAT_STR_14 STRINGIFY(DCB_CMD_PFC_GSTATE)
 [DCB_CMD_PFC_SSTATE] = XLAT(DCB_CMD_PFC_SSTATE),
 #define XLAT_VAL_15 ((unsigned) (DCB_CMD_PFC_SSTATE))
 #define XLAT_STR_15 STRINGIFY(DCB_CMD_PFC_SSTATE)
 [DCB_CMD_BCN_GCFG] = XLAT(DCB_CMD_BCN_GCFG),
 #define XLAT_VAL_16 ((unsigned) (DCB_CMD_BCN_GCFG))
 #define XLAT_STR_16 STRINGIFY(DCB_CMD_BCN_GCFG)
 [DCB_CMD_BCN_SCFG] = XLAT(DCB_CMD_BCN_SCFG),
 #define XLAT_VAL_17 ((unsigned) (DCB_CMD_BCN_SCFG))
 #define XLAT_STR_17 STRINGIFY(DCB_CMD_BCN_SCFG)
 [DCB_CMD_GAPP] = XLAT(DCB_CMD_GAPP),
 #define XLAT_VAL_18 ((unsigned) (DCB_CMD_GAPP))
 #define XLAT_STR_18 STRINGIFY(DCB_CMD_GAPP)
 [DCB_CMD_SAPP] = XLAT(DCB_CMD_SAPP),
 #define XLAT_VAL_19 ((unsigned) (DCB_CMD_SAPP))
 #define XLAT_STR_19 STRINGIFY(DCB_CMD_SAPP)
 [DCB_CMD_IEEE_SET] = XLAT(DCB_CMD_IEEE_SET),
 #define XLAT_VAL_20 ((unsigned) (DCB_CMD_IEEE_SET))
 #define XLAT_STR_20 STRINGIFY(DCB_CMD_IEEE_SET)
 [DCB_CMD_IEEE_GET] = XLAT(DCB_CMD_IEEE_GET),
 #define XLAT_VAL_21 ((unsigned) (DCB_CMD_IEEE_GET))
 #define XLAT_STR_21 STRINGIFY(DCB_CMD_IEEE_GET)
 [DCB_CMD_GDCBX] = XLAT(DCB_CMD_GDCBX),
 #define XLAT_VAL_22 ((unsigned) (DCB_CMD_GDCBX))
 #define XLAT_STR_22 STRINGIFY(DCB_CMD_GDCBX)
 [DCB_CMD_SDCBX] = XLAT(DCB_CMD_SDCBX),
 #define XLAT_VAL_23 ((unsigned) (DCB_CMD_SDCBX))
 #define XLAT_STR_23 STRINGIFY(DCB_CMD_SDCBX)
 [DCB_CMD_GFEATCFG] = XLAT(DCB_CMD_GFEATCFG),
 #define XLAT_VAL_24 ((unsigned) (DCB_CMD_GFEATCFG))
 #define XLAT_STR_24 STRINGIFY(DCB_CMD_GFEATCFG)
 [DCB_CMD_SFEATCFG] = XLAT(DCB_CMD_SFEATCFG),
 #define XLAT_VAL_25 ((unsigned) (DCB_CMD_SFEATCFG))
 #define XLAT_STR_25 STRINGIFY(DCB_CMD_SFEATCFG)
 [DCB_CMD_CEE_GET] = XLAT(DCB_CMD_CEE_GET),
 #define XLAT_VAL_26 ((unsigned) (DCB_CMD_CEE_GET))
 #define XLAT_STR_26 STRINGIFY(DCB_CMD_CEE_GET)
 [DCB_CMD_IEEE_DEL] = XLAT(DCB_CMD_IEEE_DEL),
 #define XLAT_VAL_27 ((unsigned) (DCB_CMD_IEEE_DEL))
 #define XLAT_STR_27 STRINGIFY(DCB_CMD_IEEE_DEL)
};
static
const struct xlat dcb_commands[1] = { {
 .data = dcb_commands_xdata,
 .size = ARRAY_SIZE(dcb_commands_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
