/* Generated by ./xlat/gen.sh from ./xlat/nl_netfilter_subsys_ids.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NFNL_SUBSYS_NONE) || (defined(HAVE_DECL_NFNL_SUBSYS_NONE) && HAVE_DECL_NFNL_SUBSYS_NONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_NONE) == (0), "NFNL_SUBSYS_NONE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_NONE 0
#endif
#if defined(NFNL_SUBSYS_CTNETLINK) || (defined(HAVE_DECL_NFNL_SUBSYS_CTNETLINK) && HAVE_DECL_NFNL_SUBSYS_CTNETLINK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_CTNETLINK) == (1), "NFNL_SUBSYS_CTNETLINK != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_CTNETLINK 1
#endif
#if defined(NFNL_SUBSYS_CTNETLINK_EXP) || (defined(HAVE_DECL_NFNL_SUBSYS_CTNETLINK_EXP) && HAVE_DECL_NFNL_SUBSYS_CTNETLINK_EXP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_CTNETLINK_EXP) == (2), "NFNL_SUBSYS_CTNETLINK_EXP != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_CTNETLINK_EXP 2
#endif
#if defined(NFNL_SUBSYS_QUEUE) || (defined(HAVE_DECL_NFNL_SUBSYS_QUEUE) && HAVE_DECL_NFNL_SUBSYS_QUEUE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_QUEUE) == (3), "NFNL_SUBSYS_QUEUE != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_QUEUE 3
#endif
#if defined(NFNL_SUBSYS_ULOG) || (defined(HAVE_DECL_NFNL_SUBSYS_ULOG) && HAVE_DECL_NFNL_SUBSYS_ULOG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_ULOG) == (4), "NFNL_SUBSYS_ULOG != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_ULOG 4
#endif
#if defined(NFNL_SUBSYS_OSF) || (defined(HAVE_DECL_NFNL_SUBSYS_OSF) && HAVE_DECL_NFNL_SUBSYS_OSF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_OSF) == (5), "NFNL_SUBSYS_OSF != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_OSF 5
#endif
#if defined(NFNL_SUBSYS_IPSET) || (defined(HAVE_DECL_NFNL_SUBSYS_IPSET) && HAVE_DECL_NFNL_SUBSYS_IPSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_IPSET) == (6), "NFNL_SUBSYS_IPSET != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_IPSET 6
#endif
#if defined(NFNL_SUBSYS_ACCT) || (defined(HAVE_DECL_NFNL_SUBSYS_ACCT) && HAVE_DECL_NFNL_SUBSYS_ACCT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_ACCT) == (7), "NFNL_SUBSYS_ACCT != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_ACCT 7
#endif
#if defined(NFNL_SUBSYS_CTNETLINK_TIMEOUT) || (defined(HAVE_DECL_NFNL_SUBSYS_CTNETLINK_TIMEOUT) && HAVE_DECL_NFNL_SUBSYS_CTNETLINK_TIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_CTNETLINK_TIMEOUT) == (8), "NFNL_SUBSYS_CTNETLINK_TIMEOUT != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_CTNETLINK_TIMEOUT 8
#endif
#if defined(NFNL_SUBSYS_CTHELPER) || (defined(HAVE_DECL_NFNL_SUBSYS_CTHELPER) && HAVE_DECL_NFNL_SUBSYS_CTHELPER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_CTHELPER) == (9), "NFNL_SUBSYS_CTHELPER != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_CTHELPER 9
#endif
#if defined(NFNL_SUBSYS_NFTABLES) || (defined(HAVE_DECL_NFNL_SUBSYS_NFTABLES) && HAVE_DECL_NFNL_SUBSYS_NFTABLES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_NFTABLES) == (10), "NFNL_SUBSYS_NFTABLES != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_NFTABLES 10
#endif
#if defined(NFNL_SUBSYS_NFT_COMPAT) || (defined(HAVE_DECL_NFNL_SUBSYS_NFT_COMPAT) && HAVE_DECL_NFNL_SUBSYS_NFT_COMPAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFNL_SUBSYS_NFT_COMPAT) == (11), "NFNL_SUBSYS_NFT_COMPAT != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFNL_SUBSYS_NFT_COMPAT 11
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat nl_netfilter_subsys_ids in mpers mode

# else

static const struct xlat_data nl_netfilter_subsys_ids_xdata[] = {
 [NFNL_SUBSYS_NONE] = XLAT(NFNL_SUBSYS_NONE),
 #define XLAT_VAL_0 ((unsigned) (NFNL_SUBSYS_NONE))
 #define XLAT_STR_0 STRINGIFY(NFNL_SUBSYS_NONE)
 [NFNL_SUBSYS_CTNETLINK] = XLAT(NFNL_SUBSYS_CTNETLINK),
 #define XLAT_VAL_1 ((unsigned) (NFNL_SUBSYS_CTNETLINK))
 #define XLAT_STR_1 STRINGIFY(NFNL_SUBSYS_CTNETLINK)
 [NFNL_SUBSYS_CTNETLINK_EXP] = XLAT(NFNL_SUBSYS_CTNETLINK_EXP),
 #define XLAT_VAL_2 ((unsigned) (NFNL_SUBSYS_CTNETLINK_EXP))
 #define XLAT_STR_2 STRINGIFY(NFNL_SUBSYS_CTNETLINK_EXP)
 [NFNL_SUBSYS_QUEUE] = XLAT(NFNL_SUBSYS_QUEUE),
 #define XLAT_VAL_3 ((unsigned) (NFNL_SUBSYS_QUEUE))
 #define XLAT_STR_3 STRINGIFY(NFNL_SUBSYS_QUEUE)
 [NFNL_SUBSYS_ULOG] = XLAT(NFNL_SUBSYS_ULOG),
 #define XLAT_VAL_4 ((unsigned) (NFNL_SUBSYS_ULOG))
 #define XLAT_STR_4 STRINGIFY(NFNL_SUBSYS_ULOG)
 [NFNL_SUBSYS_OSF] = XLAT(NFNL_SUBSYS_OSF),
 #define XLAT_VAL_5 ((unsigned) (NFNL_SUBSYS_OSF))
 #define XLAT_STR_5 STRINGIFY(NFNL_SUBSYS_OSF)
 [NFNL_SUBSYS_IPSET] = XLAT(NFNL_SUBSYS_IPSET),
 #define XLAT_VAL_6 ((unsigned) (NFNL_SUBSYS_IPSET))
 #define XLAT_STR_6 STRINGIFY(NFNL_SUBSYS_IPSET)
 [NFNL_SUBSYS_ACCT] = XLAT(NFNL_SUBSYS_ACCT),
 #define XLAT_VAL_7 ((unsigned) (NFNL_SUBSYS_ACCT))
 #define XLAT_STR_7 STRINGIFY(NFNL_SUBSYS_ACCT)
 [NFNL_SUBSYS_CTNETLINK_TIMEOUT] = XLAT(NFNL_SUBSYS_CTNETLINK_TIMEOUT),
 #define XLAT_VAL_8 ((unsigned) (NFNL_SUBSYS_CTNETLINK_TIMEOUT))
 #define XLAT_STR_8 STRINGIFY(NFNL_SUBSYS_CTNETLINK_TIMEOUT)
 [NFNL_SUBSYS_CTHELPER] = XLAT(NFNL_SUBSYS_CTHELPER),
 #define XLAT_VAL_9 ((unsigned) (NFNL_SUBSYS_CTHELPER))
 #define XLAT_STR_9 STRINGIFY(NFNL_SUBSYS_CTHELPER)
 [NFNL_SUBSYS_NFTABLES] = XLAT(NFNL_SUBSYS_NFTABLES),
 #define XLAT_VAL_10 ((unsigned) (NFNL_SUBSYS_NFTABLES))
 #define XLAT_STR_10 STRINGIFY(NFNL_SUBSYS_NFTABLES)
 [NFNL_SUBSYS_NFT_COMPAT] = XLAT(NFNL_SUBSYS_NFT_COMPAT),
 #define XLAT_VAL_11 ((unsigned) (NFNL_SUBSYS_NFT_COMPAT))
 #define XLAT_STR_11 STRINGIFY(NFNL_SUBSYS_NFT_COMPAT)
};
static
const struct xlat nl_netfilter_subsys_ids[1] = { {
 .data = nl_netfilter_subsys_ids_xdata,
 .size = ARRAY_SIZE(nl_netfilter_subsys_ids_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
