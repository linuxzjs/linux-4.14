/* Generated by ./xlat/gen.sh from ./xlat/uring_ops.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(IORING_OP_NOP) || (defined(HAVE_DECL_IORING_OP_NOP) && HAVE_DECL_IORING_OP_NOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_NOP) == (0), "IORING_OP_NOP != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_NOP 0
#endif
#if defined(IORING_OP_READV) || (defined(HAVE_DECL_IORING_OP_READV) && HAVE_DECL_IORING_OP_READV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_READV) == (1), "IORING_OP_READV != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_READV 1
#endif
#if defined(IORING_OP_WRITEV) || (defined(HAVE_DECL_IORING_OP_WRITEV) && HAVE_DECL_IORING_OP_WRITEV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_WRITEV) == (2), "IORING_OP_WRITEV != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_WRITEV 2
#endif
#if defined(IORING_OP_FSYNC) || (defined(HAVE_DECL_IORING_OP_FSYNC) && HAVE_DECL_IORING_OP_FSYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_FSYNC) == (3), "IORING_OP_FSYNC != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_FSYNC 3
#endif
#if defined(IORING_OP_READ_FIXED) || (defined(HAVE_DECL_IORING_OP_READ_FIXED) && HAVE_DECL_IORING_OP_READ_FIXED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_READ_FIXED) == (4), "IORING_OP_READ_FIXED != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_READ_FIXED 4
#endif
#if defined(IORING_OP_WRITE_FIXED) || (defined(HAVE_DECL_IORING_OP_WRITE_FIXED) && HAVE_DECL_IORING_OP_WRITE_FIXED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_WRITE_FIXED) == (5), "IORING_OP_WRITE_FIXED != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_WRITE_FIXED 5
#endif
#if defined(IORING_OP_POLL_ADD) || (defined(HAVE_DECL_IORING_OP_POLL_ADD) && HAVE_DECL_IORING_OP_POLL_ADD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_POLL_ADD) == (6), "IORING_OP_POLL_ADD != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_POLL_ADD 6
#endif
#if defined(IORING_OP_POLL_REMOVE) || (defined(HAVE_DECL_IORING_OP_POLL_REMOVE) && HAVE_DECL_IORING_OP_POLL_REMOVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_POLL_REMOVE) == (7), "IORING_OP_POLL_REMOVE != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_POLL_REMOVE 7
#endif
#if defined(IORING_OP_SYNC_FILE_RANGE) || (defined(HAVE_DECL_IORING_OP_SYNC_FILE_RANGE) && HAVE_DECL_IORING_OP_SYNC_FILE_RANGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_SYNC_FILE_RANGE) == (8), "IORING_OP_SYNC_FILE_RANGE != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_SYNC_FILE_RANGE 8
#endif
#if defined(IORING_OP_SENDMSG) || (defined(HAVE_DECL_IORING_OP_SENDMSG) && HAVE_DECL_IORING_OP_SENDMSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_SENDMSG) == (9), "IORING_OP_SENDMSG != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_SENDMSG 9
#endif
#if defined(IORING_OP_RECVMSG) || (defined(HAVE_DECL_IORING_OP_RECVMSG) && HAVE_DECL_IORING_OP_RECVMSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_RECVMSG) == (10), "IORING_OP_RECVMSG != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_RECVMSG 10
#endif
#if defined(IORING_OP_TIMEOUT) || (defined(HAVE_DECL_IORING_OP_TIMEOUT) && HAVE_DECL_IORING_OP_TIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_TIMEOUT) == (11), "IORING_OP_TIMEOUT != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_TIMEOUT 11
#endif
#if defined(IORING_OP_TIMEOUT_REMOVE) || (defined(HAVE_DECL_IORING_OP_TIMEOUT_REMOVE) && HAVE_DECL_IORING_OP_TIMEOUT_REMOVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_TIMEOUT_REMOVE) == (12), "IORING_OP_TIMEOUT_REMOVE != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_TIMEOUT_REMOVE 12
#endif
#if defined(IORING_OP_ACCEPT) || (defined(HAVE_DECL_IORING_OP_ACCEPT) && HAVE_DECL_IORING_OP_ACCEPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_ACCEPT) == (13), "IORING_OP_ACCEPT != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_ACCEPT 13
#endif
#if defined(IORING_OP_ASYNC_CANCEL) || (defined(HAVE_DECL_IORING_OP_ASYNC_CANCEL) && HAVE_DECL_IORING_OP_ASYNC_CANCEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_ASYNC_CANCEL) == (14), "IORING_OP_ASYNC_CANCEL != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_ASYNC_CANCEL 14
#endif
#if defined(IORING_OP_LINK_TIMEOUT) || (defined(HAVE_DECL_IORING_OP_LINK_TIMEOUT) && HAVE_DECL_IORING_OP_LINK_TIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_LINK_TIMEOUT) == (15), "IORING_OP_LINK_TIMEOUT != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_LINK_TIMEOUT 15
#endif
#if defined(IORING_OP_CONNECT) || (defined(HAVE_DECL_IORING_OP_CONNECT) && HAVE_DECL_IORING_OP_CONNECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_CONNECT) == (16), "IORING_OP_CONNECT != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_CONNECT 16
#endif
#if defined(IORING_OP_FALLOCATE) || (defined(HAVE_DECL_IORING_OP_FALLOCATE) && HAVE_DECL_IORING_OP_FALLOCATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_FALLOCATE) == (17), "IORING_OP_FALLOCATE != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_FALLOCATE 17
#endif
#if defined(IORING_OP_OPENAT) || (defined(HAVE_DECL_IORING_OP_OPENAT) && HAVE_DECL_IORING_OP_OPENAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_OPENAT) == (18), "IORING_OP_OPENAT != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_OPENAT 18
#endif
#if defined(IORING_OP_CLOSE) || (defined(HAVE_DECL_IORING_OP_CLOSE) && HAVE_DECL_IORING_OP_CLOSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_CLOSE) == (19), "IORING_OP_CLOSE != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_CLOSE 19
#endif
#if defined(IORING_OP_FILES_UPDATE) || (defined(HAVE_DECL_IORING_OP_FILES_UPDATE) && HAVE_DECL_IORING_OP_FILES_UPDATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_FILES_UPDATE) == (20), "IORING_OP_FILES_UPDATE != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_FILES_UPDATE 20
#endif
#if defined(IORING_OP_STATX) || (defined(HAVE_DECL_IORING_OP_STATX) && HAVE_DECL_IORING_OP_STATX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_STATX) == (21), "IORING_OP_STATX != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_STATX 21
#endif
#if defined(IORING_OP_READ) || (defined(HAVE_DECL_IORING_OP_READ) && HAVE_DECL_IORING_OP_READ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_READ) == (22), "IORING_OP_READ != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_READ 22
#endif
#if defined(IORING_OP_WRITE) || (defined(HAVE_DECL_IORING_OP_WRITE) && HAVE_DECL_IORING_OP_WRITE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_WRITE) == (23), "IORING_OP_WRITE != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_WRITE 23
#endif
#if defined(IORING_OP_FADVISE) || (defined(HAVE_DECL_IORING_OP_FADVISE) && HAVE_DECL_IORING_OP_FADVISE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_FADVISE) == (24), "IORING_OP_FADVISE != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_FADVISE 24
#endif
#if defined(IORING_OP_MADVISE) || (defined(HAVE_DECL_IORING_OP_MADVISE) && HAVE_DECL_IORING_OP_MADVISE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_MADVISE) == (25), "IORING_OP_MADVISE != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_MADVISE 25
#endif
#if defined(IORING_OP_SEND) || (defined(HAVE_DECL_IORING_OP_SEND) && HAVE_DECL_IORING_OP_SEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_SEND) == (26), "IORING_OP_SEND != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_SEND 26
#endif
#if defined(IORING_OP_RECV) || (defined(HAVE_DECL_IORING_OP_RECV) && HAVE_DECL_IORING_OP_RECV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_RECV) == (27), "IORING_OP_RECV != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_RECV 27
#endif
#if defined(IORING_OP_OPENAT2) || (defined(HAVE_DECL_IORING_OP_OPENAT2) && HAVE_DECL_IORING_OP_OPENAT2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_OPENAT2) == (28), "IORING_OP_OPENAT2 != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_OPENAT2 28
#endif
#if defined(IORING_OP_EPOLL_CTL) || (defined(HAVE_DECL_IORING_OP_EPOLL_CTL) && HAVE_DECL_IORING_OP_EPOLL_CTL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_EPOLL_CTL) == (29), "IORING_OP_EPOLL_CTL != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_EPOLL_CTL 29
#endif
#if defined(IORING_OP_SPLICE) || (defined(HAVE_DECL_IORING_OP_SPLICE) && HAVE_DECL_IORING_OP_SPLICE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_SPLICE) == (30), "IORING_OP_SPLICE != 30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_SPLICE 30
#endif
#if defined(IORING_OP_PROVIDE_BUFFERS) || (defined(HAVE_DECL_IORING_OP_PROVIDE_BUFFERS) && HAVE_DECL_IORING_OP_PROVIDE_BUFFERS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_PROVIDE_BUFFERS) == (31), "IORING_OP_PROVIDE_BUFFERS != 31");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_PROVIDE_BUFFERS 31
#endif
#if defined(IORING_OP_REMOVE_BUFFERS) || (defined(HAVE_DECL_IORING_OP_REMOVE_BUFFERS) && HAVE_DECL_IORING_OP_REMOVE_BUFFERS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_OP_REMOVE_BUFFERS) == (32), "IORING_OP_REMOVE_BUFFERS != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_OP_REMOVE_BUFFERS 32
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat uring_ops in mpers mode

# else

static const struct xlat_data uring_ops_xdata[] = {
 [IORING_OP_NOP] = XLAT(IORING_OP_NOP),
 #define XLAT_VAL_0 ((unsigned) (IORING_OP_NOP))
 #define XLAT_STR_0 STRINGIFY(IORING_OP_NOP)
 [IORING_OP_READV] = XLAT(IORING_OP_READV),
 #define XLAT_VAL_1 ((unsigned) (IORING_OP_READV))
 #define XLAT_STR_1 STRINGIFY(IORING_OP_READV)
 [IORING_OP_WRITEV] = XLAT(IORING_OP_WRITEV),
 #define XLAT_VAL_2 ((unsigned) (IORING_OP_WRITEV))
 #define XLAT_STR_2 STRINGIFY(IORING_OP_WRITEV)
 [IORING_OP_FSYNC] = XLAT(IORING_OP_FSYNC),
 #define XLAT_VAL_3 ((unsigned) (IORING_OP_FSYNC))
 #define XLAT_STR_3 STRINGIFY(IORING_OP_FSYNC)
 [IORING_OP_READ_FIXED] = XLAT(IORING_OP_READ_FIXED),
 #define XLAT_VAL_4 ((unsigned) (IORING_OP_READ_FIXED))
 #define XLAT_STR_4 STRINGIFY(IORING_OP_READ_FIXED)
 [IORING_OP_WRITE_FIXED] = XLAT(IORING_OP_WRITE_FIXED),
 #define XLAT_VAL_5 ((unsigned) (IORING_OP_WRITE_FIXED))
 #define XLAT_STR_5 STRINGIFY(IORING_OP_WRITE_FIXED)
 [IORING_OP_POLL_ADD] = XLAT(IORING_OP_POLL_ADD),
 #define XLAT_VAL_6 ((unsigned) (IORING_OP_POLL_ADD))
 #define XLAT_STR_6 STRINGIFY(IORING_OP_POLL_ADD)
 [IORING_OP_POLL_REMOVE] = XLAT(IORING_OP_POLL_REMOVE),
 #define XLAT_VAL_7 ((unsigned) (IORING_OP_POLL_REMOVE))
 #define XLAT_STR_7 STRINGIFY(IORING_OP_POLL_REMOVE)
 [IORING_OP_SYNC_FILE_RANGE] = XLAT(IORING_OP_SYNC_FILE_RANGE),
 #define XLAT_VAL_8 ((unsigned) (IORING_OP_SYNC_FILE_RANGE))
 #define XLAT_STR_8 STRINGIFY(IORING_OP_SYNC_FILE_RANGE)
 [IORING_OP_SENDMSG] = XLAT(IORING_OP_SENDMSG),
 #define XLAT_VAL_9 ((unsigned) (IORING_OP_SENDMSG))
 #define XLAT_STR_9 STRINGIFY(IORING_OP_SENDMSG)
 [IORING_OP_RECVMSG] = XLAT(IORING_OP_RECVMSG),
 #define XLAT_VAL_10 ((unsigned) (IORING_OP_RECVMSG))
 #define XLAT_STR_10 STRINGIFY(IORING_OP_RECVMSG)
 [IORING_OP_TIMEOUT] = XLAT(IORING_OP_TIMEOUT),
 #define XLAT_VAL_11 ((unsigned) (IORING_OP_TIMEOUT))
 #define XLAT_STR_11 STRINGIFY(IORING_OP_TIMEOUT)
 [IORING_OP_TIMEOUT_REMOVE] = XLAT(IORING_OP_TIMEOUT_REMOVE),
 #define XLAT_VAL_12 ((unsigned) (IORING_OP_TIMEOUT_REMOVE))
 #define XLAT_STR_12 STRINGIFY(IORING_OP_TIMEOUT_REMOVE)
 [IORING_OP_ACCEPT] = XLAT(IORING_OP_ACCEPT),
 #define XLAT_VAL_13 ((unsigned) (IORING_OP_ACCEPT))
 #define XLAT_STR_13 STRINGIFY(IORING_OP_ACCEPT)
 [IORING_OP_ASYNC_CANCEL] = XLAT(IORING_OP_ASYNC_CANCEL),
 #define XLAT_VAL_14 ((unsigned) (IORING_OP_ASYNC_CANCEL))
 #define XLAT_STR_14 STRINGIFY(IORING_OP_ASYNC_CANCEL)
 [IORING_OP_LINK_TIMEOUT] = XLAT(IORING_OP_LINK_TIMEOUT),
 #define XLAT_VAL_15 ((unsigned) (IORING_OP_LINK_TIMEOUT))
 #define XLAT_STR_15 STRINGIFY(IORING_OP_LINK_TIMEOUT)
 [IORING_OP_CONNECT] = XLAT(IORING_OP_CONNECT),
 #define XLAT_VAL_16 ((unsigned) (IORING_OP_CONNECT))
 #define XLAT_STR_16 STRINGIFY(IORING_OP_CONNECT)
 [IORING_OP_FALLOCATE] = XLAT(IORING_OP_FALLOCATE),
 #define XLAT_VAL_17 ((unsigned) (IORING_OP_FALLOCATE))
 #define XLAT_STR_17 STRINGIFY(IORING_OP_FALLOCATE)
 [IORING_OP_OPENAT] = XLAT(IORING_OP_OPENAT),
 #define XLAT_VAL_18 ((unsigned) (IORING_OP_OPENAT))
 #define XLAT_STR_18 STRINGIFY(IORING_OP_OPENAT)
 [IORING_OP_CLOSE] = XLAT(IORING_OP_CLOSE),
 #define XLAT_VAL_19 ((unsigned) (IORING_OP_CLOSE))
 #define XLAT_STR_19 STRINGIFY(IORING_OP_CLOSE)
 [IORING_OP_FILES_UPDATE] = XLAT(IORING_OP_FILES_UPDATE),
 #define XLAT_VAL_20 ((unsigned) (IORING_OP_FILES_UPDATE))
 #define XLAT_STR_20 STRINGIFY(IORING_OP_FILES_UPDATE)
 [IORING_OP_STATX] = XLAT(IORING_OP_STATX),
 #define XLAT_VAL_21 ((unsigned) (IORING_OP_STATX))
 #define XLAT_STR_21 STRINGIFY(IORING_OP_STATX)
 [IORING_OP_READ] = XLAT(IORING_OP_READ),
 #define XLAT_VAL_22 ((unsigned) (IORING_OP_READ))
 #define XLAT_STR_22 STRINGIFY(IORING_OP_READ)
 [IORING_OP_WRITE] = XLAT(IORING_OP_WRITE),
 #define XLAT_VAL_23 ((unsigned) (IORING_OP_WRITE))
 #define XLAT_STR_23 STRINGIFY(IORING_OP_WRITE)
 [IORING_OP_FADVISE] = XLAT(IORING_OP_FADVISE),
 #define XLAT_VAL_24 ((unsigned) (IORING_OP_FADVISE))
 #define XLAT_STR_24 STRINGIFY(IORING_OP_FADVISE)
 [IORING_OP_MADVISE] = XLAT(IORING_OP_MADVISE),
 #define XLAT_VAL_25 ((unsigned) (IORING_OP_MADVISE))
 #define XLAT_STR_25 STRINGIFY(IORING_OP_MADVISE)
 [IORING_OP_SEND] = XLAT(IORING_OP_SEND),
 #define XLAT_VAL_26 ((unsigned) (IORING_OP_SEND))
 #define XLAT_STR_26 STRINGIFY(IORING_OP_SEND)
 [IORING_OP_RECV] = XLAT(IORING_OP_RECV),
 #define XLAT_VAL_27 ((unsigned) (IORING_OP_RECV))
 #define XLAT_STR_27 STRINGIFY(IORING_OP_RECV)
 [IORING_OP_OPENAT2] = XLAT(IORING_OP_OPENAT2),
 #define XLAT_VAL_28 ((unsigned) (IORING_OP_OPENAT2))
 #define XLAT_STR_28 STRINGIFY(IORING_OP_OPENAT2)
 [IORING_OP_EPOLL_CTL] = XLAT(IORING_OP_EPOLL_CTL),
 #define XLAT_VAL_29 ((unsigned) (IORING_OP_EPOLL_CTL))
 #define XLAT_STR_29 STRINGIFY(IORING_OP_EPOLL_CTL)
 [IORING_OP_SPLICE] = XLAT(IORING_OP_SPLICE),
 #define XLAT_VAL_30 ((unsigned) (IORING_OP_SPLICE))
 #define XLAT_STR_30 STRINGIFY(IORING_OP_SPLICE)
 [IORING_OP_PROVIDE_BUFFERS] = XLAT(IORING_OP_PROVIDE_BUFFERS),
 #define XLAT_VAL_31 ((unsigned) (IORING_OP_PROVIDE_BUFFERS))
 #define XLAT_STR_31 STRINGIFY(IORING_OP_PROVIDE_BUFFERS)
 [IORING_OP_REMOVE_BUFFERS] = XLAT(IORING_OP_REMOVE_BUFFERS),
 #define XLAT_VAL_32 ((unsigned) (IORING_OP_REMOVE_BUFFERS))
 #define XLAT_STR_32 STRINGIFY(IORING_OP_REMOVE_BUFFERS)
};
static
const struct xlat uring_ops[1] = { {
 .data = uring_ops_xdata,
 .size = ARRAY_SIZE(uring_ops_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
