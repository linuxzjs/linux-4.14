/* Generated by ./xlat/gen.sh from ./xlat/rtnl_tc_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(TCA_UNSPEC) || (defined(HAVE_DECL_TCA_UNSPEC) && HAVE_DECL_TCA_UNSPEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_UNSPEC) == (0), "TCA_UNSPEC != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_UNSPEC 0
#endif
#if defined(TCA_KIND) || (defined(HAVE_DECL_TCA_KIND) && HAVE_DECL_TCA_KIND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_KIND) == (1), "TCA_KIND != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_KIND 1
#endif
#if defined(TCA_OPTIONS) || (defined(HAVE_DECL_TCA_OPTIONS) && HAVE_DECL_TCA_OPTIONS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_OPTIONS) == (2), "TCA_OPTIONS != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_OPTIONS 2
#endif
#if defined(TCA_STATS) || (defined(HAVE_DECL_TCA_STATS) && HAVE_DECL_TCA_STATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_STATS) == (3), "TCA_STATS != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_STATS 3
#endif
#if defined(TCA_XSTATS) || (defined(HAVE_DECL_TCA_XSTATS) && HAVE_DECL_TCA_XSTATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_XSTATS) == (4), "TCA_XSTATS != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_XSTATS 4
#endif
#if defined(TCA_RATE) || (defined(HAVE_DECL_TCA_RATE) && HAVE_DECL_TCA_RATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_RATE) == (5), "TCA_RATE != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_RATE 5
#endif
#if defined(TCA_FCNT) || (defined(HAVE_DECL_TCA_FCNT) && HAVE_DECL_TCA_FCNT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_FCNT) == (6), "TCA_FCNT != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_FCNT 6
#endif
#if defined(TCA_STATS2) || (defined(HAVE_DECL_TCA_STATS2) && HAVE_DECL_TCA_STATS2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_STATS2) == (7), "TCA_STATS2 != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_STATS2 7
#endif
#if defined(TCA_STAB) || (defined(HAVE_DECL_TCA_STAB) && HAVE_DECL_TCA_STAB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_STAB) == (8), "TCA_STAB != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_STAB 8
#endif
#if defined(TCA_PAD) || (defined(HAVE_DECL_TCA_PAD) && HAVE_DECL_TCA_PAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_PAD) == (9), "TCA_PAD != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_PAD 9
#endif
#if defined(TCA_DUMP_INVISIBLE) || (defined(HAVE_DECL_TCA_DUMP_INVISIBLE) && HAVE_DECL_TCA_DUMP_INVISIBLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_DUMP_INVISIBLE) == (10), "TCA_DUMP_INVISIBLE != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_DUMP_INVISIBLE 10
#endif
#if defined(TCA_CHAIN) || (defined(HAVE_DECL_TCA_CHAIN) && HAVE_DECL_TCA_CHAIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_CHAIN) == (11), "TCA_CHAIN != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_CHAIN 11
#endif
#if defined(TCA_HW_OFFLOAD) || (defined(HAVE_DECL_TCA_HW_OFFLOAD) && HAVE_DECL_TCA_HW_OFFLOAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_HW_OFFLOAD) == (12), "TCA_HW_OFFLOAD != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_HW_OFFLOAD 12
#endif
#if defined(TCA_INGRESS_BLOCK) || (defined(HAVE_DECL_TCA_INGRESS_BLOCK) && HAVE_DECL_TCA_INGRESS_BLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_INGRESS_BLOCK) == (13), "TCA_INGRESS_BLOCK != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_INGRESS_BLOCK 13
#endif
#if defined(TCA_EGRESS_BLOCK) || (defined(HAVE_DECL_TCA_EGRESS_BLOCK) && HAVE_DECL_TCA_EGRESS_BLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TCA_EGRESS_BLOCK) == (14), "TCA_EGRESS_BLOCK != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TCA_EGRESS_BLOCK 14
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_tc_attrs in mpers mode

# else

static const struct xlat_data rtnl_tc_attrs_xdata[] = {
 [TCA_UNSPEC] = XLAT(TCA_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (TCA_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(TCA_UNSPEC)
 [TCA_KIND] = XLAT(TCA_KIND),
 #define XLAT_VAL_1 ((unsigned) (TCA_KIND))
 #define XLAT_STR_1 STRINGIFY(TCA_KIND)
 [TCA_OPTIONS] = XLAT(TCA_OPTIONS),
 #define XLAT_VAL_2 ((unsigned) (TCA_OPTIONS))
 #define XLAT_STR_2 STRINGIFY(TCA_OPTIONS)
 [TCA_STATS] = XLAT(TCA_STATS),
 #define XLAT_VAL_3 ((unsigned) (TCA_STATS))
 #define XLAT_STR_3 STRINGIFY(TCA_STATS)
 [TCA_XSTATS] = XLAT(TCA_XSTATS),
 #define XLAT_VAL_4 ((unsigned) (TCA_XSTATS))
 #define XLAT_STR_4 STRINGIFY(TCA_XSTATS)
 [TCA_RATE] = XLAT(TCA_RATE),
 #define XLAT_VAL_5 ((unsigned) (TCA_RATE))
 #define XLAT_STR_5 STRINGIFY(TCA_RATE)
 [TCA_FCNT] = XLAT(TCA_FCNT),
 #define XLAT_VAL_6 ((unsigned) (TCA_FCNT))
 #define XLAT_STR_6 STRINGIFY(TCA_FCNT)
 [TCA_STATS2] = XLAT(TCA_STATS2),
 #define XLAT_VAL_7 ((unsigned) (TCA_STATS2))
 #define XLAT_STR_7 STRINGIFY(TCA_STATS2)
 [TCA_STAB] = XLAT(TCA_STAB),
 #define XLAT_VAL_8 ((unsigned) (TCA_STAB))
 #define XLAT_STR_8 STRINGIFY(TCA_STAB)
 [TCA_PAD] = XLAT(TCA_PAD),
 #define XLAT_VAL_9 ((unsigned) (TCA_PAD))
 #define XLAT_STR_9 STRINGIFY(TCA_PAD)
 [TCA_DUMP_INVISIBLE] = XLAT(TCA_DUMP_INVISIBLE),
 #define XLAT_VAL_10 ((unsigned) (TCA_DUMP_INVISIBLE))
 #define XLAT_STR_10 STRINGIFY(TCA_DUMP_INVISIBLE)
 [TCA_CHAIN] = XLAT(TCA_CHAIN),
 #define XLAT_VAL_11 ((unsigned) (TCA_CHAIN))
 #define XLAT_STR_11 STRINGIFY(TCA_CHAIN)
 [TCA_HW_OFFLOAD] = XLAT(TCA_HW_OFFLOAD),
 #define XLAT_VAL_12 ((unsigned) (TCA_HW_OFFLOAD))
 #define XLAT_STR_12 STRINGIFY(TCA_HW_OFFLOAD)
 [TCA_INGRESS_BLOCK] = XLAT(TCA_INGRESS_BLOCK),
 #define XLAT_VAL_13 ((unsigned) (TCA_INGRESS_BLOCK))
 #define XLAT_STR_13 STRINGIFY(TCA_INGRESS_BLOCK)
 [TCA_EGRESS_BLOCK] = XLAT(TCA_EGRESS_BLOCK),
 #define XLAT_VAL_14 ((unsigned) (TCA_EGRESS_BLOCK))
 #define XLAT_STR_14 STRINGIFY(TCA_EGRESS_BLOCK)
};
static
const struct xlat rtnl_tc_attrs[1] = { {
 .data = rtnl_tc_attrs_xdata,
 .size = ARRAY_SIZE(rtnl_tc_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
